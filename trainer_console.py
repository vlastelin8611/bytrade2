#!/usr/bin/env python3
"""
–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ ML –º–æ–¥–µ–ª–µ–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –±–µ–∑ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import sys
import os
import json
import time
import logging
import threading
from datetime import datetime
from typing import Dict, List, Optional
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from src.strategies.adaptive_ml import AdaptiveMLStrategy
    from src.api.bybit_client import BybitClient
    from src.tools.ticker_data_loader import TickerDataLoader
    from config import get_api_credentials, get_ml_config
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    sys.exit(1)


class TickerDataWatcher(FileSystemEventHandler):
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ tickers_data.json"""
    
    def __init__(self, trainer):
        self.trainer = trainer
        self.last_modified = 0
        
    def on_modified(self, event):
        if event.is_directory:
            return
            
        if event.src_path.endswith('tickers_data.json'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            current_time = time.time()
            if current_time - self.last_modified < 5:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
                return
                
            self.last_modified = current_time
            print(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {datetime.now().strftime('%H:%M:%S')}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self.trainer.auto_retrain, daemon=True).start()


class ConsoleTrainer:
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä ML –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.symbols = []
        self.symbol_categories = {}
        self.file_watcher = None
        self.observer = None
        self.auto_training_enabled = True
        self.init_components()
        self.setup_file_monitoring()
    
    def init_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            print("‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ C:\\Users\\vlastelin8\\Desktop\\trade\\crypto\\keys")
            
            # –ü–æ–ª—É—á–∞–µ–º API credentials
            api_creds = get_api_credentials()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
            self.bybit_client = BybitClient(
                api_creds['api_key'],
                api_creds['api_secret'],
                api_creds['testnet']
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TickerDataLoader
            try:
                self.ticker_loader = TickerDataLoader()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TickerDataLoader: {e}")
                self.ticker_loader = None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            ml_config = get_ml_config()
            self.ml_strategy = AdaptiveMLStrategy(
                name="adaptive_ml",
                config=ml_config,
                api_client=self.bybit_client,
                db_manager=None,
                config_manager=None
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º TickerDataLoader –∫ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if self.ticker_loader:
                self.ml_strategy.ticker_loader = self.ticker_loader
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
            self.ml_strategy.load_models()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            sys.exit(1)
    
    def validate_symbols_with_api(self, symbols: List[str]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ API"""
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ API...")
        
        validated_symbols = []
        symbol_categories = {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories_to_check = ['spot', 'linear']
            all_valid_symbols = {}
            
            for category in categories_to_check:
                try:
                    instruments = self.ml_strategy.api_client.get_instruments_info(category=category)
                    if instruments:
                        active_usdt_count = 0
                        for instrument in instruments:
                            symbol = instrument.get('symbol', '')
                            status = instrument.get('status', '')
                            
                            if symbol.endswith('USDT') and status == 'Trading':
                                active_usdt_count += 1
                                if symbol not in all_valid_symbols:
                                    all_valid_symbols[symbol] = []
                                all_valid_symbols[symbol].append(category)
                        
                        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {active_usdt_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            for symbol in symbols:
                if symbol in all_valid_symbols:
                    validated_symbols.append(symbol)
                    symbol_categories[symbol] = all_valid_symbols[symbol]
            
            self.symbol_categories = symbol_categories
            print(f"‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ {len(validated_symbols)} –∏–∑ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return validated_symbols
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []
    
    def load_symbols(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ TickerDataLoader
            if self.ticker_loader:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
                full_ticker_data = self.ticker_loader.load_tickers_data()
                if full_ticker_data and 'tickers' in full_ticker_data:
                    tickers = full_ticker_data['tickers']
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º USDT —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
                    if isinstance(tickers, list):
                        usdt_symbols = [ticker['symbol'] for ticker in tickers 
                                      if ticker.get('symbol', '').endswith('USDT')]
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                        usdt_symbols = [symbol for symbol in tickers.keys() if symbol.endswith('USDT')]
                    
                    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ TickerDataLoader: {len(usdt_symbols)}")
                    
                    if usdt_symbols:
                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ API
                        validated_symbols = self.validate_symbols_with_api(usdt_symbols)
                        
                        if validated_symbols:
                            self.symbols = validated_symbols
                            print(f"‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(validated_symbols)}")
                            return
                        else:
                            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ TickerDataLoader")
                    else:
                        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ USDT —Å–∏–º–≤–æ–ª–æ–≤ –≤ TickerDataLoader")
                else:
                    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ TickerDataLoader: 0")
            
            # Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
            print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API...")
            try:
                instruments = self.ml_strategy.api_client.get_instruments_info(category='spot')
                if instruments:
                    api_symbols = []
                    for instrument in instruments:
                        symbol = instrument.get('symbol', '')
                        status = instrument.get('status', '')
                        
                        if symbol.endswith('USDT') and status == 'Trading':
                            api_symbols.append(symbol)
                    
                    if api_symbols:
                        # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 100 —Å–∏–º–≤–æ–ª–æ–≤
                        self.symbols = api_symbols
                        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ API: {len(self.symbols)}")
                        
                        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–ª—è API —Å–∏–º–≤–æ–ª–æ–≤
                        self.symbol_categories = {symbol: ['spot'] for symbol in self.symbols}
                        return
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ API: {e}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
            self.symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT']
            self.symbol_categories = {symbol: ['spot'] for symbol in self.symbols}
            print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤: {len(self.symbols)}")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            self.symbols = ['BTCUSDT', 'ETHUSDT']
            self.symbol_categories = {symbol: ['spot'] for symbol in self.symbols}
    
    def choose_category(self, symbol: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if symbol in self.symbol_categories:
            categories = self.symbol_categories[symbol]
            if categories:
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º spot, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if 'spot' in categories:
                    return 'spot'
                else:
                    return categories[0]
        
        # Fallback: –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
        if symbol.endswith('USDT') and not symbol.endswith('PERP'):
            return 'spot'
        elif symbol.endswith('PERP') or symbol.endswith('USD'):
            return 'linear'
        else:
            return 'spot'
    
    def train_models(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        if not self.symbols:
            print("‚ùå –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è {len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
        
        successful_trainings = 0
        failed_trainings = 0
        total_symbols = len(self.symbols)
        
        for i, symbol in enumerate(self.symbols):
            try:
                print(f"\n[{i+1}/{total_symbols}] üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}...")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = self.choose_category(symbol)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                klines = []
                try:
                    api_response = self.ml_strategy.api_client.get_klines(
                        symbol=symbol,
                        interval='4h',
                        limit=1000,
                        category=category
                    )
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                    if api_response and isinstance(api_response, dict) and 'list' in api_response:
                        raw_klines = api_response['list']
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç API –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                        klines = []
                        for kline in raw_klines:
                            klines.append({
                                'timestamp': int(kline[0]),
                                'open': float(kline[1]),
                                'high': float(kline[2]),
                                'low': float(kline[3]),
                                'close': float(kline[4]),
                                'volume': float(kline[5])
                            })
                        print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {len(klines)} –∑–∞–ø–∏—Å–µ–π")
                    elif api_response and isinstance(api_response, list):
                        klines = api_response
                        print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {len(klines)} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        print(f"‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                        
                except Exception as e:
                    error_msg = str(e)
                    if "Category is invalid" in error_msg:
                        print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è {symbol}: {error_msg}")
                    elif "Not supported symbols" in error_msg:
                        print(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {error_msg}")
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: {error_msg}")
                
                # –ï—Å–ª–∏ API –Ω–µ –¥–∞–ª –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
                if not klines or len(klines) < 100:
                    try:
                        if self.ticker_loader:
                            historical_data = self.ticker_loader.get_historical_data(symbol)
                            if historical_data and len(historical_data) > len(klines):
                                klines = historical_data
                                print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è {symbol}: {len(klines)} –∑–∞–ø–∏—Å–µ–π")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è {symbol}: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                min_required = 30
                if not klines or len(klines) < min_required:
                    print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(klines) if klines else 0} < {min_required}")
                    failed_trainings += 1
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –º–µ—Ç–∫–∏
                features, labels = [], []
                window = self.ml_strategy.feature_window
                
                for j in range(window, len(klines) - 1):
                    try:
                        f = self.ml_strategy.extract_features(klines[j-window:j])
                        if f and len(f) > 0:
                            features.append(f)
                            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                            current_price = float(klines[j]['close'])
                            future_price = float(klines[j + 1]['close'])
                            change = (future_price - current_price) / current_price
                            
                            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–æ–∫
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏ –¥–ª—è –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                            abs_change = abs(change)
                            
                            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
                            if abs_change > 0.005:  # 0.5% - –∑–Ω–∞—á–∏–º–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                                if change > 0:
                                    labels.append(1)  # —Ä–æ—Å—Ç
                                else:
                                    labels.append(-1)  # –ø–∞–¥–µ–Ω–∏–µ
                            else:
                                labels.append(0)  # –±–æ–∫–æ–≤–∏–∫
                    except Exception as e:
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                min_features = 20
                if len(features) < min_features:
                    print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}: {len(features)} < {min_features}")
                    failed_trainings += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
                unique_labels = set(labels)
                if len(unique_labels) < 2:
                    print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –º–µ—Ç–æ–∫ –¥–ª—è {symbol}: {unique_labels}")
                    failed_trainings += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
                label_counts = {label: labels.count(label) for label in unique_labels}
                min_class_size = min(label_counts.values())
                if min_class_size < 5:  # –º–∏–Ω–∏–º—É–º 5 –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
                    print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–ª–∞—Å—Å–∞ –¥–ª—è {symbol}: {label_counts}")
                    failed_trainings += 1
                    continue
                
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                success = self.ml_strategy.train_model(symbol, features, labels)
                
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
                    try:
                        self.ml_strategy.save_models()
                        
                        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
                        accuracy = self.ml_strategy.performance.get(symbol, {}).get('accuracy', 0.0)
                        samples = self.ml_strategy.performance.get(symbol, {}).get('samples', len(features))
                        
                        print(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –æ–±—É—á–µ–Ω–∞ (—Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%}, –æ–±—Ä–∞–∑—Ü–æ–≤: {samples})")
                        successful_trainings += 1
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}: {e}")
                        failed_trainings += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}")
                    failed_trainings += 1
                
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ {symbol}: {e}")
                failed_trainings += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ {successful_trainings}, –æ—à–∏–±–æ–∫ {failed_trainings} –∏–∑ {total_symbols}")
        if successful_trainings > 0:
            success_rate = (successful_trainings / total_symbols) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"""
        print("ü§ñ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä ML –º–æ–¥–µ–ª–µ–π")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        self.load_symbols()
        
        if not self.symbols:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        self.train_models()
        
        print("\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    def setup_file_monitoring(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ tickers_data.json"""
        try:
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–æ–≤
            data_path = Path.home() / "AppData" / "Local" / "BybitTradingBot" / "data"
            
            if not data_path.exists():
                print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_path}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Ñ–∞–π–ª–∞–º–∏
            self.file_watcher = TickerDataWatcher(self)
            self.observer = Observer()
            self.observer.schedule(self.file_watcher, str(data_path), recursive=False)
            self.observer.start()
            
            print(f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞ tickers_data.json –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            print(f"üìÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {data_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤: {e}")
    
    def auto_retrain(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.auto_training_enabled:
            print("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return
            
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ...")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã
            old_count = len(self.symbols)
            self.load_symbols()
            new_count = len(self.symbols)
            
            print(f"üìä –°–∏–º–≤–æ–ª–æ–≤: –±—ã–ª–æ {old_count}, —Å—Ç–∞–ª–æ {new_count}")
            
            if new_count == 0:
                print("‚ùå –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
            self.train_models()
            
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤"""
        if self.observer:
            self.observer.stop()
            self.observer.join()
            print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def run_with_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Ñ–∞–π–ª–æ–≤"""
        try:
            print("ü§ñ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä ML –º–æ–¥–µ–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±—É—á–µ–Ω–∏–µ–º")
            print("=" * 60)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
            self.load_symbols()
            
            if not self.symbols:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            self.train_models()
            
            print("\nüîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤...")
            print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            
            # –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞...")
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.stop_monitoring()
            print("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"""
        print("ü§ñ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä ML –º–æ–¥–µ–ª–µ–π")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        self.load_symbols()
        
        if not self.symbols:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        self.train_models()
        
        print("\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='ML Trainer –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –±–æ—Ç–∞')
    parser.add_argument('--auto', action='store_true', 
                       help='–ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    trainer = ConsoleTrainer()
    
    if args.auto:
        trainer.run_with_monitoring()
    else:
        trainer.run()


if __name__ == "__main__":
    main()