#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
"""

import sys
import os
import json
import time
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / 'src'))

try:
    from api.bybit_client import BybitClient
    from database.db_manager import DatabaseManager
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

class BalanceDeepVerification:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    
    def __init__(self):
        self.api_client = None
        self.db_manager = None
        self.test_results = []
        
    def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            import config
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
            self.api_client = BybitClient(
                api_key=config.API_KEY,
                api_secret=config.API_SECRET,
                testnet=config.USE_TESTNET
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db_manager = DatabaseManager()
            
            print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def test_raw_api_call(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        print("\nüîç –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API get_wallet_balance")
        
        try:
            start_time = time.time()
            raw_response = self.api_client.get_wallet_balance()
            execution_time = (time.time() - start_time) * 1000
            
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} –º—Å")
            print(f"üìä –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(raw_response)}")
            
            if raw_response:
                print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
                self._print_dict_structure(raw_response, indent=2)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
                required_fields = ['totalWalletBalance', 'availableBalance']
                missing_fields = []
                
                for field in required_fields:
                    if field not in raw_response:
                        missing_fields.append(field)
                
                if missing_fields:
                    print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                else:
                    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
                self.test_results.append({
                    'test': 'raw_api_call',
                    'status': 'success',
                    'execution_time_ms': execution_time,
                    'response_type': str(type(raw_response)),
                    'has_required_fields': len(missing_fields) == 0
                })
                
                return raw_response
            else:
                print("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                self.test_results.append({
                    'test': 'raw_api_call',
                    'status': 'empty_response'
                })
                return {}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {e}")
            self.test_results.append({
                'test': 'raw_api_call',
                'status': 'error',
                'error': str(e)
            })
            return {}
    
    def test_balance_parsing(self, raw_response: Dict[str, Any]):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞"""
        print("\nüîç –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞")
        
        try:
            if not raw_response:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            total_balance = float(raw_response.get('totalWalletBalance', 0))
            available_balance = float(raw_response.get('availableBalance', 0))
            unrealized_pnl = float(raw_response.get('totalUnrealizedPnl', 0))
            
            print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.8f} USDT")
            print(f"üíµ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {available_balance:.8f} USDT")
            print(f"üìà –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: {unrealized_pnl:.8f} USDT")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π
            balance_checks = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â–∏–π
            if available_balance <= total_balance:
                balance_checks.append("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚â§ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å")
            else:
                balance_checks.append("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å > –û–±—â–∏–π –±–∞–ª–∞–Ω—Å (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ (–∫—Ä–æ–º–µ P&L)
            if total_balance >= 0:
                balance_checks.append("‚úÖ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å ‚â• 0")
            else:
                balance_checks.append("‚ùå –û–±—â–∏–π –±–∞–ª–∞–Ω—Å < 0 (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
                
            if available_balance >= 0:
                balance_checks.append("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚â• 0")
            else:
                balance_checks.append("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å < 0 (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
            
            for check in balance_checks:
                print(f"  {check}")
            
            self.test_results.append({
                'test': 'balance_parsing',
                'status': 'success',
                'total_balance': total_balance,
                'available_balance': available_balance,
                'unrealized_pnl': unrealized_pnl,
                'checks_passed': len([c for c in balance_checks if c.startswith('‚úÖ')])
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            self.test_results.append({
                'test': 'balance_parsing',
                'status': 'error',
                'error': str(e)
            })
    
    def test_multiple_calls_consistency(self, num_calls: int = 5):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö"""
        print(f"\nüîç –¢–µ—Å—Ç 3: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏ {num_calls} –≤—ã–∑–æ–≤–∞—Ö")
        
        balances = []
        execution_times = []
        
        try:
            for i in range(num_calls):
                start_time = time.time()
                response = self.api_client.get_wallet_balance()
                exec_time = (time.time() - start_time) * 1000
                
                execution_times.append(exec_time)
                
                if response:
                    balance = {
                        'total': float(response.get('totalWalletBalance', 0)),
                        'available': float(response.get('availableBalance', 0)),
                        'unrealized_pnl': float(response.get('totalUnrealizedPnl', 0))
                    }
                    balances.append(balance)
                    print(f"  –í—ã–∑–æ–≤ {i+1}: {balance['total']:.8f} USDT ({exec_time:.1f}–º—Å)")
                else:
                    print(f"  –í—ã–∑–æ–≤ {i+1}: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
                time.sleep(0.5)
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            if len(balances) > 1:
                total_balances = [b['total'] for b in balances]
                available_balances = [b['available'] for b in balances]
                
                total_variance = max(total_balances) - min(total_balances)
                available_variance = max(available_balances) - min(available_balances)
                
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:")
                print(f"  –†–∞–∑–±—Ä–æ—Å –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {total_variance:.8f} USDT")
                print(f"  –†–∞–∑–±—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {available_variance:.8f} USDT")
                print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {sum(execution_times)/len(execution_times):.1f} –º—Å")
                
                # –ë–∞–ª–∞–Ω—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ (—Ä–∞–∑–±—Ä–æ—Å < 0.01 USDT)
                is_consistent = total_variance < 0.01 and available_variance < 0.01
                
                if is_consistent:
                    print("‚úÖ –ë–∞–ª–∞–Ω—Å—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
                else:
                    print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–ª–µ–±–∞–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö")
                
                self.test_results.append({
                    'test': 'consistency_check',
                    'status': 'success',
                    'calls_made': len(balances),
                    'total_variance': total_variance,
                    'available_variance': available_variance,
                    'is_consistent': is_consistent,
                    'avg_execution_time_ms': sum(execution_times)/len(execution_times)
                })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            self.test_results.append({
                'test': 'consistency_check',
                'status': 'error',
                'error': str(e)
            })
    
    def test_cache_behavior(self):
        """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫—ç—à–∞"""
        print("\nüîç –¢–µ—Å—Ç 4: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫—ç—à–∞")
        
        try:
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ API)
            start_time = time.time()
            response1 = self.api_client.get_wallet_balance()
            time1 = (time.time() - start_time) * 1000
            
            # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
            start_time = time.time()
            response2 = self.api_client.get_wallet_balance()
            time2 = (time.time() - start_time) * 1000
            
            print(f"  –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {time1:.1f} –º—Å")
            print(f"  –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {time2:.1f} –º—Å")
            
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ, –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à
            if time2 < time1 * 0.5 and time2 < 50:  # –ú–µ–Ω–µ–µ 50–º—Å –∏ –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ
                print("‚úÖ –í–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
                cache_used = True
            else:
                print("‚ÑπÔ∏è  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                cache_used = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
            responses_identical = response1 == response2
            print(f"  –û—Ç–≤–µ—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã: {'‚úÖ –î–∞' if responses_identical else '‚ùå –ù–µ—Ç'}")
            
            self.test_results.append({
                'test': 'cache_behavior',
                'status': 'success',
                'first_call_time_ms': time1,
                'second_call_time_ms': time2,
                'cache_likely_used': cache_used,
                'responses_identical': responses_identical
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫—ç—à–∞: {e}")
            self.test_results.append({
                'test': 'cache_behavior',
                'status': 'error',
                'error': str(e)
            })
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüîç –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
            invalid_client = BybitClient(
                api_key="invalid_key",
                api_secret="invalid_secret",
                testnet=True
            )
            
            try:
                response = invalid_client.get_wallet_balance()
                print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏: {response}")
                error_handled = False
            except Exception as e:
                print(f"‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {type(e).__name__}")
                error_handled = True
            
            self.test_results.append({
                'test': 'error_handling',
                'status': 'success',
                'error_properly_handled': error_handled
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
            self.test_results.append({
                'test': 'error_handling',
                'status': 'error',
                'error': str(e)
            })
    
    def _print_dict_structure(self, data: Any, indent: int = 0, max_depth: int = 3):
        """–í—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–æ–≤–∞—Ä—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≥–ª—É–±–∏–Ω—ã"""
        if indent > max_depth * 2:
            print("" * indent + "...")
            return
            
        if isinstance(data, dict):
            for key, value in data.items():
                if isinstance(value, (dict, list)):
                    print("" * indent + f"{key}: {type(value).__name__}")
                    if indent < max_depth * 2:
                        self._print_dict_structure(value, indent + 2, max_depth)
                else:
                    print(" " * indent + f"{key}: {value} ({type(value).__name__})")
        elif isinstance(data, list):
            print(" " * indent + f"–°–ø–∏—Å–æ–∫ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            if data and indent < max_depth * 2:
                print(" " * indent + "–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç:")
                self._print_dict_structure(data[0], indent + 2, max_depth)
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ì–õ–£–ë–û–ö–û–ô –ü–†–û–í–ï–†–ö–ò –ë–ê–õ–ê–ù–°–ê")
        print("="*60)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r['status'] == 'success'])
        
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"  –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests*100):.1f}%")
        
        print(f"\nüìù –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:")
        for i, result in enumerate(self.test_results, 1):
            status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
            print(f"  {i}. {result['test']}: {status_icon} {result['status']}")
            
            if result['status'] == 'error':
                print(f"     –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_path = Path(__file__).parent / 'balance_verification_report.json'
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump({
                    'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                    'summary': {
                        'total_tests': total_tests,
                        'successful_tests': successful_tests,
                        'success_rate': successful_tests/total_tests*100 if total_tests > 0 else 0
                    },
                    'test_results': self.test_results
                }, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
        
        return successful_tests == total_tests

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ì–õ–£–ë–û–ö–û–ô –ü–†–û–í–ï–†–ö–ò –ë–ê–õ–ê–ù–°–ê")
    print("="*50)
    
    verifier = BalanceDeepVerification()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if not verifier.setup():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
        return False
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    raw_response = verifier.test_raw_api_call()
    verifier.test_balance_parsing(raw_response)
    verifier.test_multiple_calls_consistency()
    verifier.test_cache_behavior()
    verifier.test_error_handling()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    all_tests_passed = verifier.generate_report()
    
    if all_tests_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ë–ê–õ–ê–ù–° –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
    else:
        print("\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
        print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
    
    return all_tests_passed

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)