#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è Bybit
–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API
"""

import sys
import os
import asyncio
import logging
import traceback
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from pathlib import Path
import threading
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / 'src'))

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
    QWidget, QPushButton, QLabel, QTextEdit, QTableWidget, 
    QTableWidgetItem, QHeaderView, QSplitter, QGroupBox,
    QProgressBar, QStatusBar, QMessageBox, QTabWidget,
    QScrollArea, QFrame, QGridLayout, QSpacerItem, QSizePolicy
)
from PySide6.QtCore import QTimer, QThread, Signal, Qt, QMutex
from PySide6.QtGui import QTextCursor
from PySide6.QtGui import QFont, QPalette, QColor, QPixmap, QIcon

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    import sys
    import os
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))
    from api.bybit_client import BybitClient
    from strategies.adaptive_ml import AdaptiveMLStrategy
    from database.db_manager import DatabaseManager
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    sys.exit(1)


class TradingWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    balance_updated = Signal(dict)
    positions_updated = Signal(list)
    trade_executed = Signal(dict)
    log_message = Signal(str)
    error_occurred = Signal(str)
    status_updated = Signal(str)
    
    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        super().__init__()
        self.api_key = api_key
        self.api_secret = api_secret
        self.testnet = testnet
        self.running = False
        self.trading_enabled = False
        self._mutex = QMutex()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.bybit_client = None
        self.ml_strategy = None
        self.db_manager = None
        self.config_manager = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.daily_volume = 0.0
        self.daily_pnl = 0.0
        self.last_reset_date = datetime.now().date()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        session_id = f"session_{int(time.time())}"
        
        try:
            self.running = True
            self.status_updated.emit("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            self.log_message.emit("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
            self.db_manager = DatabaseManager()
            # self.db_manager.log_entry({
            #     'level': 'INFO',
            #     'logger_name': 'TRADING_WORKER',
            #     'message': 'Trading worker started',
            #     'session_id': session_id
            # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try:
                # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ bytrade –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bytrade', 'src'))
                from core.config_manager import ConfigManager
                self.config_manager = ConfigManager()
                self.log_message.emit("‚úÖ ConfigManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except ImportError as e:
                self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ConfigManager: {e}")
                self.log_message.emit("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ ConfigManager")
                self.config_manager = None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API
            start_time = time.time()
            self.bybit_client = BybitClient(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet
            )
            init_time = (time.time() - start_time) * 1000
            
            # self.db_manager.log_entry({
            #     'level': 'INFO',
            #     'logger_name': 'API_CLIENT',
            #     'message': f'Client initialized (testnet: {self.testnet})',
            #     'session_id': session_id
            # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            try:
                self.log_message.emit("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
                self.log_message.emit("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML...")
                start_time = time.time()
                ml_config = {
                    'feature_window': 50,
                    'confidence_threshold': 0.65,
                    'use_technical_indicators': True,
                    'use_market_regime': True
                }
                self.log_message.emit("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML —Å–æ–∑–¥–∞–Ω–∞")
                self.log_message.emit("üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
                self.ml_strategy = AdaptiveMLStrategy(
                    name="adaptive_ml",
                    config=ml_config,
                    api_client=self.bybit_client,
                    db_manager=self.db_manager,
                    config_manager=self.config_manager
                )
                self.log_message.emit("‚úÖ –û–±—ä–µ–∫—Ç ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–∑–¥–∞–Ω")
                ml_init_time = (time.time() - start_time) * 1000
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                # self.db_manager.log_entry({
                #     'level': 'INFO',
                #     'logger_name': 'ML_STRATEGY',
                #     'message': 'ML strategy initialized',
                #     'session_id': session_id
                # })
                self.log_message.emit("‚úÖ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                print("DEBUG: ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                self.log_message.emit("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML...")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}"
                self.log_message.emit(error_msg)
                self.error_occurred.emit(error_msg)
                raise
            
            print("DEBUG: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å...")
            self.log_message.emit("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ'...")
            print("DEBUG: –í—ã–∑—ã–≤–∞–µ–º status_updated.emit...")
            self.status_updated.emit("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
            print("DEBUG: –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.log_message.emit("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.log_message.emit("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print(f"DEBUG: self.running = {self.running}")
            print("DEBUG: –í—ã–∑—ã–≤–∞–µ–º log_message.emit –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞...")
            self.log_message.emit("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
            print("DEBUG: –í—ã–∑—ã–≤–∞–µ–º log_message.emit –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏...")
            self.log_message.emit("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Ü–∏–∫–ª—É...")
            print("DEBUG: –î–æ—à–ª–∏ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            cycle_count = 0
            print(f"DEBUG: –ü–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Ü–∏–∫–ª, self.running = {self.running}")
            print("DEBUG: –ó–∞–º–µ–Ω—è–µ–º log_message.emit –Ω–∞ print –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
            print(f"‚úÖ –í—Ö–æ–¥–∏–º –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª, running={self.running}")
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª while...")
            while self.running:
                print(f"üîÑ –ù–∞—á–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ #{cycle_count + 1}")
                try:
                    print(f"üîÑ –¶–∏–∫–ª #{cycle_count + 1} –Ω–∞—á–∞—Ç")
                    cycle_start = time.time()
                    cycle_count += 1
                    
                    # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    print("üîÑ –í—ã–∑–æ–≤ _reset_daily_stats_if_needed()...")
                    self._reset_daily_stats_if_needed()
                    print("‚úÖ _reset_daily_stats_if_needed() –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")
                    balance_info = self._update_balance(session_id)
                    print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {balance_info is not None}")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
                    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
                    positions = self._update_positions(session_id)
                    print(f"‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(positions) if positions else 0} –ø–æ–∑–∏—Ü–∏–π")
                    
                    # –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                    if self.trading_enabled:
                        print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ #{cycle_count}...")
                        self._execute_trading_cycle(session_id, positions)
                    else:
                        print(f"‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ü–∏–∫–ª #{cycle_count})")
                        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                        if cycle_count % 10 == 1:
                            print("üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é' –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
                    cycle_time = (time.time() - cycle_start) * 1000
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    # self.db_manager.log_entry({
                    #     'level': 'DEBUG',
                    #     'logger_name': 'TRADING_CYCLE',
                    #     'message': f'Trading cycle {cycle_count} completed (enabled: {self.trading_enabled})',
                    #     'session_id': session_id
                    # })
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    self.msleep(5000)  # 5 —Å–µ–∫—É–Ω–¥
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}"
                    self.logger.error(error_msg)
                    self.error_occurred.emit(error_msg)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    # self.db_manager.log_entry({
                    #     'level': 'ERROR',
                    #     'logger_name': 'TRADING_WORKER',
                    #     'message': f'{type(e).__name__}: {str(e)}',
                    #     'exception': traceback.format_exc()
                    # })
                    
                    self.msleep(10000)  # 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞: {e}"
            self.logger.error(error_msg)
            self.error_occurred.emit(error_msg)
            
            if self.db_manager:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                # self.db_manager.log_entry({
                #     'level': 'CRITICAL',
                #     'logger_name': 'TRADING_WORKER',
                #     'message': f'Critical error: {type(e).__name__}: {str(e)}',
                #     'exception': traceback.format_exc()
                # })
                pass
        finally:
            self.running = False
            self.status_updated.emit("–û—Ç–∫–ª—é—á–µ–Ω–æ")
            self.log_message.emit("–¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            if self.db_manager:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                # self.db_manager.log_entry({
                #     'level': 'INFO',
                #     'logger_name': 'TRADING_WORKER',
                #     'message': 'Trading worker stopped',
                #     'session_id': session_id
                # })
                pass
    
    def _reset_daily_stats_if_needed(self):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è"""
        current_date = datetime.now().date()
        if current_date != self.last_reset_date:
            self.daily_volume = 0.0
            self.daily_pnl = 0.0
            self.last_reset_date = current_date
            
            # self.db_manager.log_entry({
            #     'level': 'INFO',
            #     'logger_name': 'TRADING_STATS',
            #     'message': f'Daily stats reset for date: {current_date}',
            #     'session_id': getattr(self, 'current_session_id', None)
            # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    
    def _update_balance(self, session_id: str) -> Optional[dict]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
        try:
            start_time = time.time()
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
            balance_response = self.bybit_client.get_wallet_balance()
            exec_time = (time.time() - start_time) * 1000
            
            if balance_response and balance_response.get('list'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
                balance_data = balance_response['list'][0]
                
                # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                balance_info = {
                    'totalWalletBalance': balance_data.get('totalWalletBalance', '0'),
                    'totalAvailableBalance': balance_data.get('totalAvailableBalance', '0'),
                    'totalEquity': balance_data.get('totalEquity', '0'),
                    'totalPerpUPL': balance_data.get('totalPerpUPL', '0'),
                    'coins': balance_data.get('coin', [])
                }
                
                self.balance_updated.emit(balance_info)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å—á–µ—Ç–∞
                account_data = {
                    'total_balance': float(balance_info.get('totalWalletBalance', 0)),
                    'available_balance': float(balance_info.get('totalAvailableBalance', 0)),
                    'unrealized_pnl': float(balance_info.get('totalPerpUPL', 0)),
                    'daily_pnl': self.daily_pnl,
                    'daily_volume': self.daily_volume,
                    'execution_time_ms': exec_time
                }
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                # self.db_manager.log_account_snapshot(account_data)
                
                return balance_info
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None
    
    def _update_positions(self, session_id: str) -> List[dict]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö"""
        try:
            start_time = time.time()
            all_positions = []
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (spot –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–π)
            categories = ["linear", "inverse"]
            
            for category in categories:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
                    positions = self.bybit_client.get_positions(category=category)
                    if positions:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        for pos in positions:
                            pos['category'] = category
                        all_positions.extend(positions)
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π {category}: {e}")
                    continue
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—Å —Ä–∞–∑–º–µ—Ä–æ–º > 0)
            active_positions = []
            for pos in all_positions:
                size = float(pos.get('size', 0))
                if size > 0:
                    active_positions.append(pos)
            
            exec_time = (time.time() - start_time) * 1000
            
            if active_positions:
                self.positions_updated.emit(active_positions)
                
                # self.db_manager.log_entry({
                #     'level': 'DEBUG',
                #     'logger_name': 'API_POSITIONS',
                #     'message': f'Positions updated: {len(active_positions)} active positions from {len(all_positions)} total',
                #     'session_id': session_id
                # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
                self.positions_updated.emit([])
                
                # self.db_manager.log_entry({
                #     'level': 'DEBUG',
                #     'logger_name': 'API_POSITIONS',
                #     'message': 'No active positions found',
                #     'session_id': session_id
                # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            return active_positions
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    def _execute_trading_cycle(self, session_id: str, positions: List[dict]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            cycle_start = time.time()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            symbols_to_analyze = self._get_trading_symbols(positions)
            
            for symbol in symbols_to_analyze:
                try:
                    # –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞
                    analysis_result = self._analyze_symbol(symbol, session_id)
                    
                    if analysis_result and analysis_result.get('signal') in ['BUY', 'SELL']:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 20% –±–∞–ª–∞–Ω—Å–∞ –≤ –¥–µ–Ω—å)
                        if self._check_daily_limits(analysis_result):
                            trade_result = self._execute_trade(symbol, analysis_result, session_id)
                            
                            if trade_result:
                                self.trade_executed.emit(trade_result)
                                
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                self.daily_volume += float(trade_result.get('size', 0))
                                
                                # –û–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                                self.ml_strategy.update_performance(symbol, trade_result)
                
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
                    continue
            
            cycle_time = (time.time() - cycle_start) * 1000
            # self.db_manager.log_entry({
            #     'level': 'DEBUG',
            #     'logger_name': 'TRADING_CYCLE',
            #     'message': f'Trading cycle completed: analyzed {len(symbols_to_analyze)} symbols',
            #     'session_id': session_id
            # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
    
    def _get_all_available_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ API"""
        try:
            if not self.bybit_client:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ spot –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            instruments = self.bybit_client.get_instruments_info(category="spot")
            
            if not instruments:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫")
                from config import FALLBACK_TRADING_SYMBOLS
                return FALLBACK_TRADING_SYMBOLS
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            usdt_symbols = []
            for instrument in instruments:
                symbol = instrument.get('symbol', '')
                status = instrument.get('status', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ USDT –ø–∞—Ä–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
                if (symbol.endswith('USDT') and 
                    status == 'Trading' and 
                    len(symbol) <= 12):  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    usdt_symbols.append(symbol)
            
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(usdt_symbols)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USDT —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            return sorted(usdt_symbols)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            from config import FALLBACK_TRADING_SYMBOLS
            return FALLBACK_TRADING_SYMBOLS
    
    def _get_trading_symbols(self, positions: List[dict]) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        all_available_symbols = self._get_all_available_symbols()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        position_symbols = [pos.get('symbol') for pos in positions if pos.get('symbol')]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∞–º —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
        priority_symbols = list(set(position_symbols))  # –°–∏–º–≤–æ–ª—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
        other_symbols = [s for s in all_available_symbols if s not in priority_symbols]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å–∏–º–≤–æ–ª—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        final_symbols = priority_symbols + other_symbols
        
        self.logger.info(f"–ë—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è {len(final_symbols)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        return final_symbols  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    
    def _analyze_symbol(self, symbol: str, session_id: str) -> Optional[dict]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            start_time = time.time()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            klines = self.bybit_client.get_kline(
                symbol=symbol,
                interval='1h',
                limit=200
            )
            
            if not klines:
                return None
            
            # ML –∞–Ω–∞–ª–∏–∑
            analysis = self.ml_strategy.analyze_market(symbol, klines)
            
            exec_time = (time.time() - start_time) * 1000
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            if analysis:
                analysis_data = {
                    'symbol': symbol,
                    'timeframe': '1h',
                    'current_price': klines[-1].get('close') if klines else 0,
                    'features': analysis.get('features', []),
                    'indicators': analysis.get('indicators', {}),
                    'regime': analysis.get('regime', {}),
                    'prediction': analysis.get('prediction', {}),
                    'signal': analysis.get('signal'),
                    'confidence': analysis.get('confidence'),
                    'execution_time_ms': exec_time
                }
                
                self.db_manager.log_analysis(analysis_data)
            
            return analysis
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            return None
    
    def _check_daily_limits(self, analysis: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            balance_response = self.bybit_client.get_wallet_balance()
            if not balance_response or not balance_response.get('list'):
                return False
            
            balance_data = balance_response['list'][0]
            available_balance = float(balance_data.get('totalAvailableBalance', 0))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ 20% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤ –¥–µ–Ω—å
            daily_limit = available_balance * 0.2
            
            if self.daily_volume >= daily_limit:
                # self.db_manager.log_entry({
                #     'level': 'WARNING',
                #     'logger_name': 'TRADING_LIMITS',
                #     'message': f'Daily trading limit reached: volume {self.daily_volume:.2f}, limit {daily_limit:.2f}',
                #     'session_id': getattr(self, 'current_session_id', None)
                # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = analysis.get('confidence', 0)
            if confidence < 0.65:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
            return False
    
    def _execute_trade(self, symbol: str, analysis: dict, session_id: str) -> Optional[dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            start_time = time.time()
            
            signal = analysis.get('signal')
            confidence = analysis.get('confidence', 0)
            
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            balance = self.bybit_client.get_wallet_balance()
            if not balance:
                return None
            
            available_balance = float(balance.get('availableBalance', 0))
            
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (1-3% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
            position_percentage = 0.01 + (confidence - 0.65) * 0.02  # 1-3%
            position_size = available_balance * position_percentage
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            if position_size < 10:
                return None
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            side = 'Buy' if signal == 'BUY' else 'Sell'
            
            order_result = self.bybit_client.place_order(
                symbol=symbol,
                side=side,
                order_type='Market',
                qty=str(position_size)
            )
            
            exec_time = (time.time() - start_time) * 1000
            
            if order_result:
                trade_info = {
                    'timestamp': datetime.now().isoformat(),
                    'symbol': symbol,
                    'side': side,
                    'order_type': 'Market',
                    'size': position_size,
                    'analysis': analysis,
                    'order_result': order_result,
                    'execution_time_ms': exec_time,
                    'status': 'Executed'
                }
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                # self.db_manager.log_trade(trade_info)
                
                self.log_message.emit(
                    f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è: {symbol} {side} ${position_size:.2f} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})"
                )
                
                return trade_info
            else:
                pass
                # self.db_manager.log_entry({
                #     'level': 'WARNING',
                #     'logger_name': 'TRADING_ORDER',
                #     'message': f'Order failed: {symbol} {side}',
                #     'session_id': session_id
                # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ {symbol}: {e}"
            self.logger.error(error_msg)
            
            # self.db_manager.log_entry({
            #     'level': 'ERROR',
            #     'logger_name': 'TRADING_EXECUTION',
            #     'message': error_msg,
            #     'exception': e,
            #     'session_id': getattr(self, 'current_session_id', None)
            # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            return None
    
    def enable_trading(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self._mutex.lock()
        try:
            self.trading_enabled = enabled
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            self.log_message.emit(f"üîÑ –¢–æ—Ä–≥–æ–≤–ª—è {status}")
            
            if self.db_manager:
                pass
                # self.db_manager.log_entry({
                #     'level': 'INFO',
                #     'logger_name': 'TRADING_CONTROL',
                #     'message': f'Trading toggled: {status}',
                #     'session_id': getattr(self, 'current_session_id', None)
                # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        finally:
            self._mutex.unlock()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        self._mutex.lock()
        try:
            self.running = False
            self.trading_enabled = False
            
            if self.db_manager:
                pass
                # self.db_manager.log_entry({
                #     'level': 'INFO',
                #     'logger_name': 'TRADING_WORKER',
                #     'message': 'Trading worker stop requested',
                #     'session_id': getattr(self, 'current_session_id', None)
                # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        finally:
            self._mutex.unlock()


class TradingBotMainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        super().__init__()
        
        print("üîÑ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        try:
            import config
            credentials = config.get_api_credentials()
            self.api_key = credentials['api_key']
            self.api_secret = credentials['api_secret']
            self.testnet = credentials['testnet']
            print("‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_errors = config.validate_config()
            if config_errors:
                error_msg = "\n".join(config_errors)
                QMessageBox.critical(
                    None, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
                    f"–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n{error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª config.py"
                )
                sys.exit(1)
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
                
        except ImportError:
            QMessageBox.critical(
                None, "–û—à–∏–±–∫–∞", 
                "–§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
            )
            sys.exit(1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.trading_worker = None
        self.db_manager = None
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.current_balance = {}
        self.current_positions = []
        self.trade_history = []
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI...")
        self.init_ui()
        print("‚úÖ UI —Å–æ–∑–¥–∞–Ω")
        
        print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π...")
        self.setup_styles()
        print("‚úÖ –°—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        print("üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
        self.start_trading_worker()
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç Bybit - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¢–æ—Ä–≥–æ–≤–ª—è")
        self.setMinimumSize(1200, 800)
        self.resize(1400, 900)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.create_header(main_layout)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≤–∏–¥–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_main_content(main_layout)
        
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.create_status_bar()
    
    def create_header(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_frame = QFrame()
        header_frame.setFrameStyle(QFrame.StyledPanel)
        header_frame.setMaximumHeight(80)
        
        header_layout = QHBoxLayout(header_frame)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_label = QLabel("ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç Bybit")
        title_font = QFont()
        title_font.setPointSize(18)
        title_font.setBold(True)
        title_label.setFont(title_font)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = QLabel("üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ")
        self.connection_status.setStyleSheet(
            "QLabel { color: #e74c3c; font-weight: bold; font-size: 14px; }"
        )
        
        # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        self.trading_toggle_btn = QPushButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
        self.trading_toggle_btn.setMinimumSize(180, 40)
        self.trading_toggle_btn.clicked.connect(self.toggle_trading)
        self.trading_toggle_btn.setEnabled(False)
        
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        header_layout.addWidget(self.connection_status)
        header_layout.addWidget(self.trading_toggle_btn)
        
        parent_layout.addWidget(header_frame)
    
    def create_main_content(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ "–û–±–∑–æ—Ä"
        self.create_overview_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ–∑–∏—Ü–∏–∏"
        self.create_positions_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
        self.create_history_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–õ–æ–≥–∏"
        self.create_logs_tab()
        
        parent_layout.addWidget(self.tab_widget)
    
    def create_overview_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±–∑–æ—Ä–∞"""
        overview_widget = QWidget()
        layout = QVBoxLayout(overview_widget)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –±–∞–ª–∞–Ω—Å–æ–º
        balance_frame = QGroupBox("üí∞ –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞")
        balance_layout = QGridLayout(balance_frame)
        
        # –ú–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        self.total_balance_label = QLabel("$0.00")
        self.available_balance_label = QLabel("$0.00")
        self.unrealized_pnl_label = QLabel("$0.00")
        self.daily_pnl_label = QLabel("$0.00")
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞
        balance_style = "QLabel { font-size: 16px; font-weight: bold; padding: 5px; }"
        self.total_balance_label.setStyleSheet(balance_style + "color: #2c3e50;")
        self.available_balance_label.setStyleSheet(balance_style + "color: #27ae60;")
        self.unrealized_pnl_label.setStyleSheet(balance_style)
        self.daily_pnl_label.setStyleSheet(balance_style)
        
        balance_layout.addWidget(QLabel("–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:"), 0, 0)
        balance_layout.addWidget(self.total_balance_label, 0, 1)
        balance_layout.addWidget(QLabel("–î–æ—Å—Ç—É–ø–Ω–æ:"), 0, 2)
        balance_layout.addWidget(self.available_balance_label, 0, 3)
        balance_layout.addWidget(QLabel("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L:"), 1, 0)
        balance_layout.addWidget(self.unrealized_pnl_label, 1, 1)
        balance_layout.addWidget(QLabel("–î–Ω–µ–≤–Ω–æ–π P&L:"), 1, 2)
        balance_layout.addWidget(self.daily_pnl_label, 1, 3)
        
        layout.addWidget(balance_frame)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        stats_frame = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        stats_layout = QGridLayout(stats_frame)
        
        self.trades_count_label = QLabel("0")
        self.win_rate_label = QLabel("0%")
        self.daily_volume_label = QLabel("$0.00")
        self.daily_limit_label = QLabel("$0.00")
        
        stats_style = "QLabel { font-size: 14px; font-weight: bold; color: #34495e; }"
        self.trades_count_label.setStyleSheet(stats_style)
        self.win_rate_label.setStyleSheet(stats_style)
        self.daily_volume_label.setStyleSheet(stats_style)
        self.daily_limit_label.setStyleSheet(stats_style)
        
        stats_layout.addWidget(QLabel("–°–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è:"), 0, 0)
        stats_layout.addWidget(self.trades_count_label, 0, 1)
        stats_layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö:"), 0, 2)
        stats_layout.addWidget(self.win_rate_label, 0, 3)
        stats_layout.addWidget(QLabel("–î–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º:"), 1, 0)
        stats_layout.addWidget(self.daily_volume_label, 1, 1)
        stats_layout.addWidget(QLabel("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç:"), 1, 2)
        stats_layout.addWidget(self.daily_limit_label, 1, 3)
        
        layout.addWidget(stats_frame)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = QGroupBox("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        control_layout = QVBoxLayout(control_frame)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        main_buttons_layout = QHBoxLayout()
        
        self.emergency_stop_btn = QPushButton("üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
        self.emergency_stop_btn.setStyleSheet(
            "QPushButton { background-color: #e74c3c; color: white; font-weight: bold; padding: 10px; }"
        )
        self.emergency_stop_btn.clicked.connect(self.emergency_stop)
        
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.refresh_btn.clicked.connect(self.refresh_data)
        
        main_buttons_layout.addWidget(self.emergency_stop_btn)
        main_buttons_layout.addWidget(self.refresh_btn)
        main_buttons_layout.addStretch()
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∫–Ω–æ–ø–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trade_buttons_layout = QHBoxLayout()
        
        self.buy_cheapest_btn = QPushButton("üí∞ –ö—É–ø–∏—Ç—å —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤ (1 —à—Ç)")
        self.buy_cheapest_btn.setStyleSheet(
            "QPushButton { background-color: #27ae60; color: white; font-weight: bold; padding: 8px; }"
        )
        self.buy_cheapest_btn.clicked.connect(self.buy_cheapest_asset)
        
        self.sell_cheapest_btn = QPushButton("üí∏ –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤ (1 —à—Ç)")
        self.sell_cheapest_btn.setStyleSheet(
            "QPushButton { background-color: #f39c12; color: white; font-weight: bold; padding: 8px; }"
        )
        self.sell_cheapest_btn.clicked.connect(self.sell_cheapest_asset)
        
        trade_buttons_layout.addWidget(self.buy_cheapest_btn)
        trade_buttons_layout.addWidget(self.sell_cheapest_btn)
        trade_buttons_layout.addStretch()
        
        control_layout.addLayout(main_buttons_layout)
        control_layout.addLayout(trade_buttons_layout)
        
        layout.addWidget(control_frame)
        
        # –ü–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–æ–≤
        assets_frame = QGroupBox("üíé –ê–∫—Ç–∏–≤—ã")
        assets_layout = QVBoxLayout(assets_frame)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–æ–≤
        self.assets_table = QTableWidget()
        self.assets_table.setColumnCount(4)
        self.assets_table.setHorizontalHeaderLabels([
            "–ê–∫—Ç–∏–≤", "–ë–∞–ª–∞–Ω—Å", "USD –°—Ç–æ–∏–º–æ—Å—Ç—å", "–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–æ–≤
        assets_header = self.assets_table.horizontalHeader()
        assets_header.setStretchLastSection(True)
        for i in range(3):
            assets_header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
        
        self.assets_table.setAlternatingRowColors(True)
        self.assets_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.assets_table.setMaximumHeight(200)
        
        assets_layout.addWidget(self.assets_table)
        layout.addWidget(assets_frame)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
        layout.addStretch()
        
        self.tab_widget.addTab(overview_widget, "üìà –û–±–∑–æ—Ä")
    
    def create_positions_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–π"""
        positions_widget = QWidget()
        layout = QVBoxLayout(positions_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        header_label.setStyleSheet("QLabel { font-size: 16px; font-weight: bold; margin: 10px; }")
        layout.addWidget(header_label)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        self.positions_table = QTableWidget()
        self.positions_table.setColumnCount(6)
        self.positions_table.setHorizontalHeaderLabels([
            "–°–∏–º–≤–æ–ª", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—Ç–æ—Ä–æ–Ω–∞", "–†–∞–∑–º–µ—Ä", "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", "P&L"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.positions_table.horizontalHeader()
        header.setStretchLastSection(True)
        for i in range(5):
            header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
        
        self.positions_table.setAlternatingRowColors(True)
        self.positions_table.setSelectionBehavior(QTableWidget.SelectRows)
        
        layout.addWidget(self.positions_table)
        
        self.tab_widget.addTab(positions_widget, "üìä –ü–æ–∑–∏—Ü–∏–∏")
    
    def create_history_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        history_widget = QWidget()
        layout = QVBoxLayout(history_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        header_label.setStyleSheet("QLabel { font-size: 16px; font-weight: bold; margin: 10px; }")
        layout.addWidget(header_label)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(7)
        self.history_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–°–∏–º–≤–æ–ª", "–°—Ç–æ—Ä–æ–Ω–∞", "–†–∞–∑–º–µ—Ä", "–¶–µ–Ω–∞", "P&L", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.history_table.horizontalHeader()
        header.setStretchLastSection(True)
        for i in range(6):
            header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
        
        self.history_table.setAlternatingRowColors(True)
        self.history_table.setSelectionBehavior(QTableWidget.SelectRows)
        
        layout.addWidget(self.history_table)
        
        self.tab_widget.addTab(history_widget, "üìã –ò—Å—Ç–æ—Ä–∏—è")
    
    def create_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        logs_widget = QWidget()
        layout = QVBoxLayout(logs_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
        header_label.setStyleSheet("QLabel { font-size: 16px; font-weight: bold; margin: 10px; }")
        layout.addWidget(header_label)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_text = QTextEdit()
        self.logs_text.setReadOnly(True)
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        
        # –°—Ç–∏–ª—å –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_text.setStyleSheet("""
            QTextEdit {
                background-color: #2c3e50;
                color: #ecf0f1;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 12px;
                border: 1px solid #34495e;
            }
        """)
        
        layout.addWidget(self.logs_text)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        logs_control_layout = QHBoxLayout()
        
        clear_logs_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        clear_logs_btn.clicked.connect(self.clear_logs)
        
        export_logs_btn = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤")
        export_logs_btn.clicked.connect(self.export_logs)
        
        logs_control_layout.addWidget(clear_logs_btn)
        logs_control_layout.addWidget(export_logs_btn)
        logs_control_layout.addStretch()
        
        layout.addLayout(logs_control_layout)
        
        self.tab_widget.addTab(logs_widget, "üìù –õ–æ–≥–∏")
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_bar.addWidget(self.status_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.last_update_label = QLabel("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–∏–∫–æ–≥–¥–∞")
        self.status_bar.addPermanentWidget(self.last_update_label)
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #ecf0f1;
                color: #2c3e50;
            }
            
            QTabWidget::pane {
                border: 1px solid #bdc3c7;
                background-color: white;
                color: #2c3e50;
            }
            
            QTabBar::tab {
                background-color: #bdc3c7;
                color: #2c3e50;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            
            QTabBar::tab:selected {
                background-color: white;
                color: #2c3e50;
                border-bottom: 2px solid #3498db;
            }
            
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
                color: #2c3e50;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #2c3e50;
            }
            
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            
            QPushButton:hover {
                background-color: #2980b9;
            }
            
            QPushButton:pressed {
                background-color: #21618c;
            }
            
            QPushButton:disabled {
                background-color: #95a5a6;
                color: #7f8c8d;
            }
            
            QTableWidget {
                gridline-color: #bdc3c7;
                background-color: white;
                color: #2c3e50;
                alternate-background-color: #f8f9fa;
            }
            
            QHeaderView::section {
                background-color: #34495e;
                color: white;
                padding: 8px;
            }
            
            QLabel {
                color: #2c3e50;
            }
            
            QLineEdit {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                padding: 6px;
            }
            
            QTextEdit {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
            }
            
            QComboBox {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                padding: 6px;
            }
            
            QSpinBox, QDoubleSpinBox {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                padding: 6px;
            }
            
            QCheckBox {
                color: #2c3e50;
            }
            
            QRadioButton {
                color: #2c3e50;
            }
            
            QListWidget {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
            }
            
            QTreeWidget {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
            }
                border: none;
                font-weight: bold;
            }
        """)
    
    def start_trading_worker(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
            self.trading_worker = TradingWorker(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet
            )
            print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
            self.trading_worker.balance_updated.connect(self.update_balance)
            self.trading_worker.positions_updated.connect(self.update_positions)
            self.trading_worker.trade_executed.connect(self.add_trade_to_history)
            self.trading_worker.log_message.connect(self.add_log_message)
            self.trading_worker.error_occurred.connect(self.handle_error)
            self.trading_worker.status_updated.connect(self.update_connection_status)
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
            print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
            self.trading_worker.start()
            print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
            
            self.add_log_message("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞: {e}"
            print(f"‚ùå {error_msg}")
            print(f"Traceback: {traceback.format_exc()}")
            self.handle_error(error_msg)
    
    def update_balance(self, balance_info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
        try:
            self.current_balance = balance_info
            
            total_balance = float(balance_info.get('totalWalletBalance', 0))
            available_balance = float(balance_info.get('totalAvailableBalance', 0))
            unrealized_pnl = float(balance_info.get('totalPerpUPL', 0))
            
            self.total_balance_label.setText(f"${total_balance:.2f}")
            self.available_balance_label.setText(f"${available_balance:.2f}")
            self.unrealized_pnl_label.setText(f"${unrealized_pnl:.2f}")
            
            # –¶–≤–µ—Ç –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ P&L
            if unrealized_pnl > 0:
                self.unrealized_pnl_label.setStyleSheet(
                    "QLabel { font-size: 16px; font-weight: bold; padding: 5px; color: #27ae60; }"
                )
            elif unrealized_pnl < 0:
                self.unrealized_pnl_label.setStyleSheet(
                    "QLabel { font-size: 16px; font-weight: bold; padding: 5px; color: #e74c3c; }"
                )
            else:
                self.unrealized_pnl_label.setStyleSheet(
                    "QLabel { font-size: 16px; font-weight: bold; padding: 5px; color: #34495e; }"
                )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            daily_limit = available_balance * 0.2
            self.daily_limit_label.setText(f"${daily_limit:.2f}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.last_update_label.setText(
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤
            self.update_assets_display(balance_info.get('coins', []))
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    def update_assets_display(self, coins: list):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤"""
        try:
            if not coins:
                self.assets_table.setRowCount(0)
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            active_coins = [coin for coin in coins if float(coin.get('walletBalance', 0)) > 0]
            
            self.assets_table.setRowCount(len(active_coins))
            
            for i, coin in enumerate(active_coins):
                coin_name = coin.get('coin', '')
                wallet_balance = float(coin.get('walletBalance', 0))
                usd_value = float(coin.get('usdValue', 0))
                available_to_withdraw = coin.get('availableToWithdraw', 'N/A')
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                self.assets_table.setItem(i, 0, QTableWidgetItem(coin_name))
                self.assets_table.setItem(i, 1, QTableWidgetItem(f"{wallet_balance:.8f}"))
                self.assets_table.setItem(i, 2, QTableWidgetItem(f"${usd_value:.2f}"))
                self.assets_table.setItem(i, 3, QTableWidgetItem(str(available_to_withdraw)))
            
            self.add_log_message(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–æ–≤: {len(active_coins)}")
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤: {e}")
    
    def update_positions(self, positions: List[dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π"""
        try:
            self.current_positions = positions
            
            self.positions_table.setRowCount(len(positions))
            
            for row, position in enumerate(positions):
                symbol = position.get('symbol', '')
                category = position.get('category', 'Unknown').upper()
                side = position.get('side', '')
                size = float(position.get('size', 0))
                entry_price = float(position.get('avgPrice', 0))
                unrealized_pnl = float(position.get('unrealisedPnl', 0))
                
                self.positions_table.setItem(row, 0, QTableWidgetItem(symbol))
                self.positions_table.setItem(row, 1, QTableWidgetItem(category))
                self.positions_table.setItem(row, 2, QTableWidgetItem(side))
                self.positions_table.setItem(row, 3, QTableWidgetItem(f"{size:.8f}"))
                self.positions_table.setItem(row, 4, QTableWidgetItem(f"${entry_price:.6f}"))
                
                # P&L —Å —Ü–≤–µ—Ç–æ–º
                pnl_item = QTableWidgetItem(f"${unrealized_pnl:.2f}")
                if unrealized_pnl > 0:
                    pnl_item.setForeground(QColor("#27ae60"))
                elif unrealized_pnl < 0:
                    pnl_item.setForeground(QColor("#e74c3c"))
                
                self.positions_table.setItem(row, 5, pnl_item)
            
            self.add_log_message(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    def add_trade_to_history(self, trade_info: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            self.trade_history.append(trade_info)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏
            row_count = self.history_table.rowCount()
            self.history_table.insertRow(0)  # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
            
            timestamp = trade_info.get('timestamp', '')
            if timestamp:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime('%H:%M:%S')
            else:
                time_str = datetime.now().strftime('%H:%M:%S')
            
            symbol = trade_info.get('symbol', '')
            side = trade_info.get('side', '')
            size = float(trade_info.get('size', 0))
            price = trade_info.get('price', 'Market')
            pnl = trade_info.get('pnl', 'N/A')
            
            analysis = trade_info.get('analysis', {})
            confidence = analysis.get('confidence', 0) if analysis else 0
            
            self.history_table.setItem(0, 0, QTableWidgetItem(time_str))
            self.history_table.setItem(0, 1, QTableWidgetItem(symbol))
            
            # –°—Ç–æ—Ä–æ–Ω–∞ —Å —Ü–≤–µ—Ç–æ–º
            side_item = QTableWidgetItem(side)
            if side == 'Buy':
                side_item.setForeground(QColor("#27ae60"))
            else:
                side_item.setForeground(QColor("#e74c3c"))
            self.history_table.setItem(0, 2, side_item)
            
            self.history_table.setItem(0, 3, QTableWidgetItem(f"{size:.4f}"))
            self.history_table.setItem(0, 4, QTableWidgetItem(str(price)))
            self.history_table.setItem(0, 5, QTableWidgetItem(str(pnl)))
            self.history_table.setItem(0, 6, QTableWidgetItem(f"{confidence:.1%}"))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            if self.history_table.rowCount() > 100:
                self.history_table.removeRow(100)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.update_trading_stats()
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
    
    def update_trading_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            today = datetime.now().date()
            today_trades = [
                trade for trade in self.trade_history
                if datetime.fromisoformat(trade.get('timestamp', '')).date() == today
            ]
            
            trades_count = len(today_trades)
            self.trades_count_label.setText(str(trades_count))
            
            if trades_count > 0:
                # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                profitable_trades = sum(1 for trade in today_trades if trade.get('side') == 'Buy')
                win_rate = (profitable_trades / trades_count) * 100
                self.win_rate_label.setText(f"{win_rate:.1f}%")
                
                # –î–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º
                daily_volume = sum(float(trade.get('size', 0)) for trade in today_trades)
                self.daily_volume_label.setText(f"${daily_volume:.2f}")
            else:
                self.win_rate_label.setText("0%")
                self.daily_volume_label.setText("$0.00")
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def add_log_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        formatted_message = f"[{timestamp}] {message}"
        
        self.logs_text.append(formatted_message)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        cursor = self.logs_text.textCursor()
        cursor.movePosition(QTextCursor.End)
        self.logs_text.setTextCursor(cursor)
    
    def handle_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.add_log_message(f"‚ùå –û–®–ò–ë–ö–ê: {error_message}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –¥–∏–∞–ª–æ–≥–µ
        if "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è" in error_message:
            QMessageBox.critical(self, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_message)
    
    def update_connection_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if status == "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ":
            self.connection_status.setText("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
            self.connection_status.setStyleSheet(
                "QLabel { color: #27ae60; font-weight: bold; font-size: 14px; }"
            )
            self.trading_toggle_btn.setEnabled(True)
        elif status == "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...":
            self.connection_status.setText("üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            self.connection_status.setStyleSheet(
                "QLabel { color: #f39c12; font-weight: bold; font-size: 14px; }"
            )
        else:
            self.connection_status.setText("üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ")
            self.connection_status.setStyleSheet(
                "QLabel { color: #e74c3c; font-weight: bold; font-size: 14px; }"
            )
            self.trading_toggle_btn.setEnabled(False)
        
        self.status_label.setText(f"–°—Ç–∞—Ç—É—Å: {status}")
    
    def toggle_trading(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.trading_worker:
            current_state = self.trading_worker.trading_enabled
            new_state = not current_state
            
            self.trading_worker.enable_trading(new_state)
            
            if new_state:
                self.trading_toggle_btn.setText("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
                self.trading_toggle_btn.setStyleSheet(
                    "QPushButton { background-color: #e74c3c; color: white; font-weight: bold; padding: 10px; }"
                )
                self.add_log_message("üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞")
            else:
                self.trading_toggle_btn.setText("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
                self.trading_toggle_btn.setStyleSheet(
                    "QPushButton { background-color: #27ae60; color: white; font-weight: bold; padding: 10px; }"
                )
                self.add_log_message("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞")
    
    def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        reply = QMessageBox.question(
            self, "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            if self.trading_worker:
                self.trading_worker.stop()
            
            self.add_log_message("üõë –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            self.trading_toggle_btn.setText("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
            self.trading_toggle_btn.setStyleSheet(
                "QPushButton { background-color: #27ae60; color: white; font-weight: bold; padding: 10px; }"
            )
            self.update_connection_status("–û—Ç–∫–ª—é—á–µ–Ω–æ")
    
    def refresh_data(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.add_log_message("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        # –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs_text.clear()
        self.add_log_message("üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def export_logs(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"trading_logs_{timestamp}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.logs_text.toPlainText())
            
            self.add_log_message(f"üíæ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: {e}")
    
    def get_cheapest_asset(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"""
        try:
            if not self.bybit_client:
                return None, None
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            symbols = self._get_all_available_symbols()
            
            if not symbols:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞")
                return None, None
            
            cheapest_symbol = None
            cheapest_price = float('inf')
            processed_count = 0
            
            self.logger.info(f"–ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å—Ä–µ–¥–∏ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            symbols_to_check = symbols[:100] if len(symbols) > 100 else symbols
            
            for symbol in symbols_to_check:
                try:
                    ticker = self.bybit_client.get_tickers(symbol)
                    if ticker and 'list' in ticker and ticker['list']:
                        price = float(ticker['list'][0].get('lastPrice', 0))
                        if 0 < price < cheapest_price:
                            cheapest_price = price
                            cheapest_symbol = symbol
                        processed_count += 1
                except Exception as e:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
                    continue
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–π–¥–µ–Ω —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π: {cheapest_symbol} –ø–æ —Ü–µ–Ω–µ {cheapest_price}")
            return cheapest_symbol, cheapest_price
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞: {e}")
            return None, None
    
    def buy_cheapest_asset(self):
        """–ü–æ–∫—É–ø–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤
            symbol, price = self.get_cheapest_asset()
            
            if not symbol or not price:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                return
            
            # –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏",
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–∞ {symbol}?\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${price:.6f}\n"
                f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${price:.6f}\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
                order_result = self.bybit_client.place_order(
                    symbol=symbol,
                    side='Buy',
                    order_type='Market',
                    qty='1'
                )
                
                if order_result:
                    self.add_log_message(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {symbol} –∑–∞ ${price:.6f}")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü–æ–∫—É–ø–∫–∞ {symbol} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                else:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {symbol}")
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫—Ç–∏–≤–∞: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)
    
    def sell_cheapest_asset(self):
        """–ü—Ä–æ–¥–∞–∂–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤
            symbol, price = self.get_cheapest_asset()
            
            if not symbol or not price:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            positions = self.bybit_client.get_positions()
            has_position = False
            
            if positions:
                for pos in positions:
                    if pos.get('symbol') == symbol and float(pos.get('size', 0)) >= 1:
                        has_position = True
                        break
            
            if not has_position:
                QMessageBox.warning(
                    self, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–æ–≤", 
                    f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ {symbol} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
                )
                return
            
            # –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏",
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–∞ {symbol}?\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${price:.6f}\n"
                f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: ~${price:.6f}\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É
                order_result = self.bybit_client.place_order(
                    symbol=symbol,
                    side='Sell',
                    order_type='Market',
                    qty='1'
                )
                
                if order_result:
                    self.add_log_message(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {symbol} –∑–∞ ${price:.6f}")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü—Ä–æ–¥–∞–∂–∞ {symbol} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                else:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {symbol}")
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∞–∫—Ç–∏–≤–∞: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        reply = QMessageBox.question(
            self, "–í—ã—Ö–æ–¥",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            if self.trading_worker:
                self.trading_worker.stop()
                self.trading_worker.wait(5000)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
            
            event.accept()
        else:
            event.ignore()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setApplicationName("–¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç Bybit")
    app.setApplicationVersion("1.0.0")
    app.setOrganizationName("Trading Bot")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    window = TradingBotMainWindow()
    window.show()
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sys.exit(app.exec())


if __name__ == "__main__":
    main()