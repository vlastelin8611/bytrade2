#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API
–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import sys
import os
import logging
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('api_test.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    logger.info("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        import config
        
        credentials = config.get_api_credentials()
        logger.info(f"üîë API Key: {credentials['api_key'][:10]}...")
        logger.info(f"üîê API Secret: {'*' * len(credentials['api_secret'])}")
        logger.info(f"üåê Testnet: {credentials['testnet']}")
        
        # –ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ API
        logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit –∫–ª–∏–µ–Ω—Ç–∞...")
        from api.bybit_client import BybitClient
        
        client = BybitClient(
            api_key=credentials['api_key'],
            api_secret=credentials['api_secret'],
            testnet=credentials['testnet']
        )
        
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        connection_test = client.test_connection()
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_test}")
        
        if not connection_test:
            logger.error("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª!")
            return False
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        logger.info("‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        server_time = client.get_server_time()
        logger.info(f"üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        logger.info("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞...")
        balance_info = client.get_wallet_balance(account_type="UNIFIED")
        
        logger.info("üìà –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ü–†–û–°–ê –ë–ê–õ–ê–ù–°–ê:")
        logger.info(f"Raw response: {json.dumps(balance_info, indent=2, ensure_ascii=False)}")
        
        if balance_info:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞
            total_balance = balance_info.get('totalWalletBalance', 0)
            available_balance = balance_info.get('availableBalance', 0)
            unrealized_pnl = balance_info.get('totalUnrealizedPnl', 0)
            
            logger.info("üíµ –î–ï–¢–ê–õ–ò –ë–ê–õ–ê–ù–°–ê:")
            logger.info(f"   üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${float(total_balance):.6f}")
            logger.info(f"   üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${float(available_balance):.6f}")
            logger.info(f"   üìä –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${float(unrealized_pnl):.6f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–æ–≤
            coin_list = balance_info.get('coin', [])
            if coin_list:
                logger.info(f"ü™ô –ê–ö–¢–ò–í–´ –í –ö–û–®–ï–õ–¨–ö–ï ({len(coin_list)} —à—Ç.):")
                for coin in coin_list:
                    coin_name = coin.get('coin', 'Unknown')
                    wallet_balance = float(coin.get('walletBalance', 0))
                    available = float(coin.get('availableToWithdraw', 0))
                    
                    if wallet_balance > 0:
                        logger.info(f"   üíé {coin_name}: {wallet_balance:.6f} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available:.6f})")
            else:
                logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞")
            return False
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        logger.info("üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
        positions = client.get_positions(category="linear")
        
        logger.info(f"üìã –ü–û–ó–ò–¶–ò–ò: –Ω–∞–π–¥–µ–Ω–æ {len(positions) if positions else 0} –ø–æ–∑–∏—Ü–∏–π")
        if positions:
            for pos in positions:
                symbol = pos.get('symbol', 'Unknown')
                size = float(pos.get('size', 0))
                side = pos.get('side', 'None')
                unrealized_pnl = float(pos.get('unrealisedPnl', 0))
                
                if size > 0:
                    logger.info(f"   üìà {symbol}: {side} {size} (P&L: ${unrealized_pnl:.6f})")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        logger.info("üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö...")
        instruments = client.get_instruments_info(category="linear")
        
        if instruments:
            logger.info(f"üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(instruments)}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            for i, instrument in enumerate(instruments[:5]):
                symbol = instrument.get('symbol', 'Unknown')
                status = instrument.get('status', 'Unknown')
                logger.info(f"   üîπ {symbol}: {status}")
        
        logger.info("=" * 60)
        logger.info("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        logger.info("=" * 60)
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logger.error(f"üìÑ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API...")
    print("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª api_test.log")
    print()
    
    success = test_api_connection()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª api_test.log –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")
        
    print("\nüìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: api_test.log")

if __name__ == "__main__":
    main()