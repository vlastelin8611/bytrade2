#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from api.bybit_client import BybitClient
from config import get_api_credentials
import json

def check_detailed_balance():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
    print("=== –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ===")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
    credentials = get_api_credentials()
    api_key = credentials['api_key']
    api_secret = credentials['api_secret']
    print(f"API Key: {api_key[:10]}...")
    print(f"Testnet: {credentials['testnet']}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = BybitClient(api_key, api_secret)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
        server_time = client.get_server_time()
        print(f"–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")
        
        # –¢–µ—Å—Ç 1: UNIFIED –±–∞–ª–∞–Ω—Å
        print("\nüí∞ 1. –ü–æ–ª—É—á–µ–Ω–∏–µ UNIFIED –±–∞–ª–∞–Ω—Å–∞:")
        unified_balance = client.get_wallet_balance("UNIFIED")
        print(f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {unified_balance.get('retCode', 'N/A')}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {unified_balance.get('retMsg', 'N/A')}")
        
        if unified_balance.get('retCode') == 0 and unified_balance.get('result'):
            result = unified_balance['result']
            if 'list' in result and result['list']:
                account = result['list'][0]
                print(f"   –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account.get('accountType', 'N/A')}")
                print(f"   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {account.get('totalEquity', '0')} USDT")
                print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {account.get('totalAvailableBalance', '0')} USDT")
                
                if 'coin' in account and account['coin']:
                    print("   –ú–æ–Ω–µ—Ç—ã:")
                    for coin_info in account['coin']:
                        balance = float(coin_info.get('walletBalance', '0'))
                        if balance > 0:
                            print(f"     {coin_info.get('coin', 'N/A')}: {balance}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {unified_balance}")
        
        # –¢–µ—Å—Ç 2: SPOT –±–∞–ª–∞–Ω—Å
        print("\nüí∞ 2. –ü–æ–ª—É—á–µ–Ω–∏–µ SPOT –±–∞–ª–∞–Ω—Å–∞:")
        spot_balance = client.get_wallet_balance("SPOT")
        print(f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {spot_balance.get('retCode', 'N/A')}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {spot_balance.get('retMsg', 'N/A')}")
        
        if spot_balance.get('retCode') == 0 and spot_balance.get('result'):
            result = spot_balance['result']
            if 'list' in result and result['list']:
                account = result['list'][0]
                print(f"   –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account.get('accountType', 'N/A')}")
                
                if 'coin' in account and account['coin']:
                    print("   –ú–æ–Ω–µ—Ç—ã:")
                    for coin_info in account['coin']:
                        balance = float(coin_info.get('walletBalance', '0'))
                        if balance > 0:
                            print(f"     {coin_info.get('coin', 'N/A')}: {balance}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {spot_balance}")
        
        # –¢–µ—Å—Ç 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        print("\nüìä 3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:")
        account_info = client.get_account_info()
        print(f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {account_info.get('retCode', 'N/A')}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {account_info.get('retMsg', 'N/A')}")
        
        if account_info.get('retCode') == 0 and account_info.get('result'):
            result = account_info['result']
            print(f"   –°—Ç–∞—Ç—É—Å –º–∞—Ä–∂–∏: {result.get('marginMode', 'N/A')}")
            print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result.get('updatedTime', 'N/A')}")
        
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_detailed_balance()