#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
–ü—Ä–æ—Å—Ç–æ–π GUI –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ç–∏–≤–æ–≤ —á–µ—Ä–µ–∑ Bybit API
"""

import sys
import os
import asyncio
import logging
import json
from datetime import datetime
from typing import Dict, List, Optional
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
    QWidget, QPushButton, QLabel, QTextEdit, QTableWidget, 
    QTableWidgetItem, QHeaderView, QGroupBox, QMessageBox,
    QProgressBar, QStatusBar
)
from PySide6.QtCore import QTimer, QThread, Signal, Qt
from PySide6.QtGui import QFont, QPalette, QColor

# –ò–º–ø–æ—Ä—Ç API –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
from api.bybit_client import BybitClient
from tools.ticker_data_loader import TickerDataLoader


class TradingWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    balance_updated = Signal(dict)
    positions_updated = Signal(list)
    trade_executed = Signal(dict)
    log_message = Signal(str)
    error_occurred = Signal(str)
    
    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        super().__init__()
        self.api_key = api_key
        self.api_secret = api_secret
        self.testnet = testnet
        self.running = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.bybit_client = None
        self.ticker_loader = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            self.running = True
            self.log_message.emit("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
            self.bybit_client = BybitClient(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
            self.ticker_loader = TickerDataLoader()
            
            self.log_message.emit("‚úÖ –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            while self.running:
                try:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                    self.update_balance()
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
                    self.update_positions()
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                    self.msleep(5000)  # 5 —Å–µ–∫—É–Ω–¥
                    
                except Exception as e:
                    self.error_occurred.emit(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
                    self.msleep(10000)  # 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            self.error_occurred.emit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    def update_balance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            balance_response = self.bybit_client.get_wallet_balance()
            
            if balance_response and balance_response.get('list'):
                balance_data = balance_response['list'][0]
                
                balance_info = {
                    'totalWalletBalance': balance_data.get('totalWalletBalance', '0'),
                    'totalAvailableBalance': balance_data.get('totalAvailableBalance', '0'),
                    'coins': balance_data.get('coin', [])
                }
                
                self.balance_updated.emit(balance_info)
                
        except Exception as e:
            self.error_occurred.emit(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
    
    def update_positions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            orders_response = self.bybit_client.get_open_orders(category='spot', limit=50)
            
            positions = []
            if orders_response and orders_response.get('list'):
                positions = orders_response['list']
            
            self.positions_updated.emit(positions)
            
        except Exception as e:
            self.error_occurred.emit(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {str(e)}")
    
    def buy_cheapest_ticker(self):
        """–ü–æ–∫—É–ø–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        try:
            self.log_message.emit("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
            tickers_data = self.ticker_loader.load_tickers_data()
            
            if not tickers_data:
                self.error_occurred.emit("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–∫–µ—Ä–∞–º")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–∏–∫–µ—Ä
            cheapest_symbol = None
            cheapest_price = float('inf')
            
            for symbol, data in tickers_data.items():
                if symbol.endswith('USDT'):
                    try:
                        price = float(data.get('lastPrice', 0))
                        if 0 < price < cheapest_price:
                            cheapest_price = price
                            cheapest_symbol = symbol
                    except (ValueError, TypeError):
                        continue
            
            if not cheapest_symbol:
                self.error_occurred.emit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–∫–µ—Ä")
                return
            
            self.log_message.emit(f"üí∞ –ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–∏–∫–µ—Ä: {cheapest_symbol} (${cheapest_price:.6f})")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
            order_result = self.bybit_client.place_order(
                category='spot',
                symbol=cheapest_symbol,
                side='Buy',
                order_type='Market',
                qty='10'  # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ $10
            )
            
            if order_result:
                self.log_message.emit(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {cheapest_symbol} —Ä–∞–∑–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.trade_executed.emit({
                    'symbol': cheapest_symbol,
                    'side': 'Buy',
                    'qty': '10',
                    'price': cheapest_price,
                    'timestamp': datetime.now().isoformat()
                })
            else:
                self.error_occurred.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É")
                
        except Exception as e:
            self.error_occurred.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {str(e)}")
    
    def sell_cheapest_position(self):
        """–ü—Ä–æ–¥–∞–∂–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            self.log_message.emit("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance_response = self.bybit_client.get_wallet_balance()
            
            if not balance_response or not balance_response.get('list'):
                self.error_occurred.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞")
                return
            
            coins = balance_response['list'][0].get('coin', [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            tradeable_coins = []
            for coin in coins:
                coin_name = coin.get('coin', '')
                wallet_balance = float(coin.get('walletBalance', 0))
                usd_value = float(coin.get('usdValue', 0))
                
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –º–æ–Ω–µ—Ç—ã —Å –º–∞–ª—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                if (coin_name not in ['USDT', 'USDC', 'BUSD', 'DAI'] and 
                    wallet_balance > 0 and usd_value > 0.1):
                    tradeable_coins.append({
                        'coin': coin_name,
                        'balance': wallet_balance,
                        'usd_value': usd_value
                    })
            
            if not tradeable_coins:
                self.error_occurred.emit("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤
            cheapest_coin = min(tradeable_coins, key=lambda c: c['usd_value'])
            symbol = cheapest_coin['coin'] + 'USDT'
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
            sell_qty = max(cheapest_coin['balance'] * 0.1, 0.001)
            
            self.log_message.emit(f"üí∏ –ü—Ä–æ–¥–∞–∂–∞ {sell_qty:.6f} {cheapest_coin['coin']} (${cheapest_coin['usd_value']:.2f})")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            order_result = self.bybit_client.place_order(
                category='spot',
                symbol=symbol,
                side='Sell',
                order_type='Market',
                qty=str(sell_qty)
            )
            
            if order_result:
                self.log_message.emit(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol} —Ä–∞–∑–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.trade_executed.emit({
                    'symbol': symbol,
                    'side': 'Sell',
                    'qty': str(sell_qty),
                    'usd_value': cheapest_coin['usd_value'],
                    'timestamp': datetime.now().isoformat()
                })
            else:
                self.error_occurred.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É")
                
        except Exception as e:
            self.error_occurred.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {str(e)}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        self.running = False
        self.quit()
        self.wait()


class TestTradingApp(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        self.setGeometry(100, 100, 1000, 700)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π
        self.api_key, self.api_secret = self.load_api_keys()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞
        self.trading_worker = None
        
        # –î–∞–Ω–Ω—ã–µ
        self.current_balance = {}
        self.current_positions = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.init_ui()
        
        # –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞
        self.start_trading_worker()
    
    def load_api_keys(self) -> tuple:
        """–ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            keys_file = Path(__file__).parent / 'keys'
            if keys_file.exists():
                with open(keys_file, 'r') as f:
                    lines = f.read().strip().split('\n')
                    if len(lines) >= 2:
                        return lines[0].strip(), lines[1].strip()
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–ª—é—á–∏
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return "", ""
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π: {str(e)}")
            return "", ""
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üöÄ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        title_label.setFont(QFont("Arial", 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_layout = QHBoxLayout()
        main_layout.addLayout(content_layout)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –±–∞–ª–∞–Ω—Å –∏ –ø–æ–∑–∏—Ü–∏–∏
        left_panel = self.create_left_panel()
        content_layout.addWidget(left_panel, 2)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–Ω–æ–ø–∫–∏ –∏ –ª–æ–≥–∏
        right_panel = self.create_right_panel()
        content_layout.addWidget(right_panel, 1)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def create_left_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        
        # –ì—Ä—É–ø–ø–∞ –±–∞–ª–∞–Ω—Å–∞
        balance_group = QGroupBox("üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        balance_layout = QVBoxLayout(balance_group)
        
        self.balance_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.balance_label.setFont(QFont("Arial", 12))
        balance_layout.addWidget(self.balance_label)
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–æ–Ω–µ—Ç
        self.coins_table = QTableWidget()
        self.coins_table.setColumnCount(3)
        self.coins_table.setHorizontalHeaderLabels(["–ú–æ–Ω–µ—Ç–∞", "–ë–∞–ª–∞–Ω—Å", "USD —Å—Ç–æ–∏–º–æ—Å—Ç—å"])
        self.coins_table.horizontalHeader().setStretchLastSection(True)
        balance_layout.addWidget(self.coins_table)
        
        layout.addWidget(balance_group)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–∑–∏—Ü–∏–π
        positions_group = QGroupBox("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞")
        positions_layout = QVBoxLayout(positions_group)
        
        self.positions_table = QTableWidget()
        self.positions_table.setColumnCount(4)
        self.positions_table.setHorizontalHeaderLabels(["–°–∏–º–≤–æ–ª", "–°—Ç–æ—Ä–æ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞"])
        self.positions_table.horizontalHeader().setStretchLastSection(True)
        positions_layout.addWidget(self.positions_table)
        
        layout.addWidget(positions_group)
        
        return panel
    
    def create_right_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ª–æ–≥–∞–º–∏"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        
        # –ì—Ä—É–ø–ø–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        trading_group = QGroupBox("üéØ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        trading_layout = QVBoxLayout(trading_group)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
        self.buy_button = QPushButton("üí∞ –ö—É–ø–∏—Ç—å —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–∏–∫–µ—Ä")
        self.buy_button.setFont(QFont("Arial", 10, QFont.Bold))
        self.buy_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 12px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:pressed {
                background-color: #229954;
            }
        """)
        self.buy_button.clicked.connect(self.on_buy_clicked)
        trading_layout.addWidget(self.buy_button)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–∞–∂–∏
        self.sell_button = QPushButton("üí∏ –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤")
        self.sell_button.setFont(QFont("Arial", 10, QFont.Bold))
        self.sell_button.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 12px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:pressed {
                background-color: #a93226;
            }
        """)
        self.sell_button.clicked.connect(self.on_sell_clicked)
        trading_layout.addWidget(self.sell_button)
        
        layout.addWidget(trading_group)
        
        # –ì—Ä—É–ø–ø–∞ –ª–æ–≥–æ–≤
        logs_group = QGroupBox("üìù –õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")
        logs_layout = QVBoxLayout(logs_group)
        
        self.logs_text = QTextEdit()
        self.logs_text.setFont(QFont("Consolas", 9))
        self.logs_text.setReadOnly(True)
        self.logs_text.setMaximumHeight(300)
        logs_layout.addWidget(self.logs_text)
        
        layout.addWidget(logs_group)
        
        return panel
    
    def start_trading_worker(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        if not self.api_key or not self.api_secret:
            self.add_log("‚ùå API –∫–ª—é—á–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        self.trading_worker = TradingWorker(self.api_key, self.api_secret, testnet=True)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.trading_worker.balance_updated.connect(self.update_balance_display)
        self.trading_worker.positions_updated.connect(self.update_positions_display)
        self.trading_worker.trade_executed.connect(self.on_trade_executed)
        self.trading_worker.log_message.connect(self.add_log)
        self.trading_worker.error_occurred.connect(self.add_error_log)
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
        self.trading_worker.start()
        self.add_log("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def on_buy_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏"""
        if self.trading_worker:
            self.buy_button.setEnabled(False)
            self.add_log("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–∫—É–ø–∫–∏ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            QTimer.singleShot(100, self.execute_buy)
    
    def execute_buy(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏"""
        try:
            self.trading_worker.buy_cheapest_ticker()
        finally:
            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            QTimer.singleShot(3000, lambda: self.buy_button.setEnabled(True))
    
    def on_sell_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–∞–∂–∏"""
        if self.trading_worker:
            self.sell_button.setEnabled(False)
            self.add_log("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∂–∏ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–∞–∂—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            QTimer.singleShot(100, self.execute_sell)
    
    def execute_sell(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            self.trading_worker.sell_cheapest_position()
        finally:
            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            QTimer.singleShot(3000, lambda: self.sell_button.setEnabled(True))
    
    def update_balance_display(self, balance_info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        self.current_balance = balance_info
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        total_balance = balance_info.get('totalWalletBalance', '0')
        available_balance = balance_info.get('totalAvailableBalance', '0')
        
        self.balance_label.setText(
            f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${float(total_balance):.2f} | "
            f"–î–æ—Å—Ç—É–ø–Ω–æ: ${float(available_balance):.2f}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –º–æ–Ω–µ—Ç
        coins = balance_info.get('coins', [])
        self.coins_table.setRowCount(len(coins))
        
        for i, coin in enumerate(coins):
            coin_name = coin.get('coin', '')
            wallet_balance = coin.get('walletBalance', '0')
            usd_value = coin.get('usdValue', '0')
            
            self.coins_table.setItem(i, 0, QTableWidgetItem(coin_name))
            self.coins_table.setItem(i, 1, QTableWidgetItem(f"{float(wallet_balance):.6f}"))
            self.coins_table.setItem(i, 2, QTableWidgetItem(f"${float(usd_value):.2f}"))
    
    def update_positions_display(self, positions: list):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        self.current_positions = positions
        
        self.positions_table.setRowCount(len(positions))
        
        for i, position in enumerate(positions):
            symbol = position.get('symbol', '')
            side = position.get('side', '')
            qty = position.get('qty', '0')
            price = position.get('price', '0')
            
            self.positions_table.setItem(i, 0, QTableWidgetItem(symbol))
            self.positions_table.setItem(i, 1, QTableWidgetItem(side))
            self.positions_table.setItem(i, 2, QTableWidgetItem(qty))
            self.positions_table.setItem(i, 3, QTableWidgetItem(price))
    
    def on_trade_executed(self, trade_info: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        symbol = trade_info.get('symbol', '')
        side = trade_info.get('side', '')
        qty = trade_info.get('qty', '')
        
        self.add_log(f"‚úÖ –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {side} {qty} {symbol}")
        self.status_bar.showMessage(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {side} {symbol}", 10000)
    
    def add_log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        self.logs_text.append(log_entry)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        cursor = self.logs_text.textCursor()
        cursor.movePosition(cursor.End)
        self.logs_text.setTextCursor(cursor)
    
    def add_error_log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        self.add_log(f"‚ùå {message}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.trading_worker:
            self.trading_worker.stop()
        event.accept()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    window = TestTradingApp()
    window.show()
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sys.exit(app.exec())


if __name__ == "__main__":
    main()