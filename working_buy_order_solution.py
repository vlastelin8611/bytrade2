#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–ê–ë–û–ß–ï–ï –†–ï–®–ï–ù–ò–ï: –ü–æ–∫—É–ø–∫–∞ ETH –Ω–∞ Bybit Testnet
===============================================

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT.
–†–µ—à–µ–Ω–∏–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ.

–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 29.09.2025
–°—Ç–∞—Ç—É—Å: ‚úÖ –†–ê–ë–û–¢–ê–ï–¢
"""

import asyncio
from PySide6.QtCore import QTimer

class WorkingBuyOrderSolution:
    """
    –ö–ª–∞—Å—Å —Å —Ä–∞–±–æ—á–∏–º —Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH –Ω–∞ Bybit
    """
    
    def buy_eth_fixed_amount(self):
        """
        ‚úÖ –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î: –ü–æ–∫—É–ø–∫–∞ ETHUSDT –Ω–∞ —Å—É–º–º—É 10 USDT
        
        –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è:
        1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ marketUnit='quoteCoin' 
        2. qty —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ USDT (–≤–∞–ª—é—Ç–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏)
        3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QTimer
        4. –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        """
        try:
            self.add_log_message("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–∫—É–ø–∫—É ETHUSDT –Ω–∞ 10 USDT...")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            self.buy_lowest_btn.setEnabled(False)
            self.buy_lowest_btn.setText("‚è≥ –ü–æ–∫—É–ø–∫–∞...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            def execute_buy_async():
                try:
                    symbol = "ETHUSDT"
                    quote_order_qty = "10"  # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ 10 USDT
                    
                    self.add_log_message(f"üìä –ü–æ–∫—É–ø–∞–µ–º {symbol} –Ω–∞ {quote_order_qty} USDT")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
                    if not hasattr(self, 'trading_worker') or self.trading_worker is None:
                        self.add_log_message("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞
                    if not hasattr(self.trading_worker, 'bybit_client') or self.trading_worker.bybit_client is None:
                        self.add_log_message("‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        return
                    
                    # üîë –ö–õ–Æ–ß–ï–í–ê–Ø –ß–ê–°–¢–¨: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    try:
                        self.add_log_message(f"üí∞ –†–∞–∑–º–µ—â–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol} –Ω–∞ {quote_order_qty} USDT...")
                        
                        # ‚úÖ –†–ê–ë–û–ß–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:
                        order_result = self.trading_worker.bybit_client.place_order(
                            category='spot',                    # –°–ø–æ—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
                            symbol=symbol,                      # ETHUSDT
                            side='Buy',                         # –ü–æ–∫—É–ø–∫–∞
                            order_type='Market',                # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                            qty=quote_order_qty,                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ USDT (10)
                            marketUnit='quoteCoin'              # üîë –ö–õ–Æ–ß–ï–í–û–ô –ü–ê–†–ê–ú–ï–¢–†!
                        )
                        
                        self.add_log_message(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç API: {order_result}")
                        
                        if order_result:
                            self.add_log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol} –Ω–∞ {quote_order_qty} USDT")
                            
                            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ETH
                            try:
                                tickers = self.trading_worker.bybit_client.get_tickers(category="spot")
                                eth_price = 0
                                if tickers and isinstance(tickers, list):
                                    for ticker in tickers:
                                        if ticker.get('symbol') == symbol:
                                            eth_price = float(ticker.get('lastPrice', 0))
                                            break
                                if eth_price > 0:
                                    estimated_qty = float(quote_order_qty) / eth_price
                                    self.add_log_message(f"üìä –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ~{estimated_qty:.6f} ETH")
                            except Exception as price_error:
                                self.add_log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {price_error}")
                        else:
                            self.add_log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol}")
                            
                    except Exception as api_error:
                        self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ {symbol}: {str(api_error)}")
                        self.logger.error(f"API Error: {api_error}")
                    
                except Exception as e:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_lowest_ticker: {e}")
                finally:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    self.buy_lowest_btn.setEnabled(True)
                    self.buy_lowest_btn.setText("üí∞ –ö—É–ø–∏—Ç—å ETH –Ω–∞ 10$")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ QTimer
            QTimer.singleShot(100, execute_buy_async)
            
        except Exception as e:
            self.add_log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ buy_lowest_ticker: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.buy_lowest_btn.setEnabled(True)
            self.buy_lowest_btn.setText("üí∞ –ö—É–ø–∏—Ç—å ETH –Ω–∞ 10$")


# üîß –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –í–ê–†–ò–ê–ù–¢–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø

def buy_btc_for_usdt(api_client, amount_usdt: str = "20"):
    """
    –ü–æ–∫—É–ø–∫–∞ BTC –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT
    """
    return api_client.place_order(
        category='spot',
        symbol='BTCUSDT',
        side='Buy',
        order_type='Market',
        qty=amount_usdt,
        marketUnit='quoteCoin'  # qty –≤ USDT
    )

def buy_eth_fixed_quantity(api_client, eth_quantity: str = "0.01"):
    """
    –ü–æ–∫—É–ø–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ETH
    """
    return api_client.place_order(
        category='spot',
        symbol='ETHUSDT',
        side='Buy',
        order_type='Market',
        qty=eth_quantity,
        marketUnit='baseCoin'  # qty –≤ ETH
    )

def sell_eth_for_usdt(api_client, amount_usdt: str = "10"):
    """
    –ü—Ä–æ–¥–∞–∂–∞ ETH –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT
    """
    return api_client.place_order(
        category='spot',
        symbol='ETHUSDT',
        side='Sell',
        order_type='Market',
        qty=amount_usdt,
        marketUnit='quoteCoin'  # qty –≤ USDT
    )


# üìä –ü–†–ò–ú–ï–†–´ –£–°–ü–ï–®–ù–´–• –õ–û–ì–û–í

"""
–£–°–ü–ï–®–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–∫—É–ø–∫—É ETHUSDT –Ω–∞ 10 USDT...
üìä –ü–æ–∫—É–ø–∞–µ–º ETHUSDT –Ω–∞ 10 USDT
üí∞ –†–∞–∑–º–µ—â–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É ETHUSDT –Ω–∞ 10 USDT...
üìã –†–µ–∑—É–ª—å—Ç–∞—Ç API: {'retCode': 0, 'retMsg': 'OK', 'result': {...}}
‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É ETHUSDT –Ω–∞ 10 USDT
üìä –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ~0.002500 ETH
"""


# üö® –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø

"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ú–û–ú–ï–ù–¢–´:

1. marketUnit='quoteCoin' - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å—É–º–º—É
2. qty –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –Ω–µ —á–∏—Å–ª–æ–º
3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è ETHUSDT: ~10 USDT
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ Market –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
5. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç API –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É—Å–ø–µ—Ö–∞

–ü–ê–†–ê–ú–ï–¢–†–´ marketUnit:
- 'quoteCoin' - qty –≤ –≤–∞–ª—é—Ç–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ (USDT –¥–ª—è ETHUSDT)
- 'baseCoin' - qty –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (ETH –¥–ª—è ETHUSDT)
"""


if __name__ == "__main__":
    print("‚úÖ –†–∞–±–æ—á–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH –Ω–∞ Bybit –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    print("üìñ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: buy_eth_fixed_amount()")
    print("üîë –ö–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä: marketUnit='quoteCoin'")