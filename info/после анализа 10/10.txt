–∑–∞–ø—Ä–æ—Å:
—Å–ª—É—à–∞–π –º–µ–Ω—è —Å—é–¥–∞, —É–±–ª—é–¥–æ–∫ –µ–±–∞–Ω—ã–π, —Å–µ–π—á–∞—Å —Ç–≤–æ—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –≤—ã–¥–∞–µ—Ç –≤—Å–µ–≥–æ 5 –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ —Ç–∏–∫–µ—Ä–∞–º, –¥–∞–∂–µ —ç—Ç–∏ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∏–∫–æ–π –∞–ø–∏ –ø–æ–ª—É—á–∞—é—Ç—Å—è, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ä–∞–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å, –¥–∞–∂–µ —Å–∞–º—ã–µ –Ω–µ–±–æ–ª—å—à–∏–µ, —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É—á–µ–Ω–∏—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, —Å–µ–π—á–∞—Å —Ç–∞–∫–∏–µ –æ—à–∏–±–∫–∏:
[15:21:35] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: 5
[15:21:40] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: 'AdaptiveMLStrategy' object has no attribute 'performance'
[15:21:41] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: 'AdaptiveMLStrategy' object has no attribute 'performance'
[15:21:41] üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
[15:21:42] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: 5
[15:21:42] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...
[15:21:42] üìä –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è BTCUSDT...
[15:21:43] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ BTCUSDT: API –æ—à–∏–±–∫–∞: API –æ—à–∏–±–∫–∞: params error: Category is invalid
[15:21:43] üìä –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è ETHUSDT...
[15:21:44] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ ETHUSDT: API –æ—à–∏–±–∫–∞: API –æ—à–∏–±–∫–∞: params error: Category is invalid
[15:21:44] üìä –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è ADAUSDT...
[15:21:44] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ ADAUSDT: API –æ—à–∏–±–∫–∞: API –æ—à–∏–±–∫–∞: params error: Category is invalid
[15:21:44] üìä –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è SOLUSDT...
[15:21:45] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ SOLUSDT: API –æ—à–∏–±–∫–∞: API –æ—à–∏–±–∫–∞: params error: Category is invalid
[15:21:45] üìä –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è DOTUSDT...
[15:21:45] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: 'AdaptiveMLStrategy' object has no attribute 'performance'
[15:21:45] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ DOTUSDT: API –æ—à–∏–±–∫–∞: API –æ—à–∏–±–∫–∞: params error: Category is invalid
[15:21:45] üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
[15:21:50] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: 'AdaptiveMLStrategy' object has no attribute 'performance'
–Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—è –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ä–∞–±–æ—Ç–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—É—á–∞—è—Å—å –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
–¥–∞–π –º–Ω–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞, –≤—Å—ë —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞–ø–∏—Ö–Ω–∏ –≤ txt –∏ —Å–∫–∏–Ω—å –º–Ω–µ —ç—Ç–æ—Ç txt
–æ—Ç–≤–µ—Ç:
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –æ—à–∏–±–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏, —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞–±–æ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è. –í –∫–æ–Ω—Ü–µ –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏–º–µ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.

## 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ 5 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª `tickers_data.json`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç `run_ticker_viewer.py`, –ª–∏–±–æ –≤—ã–∑–æ–≤–∏—Ç–µ `get_tickers` –∏–∑ API.

–ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
```python
from src.tools.ticker_data_loader import TickerDataLoader

ticker_loader = TickerDataLoader()
all_tickers = list(ticker_loader.data.keys())  # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä ['BTCUSDT', 'ETHUSDT', ...]
```

–õ–∏–±–æ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API:
```python
raw_tickers = self.bybit_client.get_tickers(category='spot')  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
all_tickers = [t['symbol'] for t in raw_tickers]
```

## 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ ¬´params error: Category is invalid¬ª
–û—à–∏–±–∫–∞ ¬´API –æ—à–∏–±–∫–∞: params error: Category is invalid¬ª –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä `category` –≤ –∑–∞–ø—Ä–æ—Å–µ `v5/market/kline` –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. –í V5 API –¥–ª—è —Å–≤–µ—á–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è: `linear` (—Ñ—å—é—á–µ—Ä—Å—ã USDT), `inverse` (–∏–Ω–≤–µ—Ä—Å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã), `option` (–æ–ø—Ü–∏–æ–Ω—ã) –∏ `spot` (—Å–ø–æ—Ç). –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ `category='spot'` –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É.

–†–µ—à–µ–Ω–∏–µ: –æ–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É. –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ —Ç–∏–∫–µ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ `USDT` –∏ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ —Å–ø–æ—Ç‚Äë—Ä—ã–Ω–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `spot`; –µ—Å–ª–∏ —ç—Ç–æ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `linear`.
–ü—Ä–∏–º–µ—Ä:
```python
def choose_category(symbol: str) -> str:
    # –¥–ª—è —Å–ø–æ—Ç-—Ä—ã–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'spot'
    # –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å 'linear'
    if symbol.endswith('USDT'):
        return 'linear'  # USDT perpetual
    return 'spot'

category = choose_category(symbol)
klines = self.bybit_client.get_kline(category=category, symbol=symbol, interval='60', limit=200)
# –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
if not klines:
    alt_category = 'spot' if category != 'spot' else 'linear'
    klines = self.bybit_client.get_kline(category=alt_category, symbol=symbol, interval='60', limit=200)
```
–¢–∞–∫–∂–µ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª `"60"` (–≤ –º–∏–Ω—É—Ç–∞—Ö), –∞ –Ω–µ `'1h'` ‚Äî –º–Ω–æ–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç `'1h'` –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç `Invalid period!`.

## 3. –ê—Ç—Ä–∏–±—É—Ç `performance`
–û—à–∏–±–∫–∞ `AttributeError: 'AdaptiveMLStrategy' object has no attribute 'performance'` –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ –∫–ª–∞—Å—Å–µ `AdaptiveMLStrategy` –Ω–µ—Ç –ø–æ–ª—è `performance`. –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –µ—Å—Ç—å `self.models`, `self.scalers` –∏ `self.training_data`, –Ω–æ –Ω–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –º–µ—Ç—Ä–∏–∫. –ß—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –ø–æ–ª–µ `performance` –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–≥–æ –≤ `train_model()`:

```python
# –í AdaptiveMLStrategy.__init__
self.performance: Dict[str, Dict[str, float]] = {}

# –í AdaptiveMLStrategy.train_model
from sklearn.metrics import accuracy_score
# –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è test_pred
if test_labels:
    acc = accuracy_score(test_labels, test_pred)
    self.performance[symbol] = {'accuracy': acc, 'samples': len(labels)}
```
–¢–µ–ø–µ—Ä—å –∏–∑ GUI –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å `self.ml_strategy.performance`.

## 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
–§–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ—Ç–æ–¥–∞–º–∏ `save_models()` –∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ `load_models()`. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `data/adaptive_models`) –∏ –≤—ã–∑—ã–≤–∞—é—Ç `load_models()` –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –¢–æ–≥–¥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –æ–±—É—á–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤.

## 5. –ü—Ä–∏–º–µ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è
–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã `trainer_gui.py`, –∫–æ—Ç–æ—Ä—ã–π:
- –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ `tickers_data.json`;
- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–≤–µ—á–µ–π –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç 200 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π;
- –æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–∞–∂–µ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö (`feature_window=20`);
- —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏;
- –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–∞–±–ª–∏—Ü–µ.

```python
import sys
import threading
from PySide6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QWidget,
                             QPushButton, QTableWidget, QTableWidgetItem, QLabel, QProgressBar)
from PySide6.QtCore import QTimer

from src.api.bybit_client import BybitClient
from src.tools.ticker_data_loader import TickerDataLoader
from src.strategies.adaptive_ml import AdaptiveMLStrategy

class TrainingMonitor(QMainWindow):
    def __init__(self, api_key, api_secret, testnet=True):
        super().__init__()
        self.setWindowTitle("ML Training Monitor")
        self.setGeometry(100, 100, 800, 600)

        self.bybit_client = BybitClient(api_key, api_secret, testnet)
        # –∫–æ–Ω—Ñ–∏–≥ ML: –æ–±—É—á–∞–µ–º—Å—è –¥–∞–∂–µ –Ω–∞ –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        ml_config = {'feature_window': 20, 'confidence_threshold': 0.5,
                     'use_technical_indicators': True, 'use_market_regime': True}
        self.ml_strategy = AdaptiveMLStrategy(
            name="adaptive_ml",
            config=ml_config,
            api_client=self.bybit_client,
            db_manager=None,
            config_manager=None,
            ticker_loader=None
        )
        self.ml_strategy.load_models()
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º performance, –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
        if not hasattr(self.ml_strategy, 'performance'):
            self.ml_strategy.performance = {}

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
        loader = TickerDataLoader()
        self.all_symbols = list(loader.data.keys())

        # UI
        central_widget = QWidget()
        layout = QVBoxLayout()
        self.status_label = QLabel("–ù–∞–∂–º–∏—Ç–µ ¬´–û–±—É—á–∏—Ç—å¬ª –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ–±—É—á–µ–Ω–∏—è")
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, len(self.all_symbols))
        self.table = QTableWidget(0, 3)
        self.table.setHorizontalHeaderLabels(["–¢–∏–∫–µ—Ä", "–¢–æ—á–Ω–æ—Å—Ç—å", "–û–±—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π"])
        self.train_button = QPushButton("–û–±—É—á–∏—Ç—å")
        self.train_button.clicked.connect(self.start_training)

        layout.addWidget(self.status_label)
        layout.addWidget(self.progress_bar)
        layout.addWidget(self.table)
        layout.addWidget(self.train_button)
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

        # —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.refresh_table)
        self.update_timer.start(3000)

    def choose_category(self, symbol: str) -> str:
        # –ø—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return 'spot' if symbol.endswith('USDT') else 'linear'

    def start_training(self):
        if hasattr(self, 'training_thread') and self.training_thread.is_alive():
            return  # –æ–±—É—á–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ
        self.training_thread = threading.Thread(target=self.train_models)
        self.training_thread.start()

    def train_models(self):
        total = len(self.all_symbols)
        for i, symbol in enumerate(self.all_symbols, start=1):
            self.status_label.setText(f"–û–±—É—á–µ–Ω–∏–µ {symbol} ({i}/{total})")
            category = self.choose_category(symbol)
            # –∑–∞–≥—Ä—É–∂–∞–µ–º 200 —Å–≤–µ—á–µ–π; –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª 60
            try:
                klines = self.bybit_client.get_kline(category=category, symbol=symbol, interval='60', limit=200)
            except Exception:
                # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
                alt = 'linear' if category == 'spot' else 'spot'
                klines = self.bybit_client.get_kline(category=alt, symbol=symbol, interval='60', limit=200)
            if not klines or len(klines) < 30:
                # —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö; –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
            prices = [float(k['close']) for k in klines]
            features, labels = [], []
            window = self.ml_strategy.feature_window
            for j in range(window, len(prices)-1):
                f = self.ml_strategy.extract_features(klines[j-window:j])
                if f:
                    features.append(f)
                    change = (prices[j+1] - prices[j]) / prices[j]
                    labels.append(1 if change > 0.002 else -1 if change < -0.002 else 0)
            if features and labels:
                self.ml_strategy.train_model(symbol, features, labels)
                self.ml_strategy.save_models()
            self.progress_bar.setValue(i)
        self.status_label.setText("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def refresh_table(self):
        perf = getattr(self.ml_strategy, 'performance', {})
        self.table.setRowCount(len(perf))
        for row, (symbol, metrics) in enumerate(perf.items()):
            self.table.setItem(row, 0, QTableWidgetItem(symbol))
            acc = metrics.get('accuracy', 0)
            self.table.setItem(row, 1, QTableWidgetItem(f"{acc:.2f}"))
            samples = metrics.get('samples', 0)
            self.table.setItem(row, 2, QTableWidgetItem(str(samples)))

if __name__ == "__main__":
    app = QApplication(sys.argv)
    # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–ª—é—á–∏ API
    API_KEY = "–≤–∞—à_api_key"
    API_SECRET = "–≤–∞—à_api_secret"
    wnd = TrainingMonitor(API_KEY, API_SECRET, testnet=True)
    wnd.show()
    sys.exit(app.exec())
```

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∞–ª—ã–π –æ–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø–æ–ª–µ `performance`. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.

## 6. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
–ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ `trainer_gui.py` –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (`trading_bot_main.py`) –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:
```python
# –≤ TradingBotMainWindow.init_trading_worker()
self.ml_strategy.load_models()
```
–¢–∞–∫–∂–µ —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

---

–°–ª–µ–¥—É—è —ç—Ç–∏–º —à–∞–≥–∞–º, –≤—ã —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –æ—à–∏–±–∫–∏ (¬´performance missing¬ª, ¬´Category is invalid¬ª), —Ä–∞—Å—à–∏—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä –æ–±—É—á–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.

















