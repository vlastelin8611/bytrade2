1. Ошибка DatabaseManager.log_analysis

В каждой итерации цикла после получения свечей и анализа вы видите сообщения:
2025-09-23 14:56:38,270 - strategies.adaptive_ml - ERROR - Ошибка анализа рынка BABY1USDT: 'DatabaseManager' object has no attribute 'log_analysis'
2025-09-23 14:56:38,270 - __main__ - ERROR - Ошибка записи анализа в БД для BABY1USDT: 'DatabaseManager' object has no attribute 'log_analysis'
2025-09-23 14:56:38,270 - __main__ - INFO - Результат анализа BABY1USDT: сигнал=None, уверенность=0.0




Это повторяется для всех тикеров. В файле AdaptiveMLStrategy метод analyze_market пытается отправить результат анализа в базу вызовом self.db_manager.log_analysis(analysis_log)
raw.githubusercontent.com
. Однако в классе DatabaseManager такого метода нет – есть только log_trade и log_system_action
raw.githubusercontent.com
, поэтому возникает исключение, и анализ прерывается. Из-за этого бот не доходит до оценки сигнала и просто пишет, что сигнала нет.


Что делать:
реализовать его в DatabaseManager. Например, можно добавить в DatabaseManager метод, который будет писать анализ в таблицу system_logs:
# В DatabaseManager
def log_analysis(self, analysis_log: Dict):
    """Логирование результатов ML‑анализа."""
    try:
        details_json = json.dumps({
            'symbol': analysis_log['symbol'],
            'features': analysis_log['features'],
            'regime': analysis_log['regime'],
            'prediction': analysis_log['prediction']
        }, default=str)

        self.log_system_action(
            level='INFO',
            component='ML_ANALYSIS',
            action=f"Analysis for {analysis_log['symbol']}",
            details=details_json,
            execution_time_ms=None,
            session_id=None
        )
    except Exception as e:
        self.logger.error(f"Ошибка логирования анализа: {e}")
После этого исключение исчезнет, и работа стратегии продолжится.

2. Ошибка «Invalid period!» и fallback на 60

Лог показывает, что для многих символов API Bybit возвращает Invalid period! при запросе свечей с интервалом 1h, поэтому бот переходит на интервал "60" (минуты)
raw.githubusercontent.com
. Однако для малого количества токенов и 200 свечей это зачастую даёт неполные данные, и анализ возвращает сигнал None с уверенностью 0.0.

В классе BybitClient метод get_kline возвращает только 200 свечей
raw.githubusercontent.com
. При этом в стратегии используется окно feature_window=50, поэтому для корректного расчёта индикаторов желательно иметь 200–300 свечей. Для улучшения ситуации:

Добавьте поддержку нескольких таймфреймов: если 1h не доступен, пробуйте 15 (15 м) или 4 (4 ч). Например:
for interval in ['1h', '60', '15', '5']:
    try:
        klines = self.bybit_client.get_kline(category='spot', symbol=symbol, interval=interval, limit=200)
        if klines:
            break
    except Exception:
        continue
Реализуйте асинхронный загрузчик, который сможет «пролистывать» по времени и собирать несколько тысяч свечей (как я предлагал ранее). Это обеспечит достаточный объём данных и устранит необходимость постоянно переключать интервал.

3. Отсутствие торговых сигналов

Даже когда анализ завершался (до ошибки БД), итоговые строки вида «Нет торгового сигнала для …» показывали, что стратегия не генерирует BUY/SELL. Это нормально в текущем режиме, потому что:

Пока у вас нет 50 свечей для каждого символа, AdaptiveMLStrategy возвращает {'signal': None, 'confidence': 0.0, 'reason': 'Недостаточно данных'}
raw.githubusercontent.com
.

Когда данных хватает, но нет обученной модели, используется простая логика: сигнал BUY, если рост за 1 ч > 2 % и за 24 ч > 5 % с RSI < 70; сигнал SELL, если падение > 2 % и 5 %, RSI > 30 и т. д. Эта логика консервативна, поэтому сигнал появляется редко. При этом в _check_daily_limits есть порог уверенности 0.65
raw.githubusercontent.com
 — даже если стратегия выдаст BUY с уверенностью 0.5, ордер не будет размещён. Вы можете временно снизить порог (например до 0.5), чтобы проверить, работает ли исполнение ордеров.

Машинное обучение начнёт работать только после накопления ~100 примеров (сделок), чего пока нет.

4. Как загрузить исторические данные и обучить модель

Чтобы нейросеть действительно училась на истории, нужно:

Собрать длинную историю свечей. Используйте асинхронную функцию, которая делает серию запросов с параметрами start/end и загружает, например, год данных. Пример кода асинхронного загрузчика я приводил в предыдущем ответе.

Извлечь признаки и метки из этих данных. Можно сформировать метку как +1, если цена в следующей свече выросла больше 0.2 %, −1, если упала, и 0 — если почти не изменилась.

Обучить модель до запуска торговли. В AdaptiveMLStrategy есть методы для обучения (train_model) — вызовите его с массивами features и labels для конкретного символа до старта торгового цикла. После обучения сохраните модель в файл, чтобы не переобучать каждый раз.

Асинхронность и потокобезопасность. Запускайте загрузку и обучение в отдельном потоке или через asyncio, чтобы не блокировать GUI. Когда данные готовы, обновите стратегию в торговом потоке.

Итог

Новые логи говорят, что:

Основная ошибка сейчас — отсутствие метода log_analysis в DatabaseManager. Исправив её, вы устраните исключения, и цикл анализа сможет работать дальше.

API часто возвращает Invalid period! для 1h; вы правы — бот использует только текущую цену и ограниченный набор свечей, поэтому он не может получать полноценные исторические данные.

Нейросеть пока не обучена и не будет генерировать прогнозы, пока вы не загрузите обширную историю и не обучите модель.

После исправления вызова log_analysis, организации загрузки большой истории и корректной интеграции машинного обучения торговля должна заработать. Если после этого вы увидите сигналы BUY/SELL, но ордера не размещаются, проверьте порог confidence_threshold и настройки минимального размера позиции.



























