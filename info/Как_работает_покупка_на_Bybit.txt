# üìñ –ü–û–õ–ù–û–ï –†–£–ö–û–í–û–î–°–¢–í–û: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∫—É–ø–∫–∞ –Ω–∞ Bybit

## üéØ –û–°–ù–û–í–ù–ê–Ø –ö–û–ù–¶–ï–ü–¶–ò–Ø

–ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ Bybit —á–µ—Ä–µ–∑ API –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø–æ–º–æ—â—å—é endpoint `/v5/order/create`.
–ö–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `marketUnit` –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.

## üîë –ö–õ–Æ–ß–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
```python
{
    'category': 'spot',           # –¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ (spot/linear/inverse)
    'symbol': 'ETHUSDT',          # –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    'side': 'Buy',                # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (Buy/Sell)
    'orderType': 'Market',        # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (Market/Limit)
    'qty': '10',                  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Å—Ç—Ä–æ–∫–∞!)
    'marketUnit': 'quoteCoin'     # üîë –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!
}
```

### –ü–∞—Ä–∞–º–µ—Ç—Ä marketUnit:
- **'quoteCoin'** - qty —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≤–∞–ª—é—Ç–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ (USDT –¥–ª—è ETHUSDT)
- **'baseCoin'** - qty —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (ETH –¥–ª—è ETHUSDT)

## üí° –†–ê–ë–û–ß–ò–ï –ü–†–ò–ú–ï–†–´ –ö–û–î–ê

### 1. –ü–æ–∫—É–ø–∫–∞ ETH –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT
```python
def buy_eth_for_usdt_amount():
    """–ü–æ–∫—É–ø–∫–∞ ETH –Ω–∞ 10 USDT"""
    order_result = api_client.place_order(
        category='spot',
        symbol='ETHUSDT',
        side='Buy',
        order_type='Market',
        qty='10',                    # 10 USDT
        marketUnit='quoteCoin'       # qty –≤ USDT
    )
    return order_result

# –†–µ–∑—É–ª—å—Ç–∞—Ç: –ö—É–ø–∏—Ç ETH –Ω–∞ —Å—É–º–º—É 10 USDT
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH = 10 USDT / —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞_ETH
```

### 2. –ü–æ–∫—É–ø–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ETH
```python
def buy_fixed_eth_amount():
    """–ü–æ–∫—É–ø–∫–∞ 0.01 ETH"""
    order_result = api_client.place_order(
        category='spot',
        symbol='ETHUSDT',
        side='Buy',
        order_type='Market',
        qty='0.01',                  # 0.01 ETH
        marketUnit='baseCoin'        # qty –≤ ETH
    )
    return order_result

# –†–µ–∑—É–ª—å—Ç–∞—Ç: –ö—É–ø–∏—Ç —Ä–æ–≤–Ω–æ 0.01 ETH
# –°—Ç–æ–∏–º–æ—Å—Ç—å = 0.01 ETH * —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞_ETH
```

### 3. –ü—Ä–æ–¥–∞–∂–∞ ETH –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT
```python
def sell_eth_for_usdt_amount():
    """–ü—Ä–æ–¥–∞–∂–∞ ETH –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ 15 USDT"""
    order_result = api_client.place_order(
        category='spot',
        symbol='ETHUSDT',
        side='Sell',
        order_type='Market',
        qty='15',                    # 15 USDT
        marketUnit='quoteCoin'       # qty –≤ USDT
    )
    return order_result

# –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–¥–∞—Å—Ç ETH –Ω–∞ —Å—É–º–º—É 15 USDT
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH = 15 USDT / —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞_ETH
```

### 4. –ü—Ä–æ–¥–∞–∂–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ETH
```python
def sell_fixed_eth_amount():
    """–ü—Ä–æ–¥–∞–∂–∞ 0.005 ETH"""
    order_result = api_client.place_order(
        category='spot',
        symbol='ETHUSDT',
        side='Sell',
        order_type='Market',
        qty='0.005',                 # 0.005 ETH
        marketUnit='baseCoin'        # qty –≤ ETH
    )
    return order_result

# –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–¥–∞—Å—Ç —Ä–æ–≤–Ω–æ 0.005 ETH
# –ü–æ–ª—É—á–∏—Ç = 0.005 ETH * —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞_ETH USDT
```

## üîß –ü–û–õ–ù–´–ô –†–ê–ë–û–ß–ò–ô –ö–û–î –ò–ó –ü–†–û–ï–ö–¢–ê

```python
def buy_lowest_ticker(self):
    """–ü–æ–∫—É–ø–∫–∞ ETHUSDT –Ω–∞ —Å—É–º–º—É 10 USDT (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    try:
        self.add_log_message("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–∫—É–ø–∫—É ETHUSDT –Ω–∞ 10 USDT...")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.buy_lowest_btn.setEnabled(False)
        self.buy_lowest_btn.setText("‚è≥ –ü–æ–∫—É–ø–∫–∞...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        def execute_buy_async():
            try:
                symbol = "ETHUSDT"
                quote_order_qty = "10"  # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ 10 USDT
                
                self.add_log_message(f"üìä –ü–æ–∫—É–ø–∞–µ–º {symbol} –Ω–∞ {quote_order_qty} USDT")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
                if not hasattr(self, 'trading_worker') or self.trading_worker is None:
                    self.add_log_message("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞
                if not hasattr(self.trading_worker, 'bybit_client') or self.trading_worker.bybit_client is None:
                    self.add_log_message("‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return
                
                # üîë –ö–õ–Æ–ß–ï–í–ê–Ø –ß–ê–°–¢–¨: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                try:
                    self.add_log_message(f"üí∞ –†–∞–∑–º–µ—â–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol} –Ω–∞ {quote_order_qty} USDT...")
                    
                    # ‚úÖ –†–ê–ë–û–ß–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:
                    order_result = self.trading_worker.bybit_client.place_order(
                        category='spot',                    # –°–ø–æ—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
                        symbol=symbol,                      # ETHUSDT
                        side='Buy',                         # –ü–æ–∫—É–ø–∫–∞
                        order_type='Market',                # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                        qty=quote_order_qty,                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ USDT (10)
                        marketUnit='quoteCoin'              # üîë –ö–õ–Æ–ß–ï–í–û–ô –ü–ê–†–ê–ú–ï–¢–†!
                    )
                    
                    self.add_log_message(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç API: {order_result}")
                    
                    if order_result:
                        self.add_log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol} –Ω–∞ {quote_order_qty} USDT")
                        
                        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ETH
                        try:
                            tickers = self.trading_worker.bybit_client.get_tickers(category="spot")
                            eth_price = 0
                            if tickers and isinstance(tickers, list):
                                for ticker in tickers:
                                    if ticker.get('symbol') == symbol:
                                        eth_price = float(ticker.get('lastPrice', 0))
                                        break
                            if eth_price > 0:
                                estimated_qty = float(quote_order_qty) / eth_price
                                self.add_log_message(f"üìä –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ~{estimated_qty:.6f} ETH")
                        except Exception as price_error:
                            self.add_log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {price_error}")
                    else:
                        self.add_log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol}")
                        
                except Exception as api_error:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ {symbol}: {str(api_error)}")
                    self.logger.error(f"API Error: {api_error}")
                
            except Exception as e:
                self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_lowest_ticker: {e}")
            finally:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.buy_lowest_btn.setEnabled(True)
                self.buy_lowest_btn.setText("üí∞ –ö—É–ø–∏—Ç—å ETH –Ω–∞ 10$")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ QTimer
        QTimer.singleShot(100, execute_buy_async)
        
    except Exception as e:
        self.add_log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
        self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ buy_lowest_ticker: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        self.buy_lowest_btn.setEnabled(True)
        self.buy_lowest_btn.setText("üí∞ –ö—É–ø–∏—Ç—å ETH –Ω–∞ 10$")
```

## üìä –†–ê–ó–õ–ò–ß–ù–´–ï –¢–û–†–ì–û–í–´–ï –ü–ê–†–´

### Bitcoin (BTC):
```python
# –ü–æ–∫—É–ø–∫–∞ BTC –Ω–∞ 50 USDT
api_client.place_order(
    category='spot',
    symbol='BTCUSDT',
    side='Buy',
    order_type='Market',
    qty='50',
    marketUnit='quoteCoin'
)

# –ü–æ–∫—É–ø–∫–∞ 0.001 BTC
api_client.place_order(
    category='spot',
    symbol='BTCUSDT',
    side='Buy',
    order_type='Market',
    qty='0.001',
    marketUnit='baseCoin'
)
```

### –î—Ä—É–≥–∏–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã:
```python
# –ü–æ–∫—É–ø–∫–∞ SOL –Ω–∞ 25 USDT
api_client.place_order(
    category='spot',
    symbol='SOLUSDT',
    side='Buy',
    order_type='Market',
    qty='25',
    marketUnit='quoteCoin'
)

# –ü–æ–∫—É–ø–∫–∞ ADA –Ω–∞ 30 USDT
api_client.place_order(
    category='spot',
    symbol='ADAUSDT',
    side='Buy',
    order_type='Market',
    qty='30',
    marketUnit='quoteCoin'
)
```

## ‚ö†Ô∏è –í–ê–ñ–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –¢–†–ï–ë–û–í–ê–ù–ò–Ø

### –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–æ–≤:
- **ETHUSDT**: –º–∏–Ω–∏–º—É–º ~10 USDT
- **BTCUSDT**: –º–∏–Ω–∏–º—É–º ~10 USDT  
- **–î—Ä—É–≥–∏–µ –ø–∞—Ä—ã**: –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —á–µ—Ä–µ–∑ API instruments-info

### –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤:
```python
import requests

def check_trading_limits(symbol):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    url = f'https://api-testnet.bybit.com/v5/market/instruments-info?category=spot&symbol={symbol}'
    response = requests.get(url)
    data = response.json()
    
    if 'result' in data and 'list' in data['result']:
        instrument = data['result']['list'][0]
        lot_filter = instrument.get('lotSizeFilter', {})
        
        print(f"–°–∏–º–≤–æ–ª: {symbol}")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {lot_filter.get('minOrderQty', 'N/A')}")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {lot_filter.get('minOrderAmt', 'N/A')}")
        print(f"–®–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {lot_filter.get('qtyStep', 'N/A')}")
        
        return lot_filter
    
    return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
check_trading_limits('ETHUSDT')
```

## üö® –ß–ê–°–¢–´–ï –û–®–ò–ë–ö–ò –ò –ò–• –†–ï–®–ï–ù–ò–Ø

### 1. "Order value exceeded lower limit"
**–ü—Ä–∏—á–∏–Ω–∞**: –°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
**–†–µ—à–µ–Ω–∏–µ**: –£–≤–µ–ª–∏—á–∏—Ç—å qty –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã —á–µ—Ä–µ–∑ API

### 2. "Invalid parameter marketUnit"
**–ü—Ä–∏—á–∏–Ω–∞**: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ marketUnit
**–†–µ—à–µ–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 'quoteCoin' –∏–ª–∏ 'baseCoin'

### 3. "Insufficient balance"
**–ü—Ä–∏—á–∏–Ω–∞**: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
**–†–µ—à–µ–Ω–∏–µ**: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ get_wallet_balance()

### 4. –û—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è
**–ü—Ä–∏—á–∏–Ω–∞**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Limit –æ—Ä–¥–µ—Ä–∞ –≤ –Ω–µ–ª–∏–∫–≤–∏–¥–Ω–æ–º —Ä—ã–Ω–∫–µ
**–†–µ—à–µ–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Market –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

## üìà –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–ó–£–õ–¨–¢–ê–¢–û–í

### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞:
```python
def check_order_status(order_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞"""
    result = api_client.get_order_history(
        category='spot',
        limit=50
    )
    
    for order in result.get('list', []):
        if order.get('orderId') == order_id:
            return {
                'status': order.get('orderStatus'),
                'filled_qty': order.get('cumExecQty'),
                'avg_price': order.get('avgPrice')
            }
    
    return None
```

### –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤:
```python
def get_recent_trades():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
    result = api_client.get_execution_list(
        category='spot',
        limit=20
    )
    
    trades = []
    for execution in result.get('list', []):
        trades.append({
            'symbol': execution.get('symbol'),
            'side': execution.get('side'),
            'qty': execution.get('execQty'),
            'price': execution.get('execPrice'),
            'time': execution.get('execTime')
        })
    
    return trades
```

## üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï

–ö–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ Bybit - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `marketUnit`:

- **marketUnit='quoteCoin'** - –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT
- **marketUnit='baseCoin'** - –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã

–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Market –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–æ–≤.

---
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**: 29.09.2025
**–°—Ç–∞—Ç—É—Å**: ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
**–í–µ—Ä—Å–∏—è API**: v5