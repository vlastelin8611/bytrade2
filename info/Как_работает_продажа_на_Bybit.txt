# üìñ –ü–û–õ–ù–û–ï –†–£–ö–û–í–û–î–°–¢–í–û: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ Bybit

## üéØ –û–°–ù–û–í–ù–ê–Ø –ö–û–ù–¶–ï–ü–¶–ò–Ø

–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ Bybit –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ endpoint `/v5/order/create`, –Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `side='Sell'`.
–ö–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏ –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É.

## üîë –ö–õ–Æ–ß–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –ü–†–û–î–ê–ñ–ò

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
```python
{
    'category': 'spot',           # –¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ (spot/linear/inverse)
    'symbol': 'ETHUSDT',          # –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    'side': 'Sell',               # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –ü–†–û–î–ê–ñ–ê
    'orderType': 'Market',        # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (Market/Limit)
    'qty': '5',                   # –°—É–º–º–∞ –≤ USDT (—Å—Ç—Ä–æ–∫–∞!)
    'marketUnit': 'quoteCoin'     # üîë –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!
}
```

### –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞:
1. **–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞** —á–µ—Ä–µ–∑ API
2. **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤** (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤)
3. **–ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ** –ø–æ USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏
4. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤** ($1 –º–∏–Ω–∏–º—É–º)

## üí° –†–ê–ë–û–ß–ò–ï –ü–†–ò–ú–ï–†–´ –ö–û–î–ê

### 1. –ü–æ–ª–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–¥–∞–∂–∏ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
```python
def sell_cheapest_asset():
    """–ü—Ä–æ–¥–∞–∂–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –Ω–∞ 5 USDT"""
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    balance = api_client.get_unified_balance_flat()
    
    # 2. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—Ä–≥—É–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã
    tradeable_coins = []
    for coin in balance['coins']:
        coin_name = coin.get('coin', '')
        wallet_balance = float(coin.get('walletBalance', 0))
        usd_value = float(coin.get('usdValue', 0))
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –º–µ–ª–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if (coin_name not in ['USDT', 'USDC', 'BUSD', 'DAI'] and 
            wallet_balance > 0 and usd_value > 1.0):
            tradeable_coins.append({
                'coin': coin_name,
                'balance': wallet_balance,
                'usd_value': usd_value
            })
    
    # 3. –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤
    if not tradeable_coins:
        return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
    
    lowest_coin = min(tradeable_coins, key=lambda c: c['usd_value'])
    symbol = lowest_coin['coin'] + "USDT"
    
    # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É
    order_result = api_client.place_order(
        category='spot',
        symbol=symbol,
        side='Sell',
        order_type='Market',
        qty='5',                    # –ü—Ä–æ–¥–∞–µ–º –Ω–∞ 5 USDT
        marketUnit='quoteCoin'      # qty –≤ USDT
    )
    
    return order_result

# –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–¥–∞—Å—Ç —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤ –Ω–∞ —Å—É–º–º—É 5 USDT
```

### 2. –ü—Ä–æ–¥–∞–∂–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
```python
def sell_eth_for_usdt_amount():
    """–ü—Ä–æ–¥–∞–∂–∞ ETH –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ 10 USDT"""
    order_result = api_client.place_order(
        category='spot',
        symbol='ETHUSDT',
        side='Sell',
        order_type='Market',
        qty='10',                   # 10 USDT
        marketUnit='quoteCoin'      # qty –≤ USDT
    )
    return order_result

# –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–¥–∞—Å—Ç ETH –Ω–∞ —Å—É–º–º—É 10 USDT
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH = 10 USDT / —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞_ETH
```

### 3. –ü—Ä–æ–¥–∞–∂–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞
```python
def sell_fixed_eth_amount():
    """–ü—Ä–æ–¥–∞–∂–∞ 0.01 ETH"""
    order_result = api_client.place_order(
        category='spot',
        symbol='ETHUSDT',
        side='Sell',
        order_type='Market',
        qty='0.01',                 # 0.01 ETH
        marketUnit='baseCoin'       # qty –≤ ETH
    )
    return order_result

# –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–¥–∞—Å—Ç —Ä–æ–≤–Ω–æ 0.01 ETH
# –ü–æ–ª—É—á–∏—Ç = 0.01 ETH * —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞_ETH USDT
```

### 4. –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞
```python
def sell_all_of_asset(coin_name, balance):
    """–ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
    order_result = api_client.place_order(
        category='spot',
        symbol=f'{coin_name}USDT',
        side='Sell',
        order_type='Market',
        qty=str(balance),           # –í–µ—Å—å –±–∞–ª–∞–Ω—Å
        marketUnit='baseCoin'       # qty –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
    )
    return order_result

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# sell_all_of_asset('ETH', 0.004137)  # –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ ETH
```

## üîß –ü–û–õ–ù–´–ô –†–ê–ë–û–ß–ò–ô –ö–û–î –ò–ó –ü–†–û–ï–ö–¢–ê

```python
def sell_lowest_ticker(self):
    """–ü—Ä–æ–¥–∞–∂–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    try:
        self.add_log_message("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.sell_lowest_btn.setEnabled(False)
        self.sell_lowest_btn.setText("‚è≥ –ü—Ä–æ–¥–∞–∂–∞...")
        
        def execute_sell_async():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                if not hasattr(self, 'trading_worker') or self.trading_worker is None:
                    self.add_log_message("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return
                
                if not hasattr(self.trading_worker, 'bybit_client') or self.trading_worker.bybit_client is None:
                    self.add_log_message("‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return
                
                # üîë –ö–õ–Æ–ß–ï–í–ê–Ø –ß–ê–°–¢–¨: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                self.add_log_message("üìä –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å...")
                balance = self.trading_worker.bybit_client.get_unified_balance_flat()
                
                if not balance or not balance.get('coins'):
                    self.add_log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ")
                    return
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—Ä–≥—É–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã
                tradeable_coins = []
                for coin in balance['coins']:
                    coin_name = coin.get('coin', '')
                    wallet_balance = float(coin.get('walletBalance', 0))
                    usd_value = float(coin.get('usdValue', 0))
                    
                    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞
                    if (coin_name not in ['USDT', 'USDC', 'BUSD', 'DAI'] and 
                        wallet_balance > 0 and usd_value > 1.0):  # –ú–∏–Ω–∏–º—É–º $1
                        tradeable_coins.append({
                            'coin': coin_name,
                            'balance': wallet_balance,
                            'usd_value': usd_value
                        })
                
                if not tradeable_coins:
                    self.add_log_message("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–º–∏–Ω–∏–º—É–º $1)")
                    return
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤
                lowest_coin = min(tradeable_coins, key=lambda c: c['usd_value'])
                symbol = lowest_coin['coin'] + "USDT"
                
                self.add_log_message(f"üéØ –í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {symbol}")
                self.add_log_message(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: ${lowest_coin['usd_value']:.2f}")
                self.add_log_message(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {lowest_coin['balance']:.6f} {lowest_coin['coin']}")
                
                # üîë –ö–õ–Æ–ß–ï–í–ê–Ø –ß–ê–°–¢–¨: –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É
                try:
                    sell_amount_usdt = "5"  # –ü—Ä–æ–¥–∞–µ–º –Ω–∞ 5 USDT
                    self.add_log_message(f"üí∏ –†–∞–∑–º–µ—â–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol} –Ω–∞ {sell_amount_usdt} USDT...")
                    
                    # ‚úÖ –†–ê–ë–û–ß–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:
                    order_result = self.trading_worker.bybit_client.place_order(
                        category='spot',                    # –°–ø–æ—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
                        symbol=symbol,                      # –ù–∞–ø—Ä–∏–º–µ—Ä, ETHUSDT
                        side='Sell',                        # –ü—Ä–æ–¥–∞–∂–∞
                        order_type='Market',                # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                        qty=sell_amount_usdt,               # –°—É–º–º–∞ –≤ USDT (5)
                        marketUnit='quoteCoin'              # üîë –ö–õ–Æ–ß–ï–í–û–ô –ü–ê–†–ê–ú–ï–¢–†!
                    )
                    
                    self.add_log_message(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç API: {order_result}")
                    
                    if order_result:
                        self.add_log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol} –Ω–∞ {sell_amount_usdt} USDT")
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        try:
                            tickers = self.trading_worker.bybit_client.get_tickers(category="spot")
                            coin_price = 0
                            if tickers and isinstance(tickers, list):
                                for ticker in tickers:
                                    if ticker.get('symbol') == symbol:
                                        coin_price = float(ticker.get('lastPrice', 0))
                                        break
                            if coin_price > 0:
                                estimated_qty = float(sell_amount_usdt) / coin_price
                                self.add_log_message(f"üìä –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ~{estimated_qty:.6f} {lowest_coin['coin']}")
                        except Exception as price_error:
                            self.add_log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {price_error}")
                    else:
                        self.add_log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol}")
                        
                except Exception as api_error:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ {symbol}: {str(api_error)}")
                    self.logger.error(f"API Error: {api_error}")
                
            except Exception as e:
                self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ sell_lowest_ticker: {e}")
            finally:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.sell_lowest_btn.setEnabled(True)
                self.sell_lowest_btn.setText("üí∏ –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ QTimer
        QTimer.singleShot(100, execute_sell_async)
        
    except Exception as e:
        self.add_log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
        self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ sell_lowest_ticker: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        self.sell_lowest_btn.setEnabled(True)
        self.sell_lowest_btn.setText("üí∏ –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π")
```

## üìä –†–ê–ó–õ–ò–ß–ù–´–ï –¢–û–†–ì–û–í–´–ï –ü–ê–†–´

### Bitcoin (BTC):
```python
# –ü—Ä–æ–¥–∞–∂–∞ BTC –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ 50 USDT
api_client.place_order(
    category='spot',
    symbol='BTCUSDT',
    side='Sell',
    order_type='Market',
    qty='50',
    marketUnit='quoteCoin'
)

# –ü—Ä–æ–¥–∞–∂–∞ 0.001 BTC
api_client.place_order(
    category='spot',
    symbol='BTCUSDT',
    side='Sell',
    order_type='Market',
    qty='0.001',
    marketUnit='baseCoin'
)
```

### –î—Ä—É–≥–∏–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã:
```python
# –ü—Ä–æ–¥–∞–∂–∞ SOL –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ 25 USDT
api_client.place_order(
    category='spot',
    symbol='SOLUSDT',
    side='Sell',
    order_type='Market',
    qty='25',
    marketUnit='quoteCoin'
)

# –ü—Ä–æ–¥–∞–∂–∞ ADA –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ 30 USDT
api_client.place_order(
    category='spot',
    symbol='ADAUSDT',
    side='Sell',
    order_type='Market',
    qty='30',
    marketUnit='quoteCoin'
)
```

## üîç –ê–õ–ì–û–†–ò–¢–ú –ü–û–ò–°–ö–ê –°–ê–ú–û–ì–û –î–ï–®–ï–í–û–ì–û –ê–ö–¢–ò–í–ê

### –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞:
1. **–ù–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω**: –∏—Å–∫–ª—é—á–∞–µ–º USDT, USDC, BUSD, DAI
2. **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å**: `walletBalance > 0`
3. **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å**: `usdValue > 1.0` (–º–∏–Ω–∏–º—É–º $1)
4. **–¢–æ—Ä–≥—É–µ–º–æ—Å—Ç—å**: –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–∞—Ä–∞ —Å USDT

### –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞:
```python
def find_cheapest_asset(balance_data):
    """–ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤
    tradeable_coins = []
    for coin in balance_data['coins']:
        coin_name = coin.get('coin', '')
        wallet_balance = float(coin.get('walletBalance', 0))
        usd_value = float(coin.get('usdValue', 0))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞
        if (coin_name not in ['USDT', 'USDC', 'BUSD', 'DAI'] and 
            wallet_balance > 0 and usd_value > 1.0):
            
            tradeable_coins.append({
                'coin': coin_name,
                'balance': wallet_balance,
                'usd_value': usd_value,
                'symbol': coin_name + 'USDT'
            })
    
    if not tradeable_coins:
        return None
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç–∏–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π USD —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    return min(tradeable_coins, key=lambda c: c['usd_value'])

# –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
# {
#     'coin': 'ETH',
#     'balance': 0.004137,
#     'usd_value': 17.09,
#     'symbol': 'ETHUSDT'
# }
```

## ‚ö†Ô∏è –í–ê–ñ–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –¢–†–ï–ë–û–í–ê–ù–ò–Ø

### –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:
- **–û–±—â–∏–π –º–∏–Ω–∏–º—É–º**: $1 USD —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
- **–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ —Å—É–º–º—É**: 5 USDT (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)
- **–†—ã–Ω–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞**: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

### –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:
- **–°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã**: USDT, USDC, BUSD, DAI
- **–ú–µ–ª–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏**: –º–µ–Ω–µ–µ $1 USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏
- **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã**: —Å locked > 0

## üö® –ß–ê–°–¢–´–ï –û–®–ò–ë–ö–ò –ò –ò–• –†–ï–®–ï–ù–ò–Ø

### 1. "Insufficient balance"
**–ü—Ä–∏—á–∏–Ω–∞**: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É
**–†–µ—à–µ–Ω–∏–µ**: –£–º–µ–Ω—å—à–∏—Ç—å —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å marketUnit='baseCoin'

### 2. "Order value exceeded lower limit"
**–ü—Ä–∏—á–∏–Ω–∞**: –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
**–†–µ—à–µ–Ω–∏–µ**: –£–≤–µ–ª–∏—á–∏—Ç—å qty –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã —á–µ—Ä–µ–∑ API

### 3. "Symbol not found"
**–ü—Ä–∏—á–∏–Ω–∞**: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
**–†–µ—à–µ–Ω–∏–µ**: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ get_instruments_info

### 4. "No tradeable assets found"
**–ü—Ä–∏—á–∏–Ω–∞**: –í—Å–µ –∞–∫—Ç–∏–≤—ã –ª–∏–±–æ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã, –ª–∏–±–æ –º–µ–Ω–µ–µ $1
**–†–µ—à–µ–Ω–∏–µ**: –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–ª–∏ —Å–Ω–∏–∑–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç

## üìà –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–†–û–î–ê–ñ–ò

### –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:
```python
def check_sell_execution():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–æ–¥–∞–∂–∏"""
    executions = api_client.get_execution_list(
        category='spot',
        limit=10
    )
    
    sell_trades = []
    for execution in executions.get('list', []):
        if execution.get('side') == 'Sell':
            sell_trades.append({
                'symbol': execution.get('symbol'),
                'qty': execution.get('execQty'),
                'price': execution.get('execPrice'),
                'value': float(execution.get('execQty', 0)) * float(execution.get('execPrice', 0)),
                'time': execution.get('execTime')
            })
    
    return sell_trades
```

### –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏:
```python
def analyze_portfolio_after_sell():
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏"""
    balance = api_client.get_unified_balance_flat()
    
    portfolio_summary = {
        'total_usd': float(balance.get('total_wallet_usd', 0)),
        'available_usd': float(balance.get('total_available_usd', 0)),
        'assets_count': len([c for c in balance['coins'] if float(c.get('walletBalance', 0)) > 0]),
        'non_stablecoin_assets': len([
            c for c in balance['coins'] 
            if c.get('coin') not in ['USDT', 'USDC', 'BUSD', 'DAI'] 
            and float(c.get('walletBalance', 0)) > 0
        ])
    }
    
    return portfolio_summary
```

## üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ Bybit:

1. **–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**: –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ API
2. **–£–º–Ω—ã–π –≤—ã–±–æ—Ä**: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
3. **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**: `marketUnit='quoteCoin'` –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Å—É–º–º—É
4. **–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã**: –º–∏–Ω–∏–º—É–º $1 –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ $5
5. **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**: –ø–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ–µ–≤ API –∏ UI

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –∏ –ø—Ä–æ–¥–∞—Å—Ç —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –º–µ–ª–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏.

---
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**: 29.09.2025
**–°—Ç–∞—Ç—É—Å**: ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
**–í–µ—Ä—Å–∏—è API**: v5