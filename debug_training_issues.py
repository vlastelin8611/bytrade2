#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ–±—É—á–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

from src.api.bybit_client import BybitClient
from src.strategies.adaptive_ml import AdaptiveMLStrategy
from config import get_api_credentials
import json
import numpy as np
from collections import Counter
import statistics

def analyze_symbol_data(api_client, symbol, limit=1000):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}:")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        response = api_client.get_klines('linear', symbol, '1h', limit)
        
        if isinstance(response, dict) and 'result' in response and 'list' in response['result']:
            raw_klines = response['result']['list']
        elif isinstance(response, dict) and 'list' in response:
            raw_klines = response['list']
        else:
            raw_klines = response
            
        if not raw_klines:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return None
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        klines = []
        for item in raw_klines:
            klines.append({
                'timestamp': int(item[0]),
                'open': float(item[1]),
                'high': float(item[2]),
                'low': float(item[3]),
                'close': float(item[4]),
                'volume': float(item[5])
            })
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(klines)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å
        analysis = analyze_data_authenticity(klines)
        
        # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–∫
        labels_analysis = analyze_labels(klines)
        
        return {
            'symbol': symbol,
            'records_count': len(klines),
            'authenticity': analysis,
            'labels': labels_analysis
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        return None

def analyze_data_authenticity(klines):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"""
    if len(klines) < 10:
        return {'status': 'insufficient_data'}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –†–∞–∑—É–º–Ω—ã–µ —Ü–µ–Ω—ã
    prices = [k['close'] for k in klines]
    if any(p <= 0 for p in prices):
        return {'status': 'invalid_prices', 'issue': 'zero_or_negative_prices'}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –†–∞–∑—É–º–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    price_changes = []
    for i in range(1, len(prices)):
        change = abs(prices[i] - prices[i-1]) / prices[i-1]
        price_changes.append(change)
    
    avg_change = statistics.mean(price_changes)
    max_change = max(price_changes)
    
    # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if avg_change < 0.0001:
        return {'status': 'suspicious', 'issue': 'too_low_volatility', 'avg_change': avg_change}
    
    # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∂–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞
    if max_change > 0.5:
        return {'status': 'suspicious', 'issue': 'too_high_volatility', 'max_change': max_change}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å OHLC
    ohlc_errors = 0
    for k in klines:
        if not (k['low'] <= k['open'] <= k['high'] and 
                k['low'] <= k['close'] <= k['high']):
            ohlc_errors += 1
    
    if ohlc_errors > len(klines) * 0.01:  # –ë–æ–ª–µ–µ 1% –æ—à–∏–±–æ–∫
        return {'status': 'invalid', 'issue': 'ohlc_logic_errors', 'error_rate': ohlc_errors/len(klines)}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –û–±—ä–µ–º—ã
    volumes = [k['volume'] for k in klines]
    zero_volumes = sum(1 for v in volumes if v == 0)
    
    if zero_volumes > len(volumes) * 0.1:  # –ë–æ–ª–µ–µ 10% –Ω—É–ª–µ–≤—ã—Ö –æ–±—ä–µ–º–æ–≤
        return {'status': 'suspicious', 'issue': 'too_many_zero_volumes', 'zero_rate': zero_volumes/len(volumes)}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    timestamps = [k['timestamp'] for k in klines]
    time_diffs = []
    for i in range(1, len(timestamps)):
        diff = timestamps[i-1] - timestamps[i]  # –î–∞–Ω–Ω—ã–µ –∏–¥—É—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        time_diffs.append(diff)
    
    expected_diff = 3600000  # 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    irregular_intervals = sum(1 for d in time_diffs if abs(d - expected_diff) > 60000)  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã
    
    if irregular_intervals > len(time_diffs) * 0.05:  # –ë–æ–ª–µ–µ 5% –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        return {'status': 'suspicious', 'issue': 'irregular_time_intervals', 'irregular_rate': irregular_intervals/len(time_diffs)}
    
    return {
        'status': 'authentic',
        'avg_volatility': avg_change,
        'max_volatility': max_change,
        'ohlc_errors': ohlc_errors,
        'zero_volumes_rate': zero_volumes/len(volumes)
    }

def analyze_labels(klines):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫"""
    if len(klines) < 21:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–∫–Ω–æ–º 20
        return {'status': 'insufficient_data'}
    
    labels = []
    window = 20
    
    for j in range(window, len(klines) - 1):
        try:
            current_price = float(klines[j]['close'])
            future_price = float(klines[j + 1]['close'])
            change = (future_price - current_price) / current_price
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            volatility = abs(float(klines[j]['high']) - float(klines[j]['low'])) / current_price
            threshold = max(0.001, volatility * 0.5)
            
            if change > threshold:
                labels.append(1)  # —Ä–æ—Å—Ç
            elif change < -threshold:
                labels.append(-1)  # –ø–∞–¥–µ–Ω–∏–µ
            else:
                labels.append(0)  # –±–æ–∫–æ–≤–∏–∫
        except:
            continue
    
    if not labels:
        return {'status': 'no_labels'}
    
    label_counts = Counter(labels)
    unique_labels = len(label_counts)
    
    return {
        'status': 'success',
        'total_labels': len(labels),
        'unique_labels': unique_labels,
        'distribution': dict(label_counts),
        'balance_ratio': min(label_counts.values()) / max(label_counts.values()) if label_counts else 0
    }

def main():
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ–±—É—á–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    api_creds = get_api_credentials()
    api_client = BybitClient(
        api_creds['api_key'],
        api_creds['api_secret'],
        api_creds['testnet']
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
    print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤...")
    try:
        symbols_response = api_client.get_instruments_info('spot')
        if symbols_response:
            all_symbols = []
            for item in symbols_response:
                symbol = item.get('symbol', '')
                status = item.get('status', '')
                if symbol.endswith('USDT') and status == 'Trading':
                    all_symbols.append(symbol)
        else:
            all_symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT']
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_symbols)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ USDT")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        test_symbols = all_symbols[:10]
        print(f"\nüß™ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ {len(test_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
        
        results = []
        authentic_count = 0
        suspicious_count = 0
        invalid_count = 0
        
        for i, symbol in enumerate(test_symbols, 1):
            print(f"\n[{i}/{len(test_symbols)}] –ê–Ω–∞–ª–∏–∑ {symbol}...")
            result = analyze_symbol_data(api_client, symbol)
            
            if result:
                results.append(result)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏
                auth_status = result['authenticity']['status']
                if auth_status == 'authentic':
                    authentic_count += 1
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ª–∏–Ω–Ω—ã–µ")
                elif auth_status == 'suspicious':
                    suspicious_count += 1
                    print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {result['authenticity']['issue']}")
                else:
                    invalid_count += 1
                    print(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {result['authenticity']['issue']}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–∫
                labels_info = result['labels']
                if labels_info['status'] == 'success':
                    print(f"üìä –ú–µ—Ç–æ–∫: {labels_info['total_labels']}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {labels_info['unique_labels']}")
                    print(f"üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {labels_info['distribution']}")
                else:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–µ—Ç–∫–∞–º–∏: {labels_info['status']}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n" + "=" * 70)
        print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(results)}")
        print(f"‚úÖ –ü–æ–¥–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {authentic_count}")
        print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {suspicious_count}")
        print(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {invalid_count}")
        
        if suspicious_count > 0 or invalid_count > 0:
            print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏!")
            print(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.")
        else:
            print(f"\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –ø–æ–¥–ª–∏–Ω–Ω—ã–º–∏.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('training_diagnostics_results.json', 'w', encoding='utf-8') as f:
            json.dump({
                'total_symbols_available': len(all_symbols),
                'analyzed_symbols': len(results),
                'authenticity_stats': {
                    'authentic': authentic_count,
                    'suspicious': suspicious_count,
                    'invalid': invalid_count
                },
                'detailed_results': results
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ training_diagnostics_results.json")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()