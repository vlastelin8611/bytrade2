#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.api.bybit_client import BybitClient
from src.tools.ticker_data_loader import TickerDataLoader
from config import get_api_credentials
import json

def validate_symbols():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ TickerDataLoader –ø—Ä–æ—Ç–∏–≤ API Bybit"""
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
    api_key, api_secret, testnet = get_api_credentials()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = BybitClient(api_key, api_secret, testnet)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ TickerDataLoader
    loader = TickerDataLoader()
    ticker_data = loader.load_tickers_data()
    
    if not ticker_data or 'tickers' not in ticker_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ TickerDataLoader")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
    if isinstance(ticker_data['tickers'], dict):
        all_symbols = list(ticker_data['tickers'].keys())
    else:
        all_symbols = [ticker.get('symbol') for ticker in ticker_data['tickers'] if ticker.get('symbol')]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
    usdt_symbols = [s for s in all_symbols if s.endswith('USDT')]
    
    print(f"üìä –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ TickerDataLoader: {len(all_symbols)}")
    print(f"üìä USDT —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(usdt_symbols)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = ['spot', 'linear']
    supported_symbols = {}
    
    for category in categories:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'...")
        try:
            instruments = client.get_instruments_info(category=category)
            if instruments:
                category_symbols = []
                for instrument in instruments:
                    symbol = instrument.get('symbol', '')
                    status = instrument.get('status', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ USDT –ø–∞—Ä–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
                    if (symbol.endswith('USDT') and 
                        status == 'Trading'):
                        category_symbols.append(symbol)
                
                supported_symbols[category] = set(category_symbols)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(category_symbols)} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
            else:
                supported_symbols[category] = set()
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
        except Exception as e:
            supported_symbols[category] = set()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ TickerDataLoader
    valid_symbols = {}
    invalid_symbols = []
    
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ TickerDataLoader...")
    
    for symbol in usdt_symbols[:50]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        found_categories = []
        
        for category, category_symbols in supported_symbols.items():
            if symbol in category_symbols:
                found_categories.append(category)
        
        if found_categories:
            valid_symbols[symbol] = found_categories
        else:
            invalid_symbols.append(symbol)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {len(valid_symbols)}")
    print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {len(invalid_symbols)}")
    
    if valid_symbols:
        print(f"\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:")
        for symbol, categories in list(valid_symbols.items())[:10]:
            print(f"  {symbol}: {', '.join(categories)}")
    
    if invalid_symbols:
        print(f"\n‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:")
        for symbol in invalid_symbols[:10]:
            print(f"  {symbol}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    results = {
        'timestamp': ticker_data.get('timestamp'),
        'total_symbols': len(all_symbols),
        'usdt_symbols': len(usdt_symbols),
        'supported_symbols': {k: list(v) for k, v in valid_symbols.items()},
        'invalid_symbols': invalid_symbols,
        'categories_info': {k: len(v) for k, v in supported_symbols.items()}
    }
    
    with open('symbol_validation_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'symbol_validation_results.json'")
    
    return valid_symbols, invalid_symbols

if __name__ == "__main__":
    validate_symbols()