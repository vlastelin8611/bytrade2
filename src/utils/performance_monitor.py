"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import time
import psutil
import threading
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path
from collections import defaultdict, deque
import logging


class PerformanceMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.start_time = time.time()
        self.operation_times = defaultdict(list)
        self.operation_counts = defaultdict(int)
        self.error_counts = defaultdict(int)
        self.memory_usage = deque(maxlen=100)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
        self.cpu_usage = deque(maxlen=100)
        self.api_response_times = deque(maxlen=100)
        self.ml_analysis_times = deque(maxlen=100)
        self.trade_execution_times = deque(maxlen=100)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.total_api_calls = 0
        self.successful_api_calls = 0
        self.failed_api_calls = 0
        self.total_ml_analyses = 0
        self.successful_trades = 0
        self.failed_trades = 0
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        self.last_successful_trade = None
        self.last_api_error = None
        self.last_ml_analysis = None
        
        self._lock = threading.Lock()
    
    def record_operation_time(self, operation: str, duration_ms: float):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        with self._lock:
            self.operation_times[operation].append(duration_ms)
            self.operation_counts[operation] += 1
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            if len(self.operation_times[operation]) > 1000:
                self.operation_times[operation] = self.operation_times[operation][-500:]
    
    def record_error(self, operation: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        with self._lock:
            self.error_counts[operation] += 1
    
    def record_system_metrics(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        with self._lock:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
            process = psutil.Process()
            memory_mb = process.memory_info().rss / 1024 / 1024
            self.memory_usage.append(memory_mb)
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
            cpu_percent = process.cpu_percent()
            self.cpu_usage.append(cpu_percent)
    
    def get_average_time(self, operation: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        with self._lock:
            times = self.operation_times.get(operation, [])
            return sum(times) / len(times) if times else 0.0
    
    def get_operation_stats(self, operation: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        with self._lock:
            times = self.operation_times.get(operation, [])
            if not times:
                return {
                    'count': 0,
                    'avg_time_ms': 0.0,
                    'min_time_ms': 0.0,
                    'max_time_ms': 0.0,
                    'error_count': self.error_counts.get(operation, 0)
                }
            
            return {
                'count': len(times),
                'avg_time_ms': sum(times) / len(times),
                'min_time_ms': min(times),
                'max_time_ms': max(times),
                'error_count': self.error_counts.get(operation, 0),
                'success_rate': (len(times) / (len(times) + self.error_counts.get(operation, 0))) * 100
            }
    
    def get_system_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self._lock:
            uptime_seconds = time.time() - self.start_time
            
            return {
                'uptime_seconds': uptime_seconds,
                'uptime_formatted': str(timedelta(seconds=int(uptime_seconds))),
                'memory_usage_mb': {
                    'current': list(self.memory_usage)[-1] if self.memory_usage else 0,
                    'avg': sum(self.memory_usage) / len(self.memory_usage) if self.memory_usage else 0,
                    'max': max(self.memory_usage) if self.memory_usage else 0
                },
                'cpu_usage_percent': {
                    'current': list(self.cpu_usage)[-1] if self.cpu_usage else 0,
                    'avg': sum(self.cpu_usage) / len(self.cpu_usage) if self.cpu_usage else 0,
                    'max': max(self.cpu_usage) if self.cpu_usage else 0
                },
                'api_stats': {
                    'total_calls': self.total_api_calls,
                    'successful_calls': self.successful_api_calls,
                    'failed_calls': self.failed_api_calls,
                    'success_rate': (self.successful_api_calls / self.total_api_calls * 100) if self.total_api_calls > 0 else 0
                },
                'trading_stats': {
                    'total_ml_analyses': self.total_ml_analyses,
                    'successful_trades': self.successful_trades,
                    'failed_trades': self.failed_trades,
                    'last_successful_trade': self.last_successful_trade.isoformat() if self.last_successful_trade else None,
                    'last_ml_analysis': self.last_ml_analysis.isoformat() if self.last_ml_analysis else None
                }
            }


class PerformanceMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, log_file: Optional[Path] = None):
        self.metrics = PerformanceMetrics()
        self.logger = logging.getLogger(__name__)
        self.log_file = log_file
        self.monitoring_active = False
        self.monitoring_thread = None
        self.monitoring_interval = 30  # —Å–µ–∫—É–Ω–¥
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if self.log_file:
            self.log_file.parent.mkdir(parents=True, exist_ok=True)
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if self.monitoring_active:
            return
        
        self.monitoring_active = True
        self.monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self.monitoring_thread.start()
        self.logger.info("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.monitoring_active = False
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=5)
        self.logger.info("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring_active:
            try:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                self.metrics.record_system_metrics()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if int(time.time()) % 300 == 0:
                    self._log_performance_summary()
                
                time.sleep(self.monitoring_interval)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(self.monitoring_interval)
    
    def record_api_call(self, operation: str, duration_ms: float, success: bool = True):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ API –≤—ã–∑–æ–≤–∞"""
        self.metrics.record_operation_time(f"api_{operation}", duration_ms)
        self.metrics.total_api_calls += 1
        
        if success:
            self.metrics.successful_api_calls += 1
        else:
            self.metrics.failed_api_calls += 1
            self.metrics.record_error(f"api_{operation}")
            self.metrics.last_api_error = datetime.now()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API
        self.metrics.api_response_times.append(duration_ms)
    
    def record_ml_analysis(self, symbol: str, duration_ms: float, success: bool = True):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ ML –∞–Ω–∞–ª–∏–∑–∞"""
        self.metrics.record_operation_time("ml_analysis", duration_ms)
        self.metrics.total_ml_analyses += 1
        self.metrics.last_ml_analysis = datetime.now()
        
        if not success:
            self.metrics.record_error("ml_analysis")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è ML –∞–Ω–∞–ª–∏–∑–∞
        self.metrics.ml_analysis_times.append(duration_ms)
    
    def record_trade_execution(self, symbol: str, duration_ms: float, success: bool = True):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.metrics.record_operation_time("trade_execution", duration_ms)
        
        if success:
            self.metrics.successful_trades += 1
            self.metrics.last_successful_trade = datetime.now()
        else:
            self.metrics.failed_trades += 1
            self.metrics.record_error("trade_execution")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.metrics.trade_execution_times.append(duration_ms)
    
    def record_operation(self, operation: str, duration_ms: float, success: bool = True):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.metrics.record_operation_time(operation, duration_ms)
        
        if not success:
            self.metrics.record_error(operation)
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        summary = {
            'timestamp': datetime.now().isoformat(),
            'system_stats': self.metrics.get_system_stats(),
            'operation_stats': {}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ü–∏—è–º
        all_operations = set(self.metrics.operation_times.keys()) | set(self.metrics.error_counts.keys())
        for operation in all_operations:
            summary['operation_stats'][operation] = self.metrics.get_operation_stats(operation)
        
        return summary
    
    def _log_performance_summary(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            summary = self.get_performance_summary()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
            system_stats = summary['system_stats']
            self.logger.info(
                f"üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: "
                f"–ü–∞–º—è—Ç—å: {system_stats['memory_usage_mb']['current']:.1f}MB, "
                f"CPU: {system_stats['cpu_usage_percent']['current']:.1f}%, "
                f"API —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {system_stats['api_stats']['success_rate']:.1f}%, "
                f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_stats['uptime_formatted']}"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
            if self.log_file:
                with open(self.log_file, 'a', encoding='utf-8') as f:
                    f.write(json.dumps(summary, ensure_ascii=False, indent=2) + '\n')
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def get_alerts(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        alerts = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            if self.metrics.memory_usage:
                current_memory = list(self.metrics.memory_usage)[-1]
                if current_memory > 500:  # –ë–æ–ª–µ–µ 500MB
                    alerts.append({
                        'type': 'memory_high',
                        'severity': 'warning',
                        'message': f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {current_memory:.1f}MB',
                        'value': current_memory
                    })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
            if self.metrics.cpu_usage:
                current_cpu = list(self.metrics.cpu_usage)[-1]
                if current_cpu > 80:  # –ë–æ–ª–µ–µ 80%
                    alerts.append({
                        'type': 'cpu_high',
                        'severity': 'warning',
                        'message': f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {current_cpu:.1f}%',
                        'value': current_cpu
                    })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å API –≤—ã–∑–æ–≤–æ–≤
            if self.metrics.total_api_calls > 10:
                success_rate = (self.metrics.successful_api_calls / self.metrics.total_api_calls) * 100
                if success_rate < 90:  # –ú–µ–Ω–µ–µ 90% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                    alerts.append({
                        'type': 'api_errors',
                        'severity': 'error',
                        'message': f'–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å API: {success_rate:.1f}%',
                        'value': success_rate
                    })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API
            if self.metrics.api_response_times:
                avg_response_time = sum(self.metrics.api_response_times) / len(self.metrics.api_response_times)
                if avg_response_time > 5000:  # –ë–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥
                    alerts.append({
                        'type': 'api_slow',
                        'severity': 'warning',
                        'message': f'–ú–µ–¥–ª–µ–Ω–Ω—ã–µ API –æ—Ç–≤–µ—Ç—ã: {avg_response_time:.0f}ms',
                        'value': avg_response_time
                    })
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")
        
        return alerts


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
_performance_monitor = None


def get_performance_monitor() -> PerformanceMonitor:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    global _performance_monitor
    if _performance_monitor is None:
        log_file = Path("logs") / "performance" / f"performance_{datetime.now().strftime('%Y%m%d')}.json"
        _performance_monitor = PerformanceMonitor(log_file)
    return _performance_monitor


def start_performance_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    monitor = get_performance_monitor()
    monitor.start_monitoring()


def stop_performance_monitoring():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    global _performance_monitor
    if _performance_monitor:
        _performance_monitor.stop_monitoring()


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
def measure_performance(operation_name: str = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            op_name = operation_name or f"{func.__module__}.{func.__name__}"
            start_time = time.time()
            success = True
            
            try:
                result = func(*args, **kwargs)
                return result
            except Exception as e:
                success = False
                raise
            finally:
                duration_ms = (time.time() - start_time) * 1000
                monitor = get_performance_monitor()
                monitor.record_operation(op_name, duration_ms, success)
        
        return wrapper
    return decorator