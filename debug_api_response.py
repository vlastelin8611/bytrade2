#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ API –æ—Ç–≤–µ—Ç–æ–≤ Bybit
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—á–µ–º—É API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 3 –∑–∞–ø–∏—Å–∏
"""

import sys
import os
import json
import requests
import time
import hmac
import hashlib
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from config import get_api_credentials
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config: {e}")
    sys.exit(1)

class APIDebugger:
    """–û—Ç–ª–∞–¥—á–∏–∫ API –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.api_creds = get_api_credentials()
        self.api_key = self.api_creds['api_key']
        self.api_secret = self.api_creds['api_secret']
        self.testnet = self.api_creds['testnet']
        
        # URL –¥–ª—è testnet –∏ mainnet
        if self.testnet:
            self.base_url = "https://api-testnet.bybit.com"
        else:
            self.base_url = "https://api.bybit.com"
        
        print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–∞–¥—á–∏–∫–∞ API")
        print(f"   Testnet: {self.testnet}")
        print(f"   Base URL: {self.base_url}")
    
    def _generate_signature(self, timestamp: str, payload: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è API"""
        message = timestamp + self.api_key + "5000" + payload
        signature = hmac.new(
            self.api_secret.encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        return signature
    
    def _get_server_time(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            url = f"{self.base_url}/v5/market/time"
            response = requests.get(url, timeout=5)
            response.raise_for_status()
            data = response.json()
            if data.get('retCode') == 0:
                return int(data.get('result', {}).get('timeSecond', 0)) * 1000
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return int(time.time() * 1000)
    
    def debug_klines_request(self, symbol: str = 'BTCUSDT', interval: str = '240', limit: int = 200, category: str = 'spot'):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ klines"""
        print(f"\nüîç –û—Ç–ª–∞–¥–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ klines:")
        print(f"   Symbol: {symbol}")
        print(f"   Interval: {interval}")
        print(f"   Limit: {limit}")
        print(f"   Category: {category}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        timestamp = str(self._get_server_time())
        params = {
            'category': category,
            'symbol': symbol,
            'interval': interval,
            'limit': limit
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è query string
        sorted_params = sorted(params.items())
        query_string = '&'.join([f"{k}={v}" for k, v in sorted_params])
        
        print(f"   Query string: {query_string}")
        print(f"   Timestamp: {timestamp}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
        signature = self._generate_signature(timestamp, query_string)
        print(f"   Signature: {signature[:20]}...")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            'X-BAPI-API-KEY': self.api_key,
            'X-BAPI-TIMESTAMP': timestamp,
            'X-BAPI-SIGN': signature,
            'X-BAPI-RECV-WINDOW': '5000',
            'Content-Type': 'application/json'
        }
        
        # URL –∑–∞–ø—Ä–æ—Å–∞
        url = f"{self.base_url}/v5/market/kline"
        print(f"   URL: {url}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            print(f"\nüì° –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            response = requests.get(url, params=params, headers=headers, timeout=10)
            
            print(f"   Status Code: {response.status_code}")
            print(f"   Response Headers: {dict(response.headers)}")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            try:
                data = response.json()
                print(f"\nüìä –û—Ç–≤–µ—Ç API:")
                print(f"   retCode: {data.get('retCode')}")
                print(f"   retMsg: {data.get('retMsg')}")
                
                result = data.get('result', {})
                print(f"   result keys: {list(result.keys())}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ klines
                klines_list = result.get('list', [])
                print(f"   klines count: {len(klines_list)}")
                
                if klines_list:
                    print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö klines:")
                    print(f"   –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {klines_list[0]}")
                    if len(klines_list) > 1:
                        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {klines_list[-1]}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                    timestamps = []
                    for kline in klines_list:
                        try:
                            ts = int(kline[0])  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - timestamp
                            timestamps.append(ts)
                        except (ValueError, IndexError):
                            pass
                    
                    if timestamps:
                        timestamps.sort()
                        start_time = datetime.fromtimestamp(timestamps[0] / 1000)
                        end_time = datetime.fromtimestamp(timestamps[-1] / 1000)
                        print(f"   –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_time} - {end_time}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
                        if len(timestamps) > 1:
                            intervals = []
                            for i in range(1, len(timestamps)):
                                interval_ms = timestamps[i] - timestamps[i-1]
                                intervals.append(interval_ms)
                            
                            avg_interval = sum(intervals) / len(intervals)
                            print(f"   –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏: {avg_interval/1000/60:.1f} –º–∏–Ω—É—Ç")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
                if 'category' in result:
                    print(f"   category: {result['category']}")
                if 'symbol' in result:
                    print(f"   symbol: {result['symbol']}")
                
                return data
                
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"   Raw response: {response.text[:500]}...")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def test_different_parameters(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        test_cases = [
            # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
            {'symbol': 'BTCUSDT', 'interval': '240', 'limit': 200, 'category': 'spot'},
            {'symbol': 'BTCUSDT', 'interval': '240', 'limit': 1000, 'category': 'spot'},
            {'symbol': 'BTCUSDT', 'interval': '240', 'limit': 50, 'category': 'spot'},
            
            # –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            {'symbol': 'BTCUSDT', 'interval': '60', 'limit': 200, 'category': 'spot'},
            {'symbol': 'BTCUSDT', 'interval': 'D', 'limit': 200, 'category': 'spot'},
            {'symbol': 'BTCUSDT', 'interval': '15', 'limit': 200, 'category': 'spot'},
            
            # –†–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            {'symbol': 'BTCUSDT', 'interval': '240', 'limit': 200, 'category': 'linear'},
            
            # –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            {'symbol': 'ETHUSDT', 'interval': '240', 'limit': 200, 'category': 'spot'},
            {'symbol': 'ADAUSDT', 'interval': '240', 'limit': 200, 'category': 'spot'},
        ]
        
        results = []
        for i, test_case in enumerate(test_cases):
            print(f"\n--- –¢–µ—Å—Ç {i+1}/{len(test_cases)} ---")
            result = self.debug_klines_request(**test_case)
            
            if result:
                klines_count = len(result.get('result', {}).get('list', []))
                results.append({
                    'test_case': test_case,
                    'klines_count': klines_count,
                    'success': True
                })
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {klines_count} –∑–∞–ø–∏—Å–µ–π")
            else:
                results.append({
                    'test_case': test_case,
                    'klines_count': 0,
                    'success': False
                })
                print(f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
        
        # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, result in enumerate(results):
            status = "‚úÖ" if result['success'] else "‚ùå"
            test_case = result['test_case']
            count = result['klines_count']
            print(f"   {status} –¢–µ—Å—Ç {i+1}: {test_case['symbol']} {test_case['interval']} {test_case['category']} -> {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('api_debug_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        return results
    
    def check_api_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
        try:
            url = f"{self.base_url}/v5/market/time"
            response = requests.get(url, timeout=5)
            data = response.json()
            
            if data.get('retCode') == 0:
                server_time = int(data.get('result', {}).get('timeSecond', 0))
                local_time = int(time.time())
                time_diff = abs(server_time - local_time)
                
                print(f"   ‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.fromtimestamp(server_time)}")
                print(f"   ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.fromtimestamp(local_time)}")
                print(f"   ‚úÖ –†–∞–∑–Ω–∏—Ü–∞: {time_diff} —Å–µ–∫—É–Ω–¥")
                
                if time_diff > 5:
                    print(f"   ‚ö†Ô∏è –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã!")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {data}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        try:
            url = f"{self.base_url}/v5/market/instruments-info"
            params = {'category': 'spot', 'limit': 10}
            response = requests.get(url, params=params, timeout=10)
            data = response.json()
            
            if data.get('retCode') == 0:
                instruments = data.get('result', {}).get('list', [])
                print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (spot): {len(instruments)}")
                if instruments:
                    print(f"   ‚úÖ –ü—Ä–∏–º–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {instruments[0].get('symbol')}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {data}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    debugger = APIDebugger()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
    debugger.check_api_status()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    debugger.test_different_parameters()
    
    print(f"\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ api_debug_results.json")

if __name__ == "__main__":
    main()