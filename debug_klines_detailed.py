#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ klines –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

from config import get_api_credentials
from src.api.bybit_client import BybitClient
import json

def debug_klines_detailed():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ klines"""
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ klines –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    try:
        api_creds = get_api_credentials()
        client = BybitClient(
            api_creds['api_key'],
            api_creds['api_secret'],
            api_creds['testnet']
        )
        print("‚úÖ BybitClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BybitClient: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    symbol = "BTCUSDT"
    category = "spot"
    interval = "240"
    limit = 10
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {symbol} ({category}, {interval}, limit={limit})")
    print("-" * 50)
    
    # 1. –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ _make_request
    print("1Ô∏è‚É£ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ _make_request:")
    try:
        raw_response = client._make_request('GET', '/v5/market/kline', {
            'category': category,
            'symbol': symbol,
            'interval': interval,
            'limit': limit
        })
        print(f"   –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(raw_response)}")
        print(f"   –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(raw_response.keys()) if isinstance(raw_response, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
        
        if isinstance(raw_response, dict) and 'result' in raw_response:
            result = raw_response['result']
            print(f"   –¢–∏–ø result: {type(result)}")
            print(f"   –ö–ª—é—á–∏ result: {list(result.keys()) if isinstance(result, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
            
            if isinstance(result, dict) and 'list' in result:
                klines_list = result['list']
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ klines: {len(klines_list)}")
                if klines_list:
                    print(f"   –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {klines_list[0]}")
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {klines_list[-1]}")
            else:
                print(f"   –ù–µ—Ç 'list' –≤ result: {result}")
        else:
            print(f"   –ù–µ—Ç 'result' –≤ –æ—Ç–≤–µ—Ç–µ: {raw_response}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 2. –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ get_klines
    print("\n2Ô∏è‚É£ –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ get_klines:")
    try:
        klines_response = client.get_klines(
            category=category,
            symbol=symbol,
            interval=interval,
            limit=limit
        )
        print(f"   –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(klines_response)}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {klines_response}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç get_klines
        if isinstance(klines_response, dict):
            print(f"   –ö–ª—é—á–∏: {list(klines_response.keys())}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ trainer_console.py
            if 'result' in klines_response and 'list' in klines_response['result']:
                actual_klines = klines_response['result']['list']
                print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ klines: {len(actual_klines)} –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"   –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å klines –∏–∑ –æ—Ç–≤–µ—Ç–∞")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ trainer_console.py –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç
    print("\n3Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ trainer_console.py:")
    try:
        klines = client.get_klines(
            symbol=symbol,
            interval='4h',
            limit=1000,
            category=category
        )
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç get_klines: —Ç–∏–ø={type(klines)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∏–∑ trainer_console.py: if klines and len(klines) > 0
        if klines and len(klines) > 0:
            print(f"   ‚úÖ –£—Å–ª–æ–≤–∏–µ 'klines and len(klines) > 0' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(klines)}")
        else:
            print(f"   ‚ùå –£—Å–ª–æ–≤–∏–µ 'klines and len(klines) > 0' –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            print(f"       klines = {klines}")
            print(f"       len(klines) = {len(klines) if klines else 'klines is None/False'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ trainer_console.py –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ klines
        # –ù–æ get_klines –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º API
        if isinstance(klines, dict) and 'result' in klines and 'list' in klines['result']:
            actual_data = klines['result']['list']
            print(f"   üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(actual_data)} –∑–∞–ø–∏—Å–µ–π")
            print(f"   üîß –ü–†–û–ë–õ–ï–ú–ê: trainer_console.py –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å!")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüéØ –í–´–í–û–î–´:")
    print("=" * 60)
    print("1. API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è")
    print("2. get_klines –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API (—Å–ª–æ–≤–∞—Ä—å)")
    print("3. trainer_console.py –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ klines, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å")
    print("4. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞ –≤ trainer_console.py")

if __name__ == "__main__":
    debug_klines_detailed()