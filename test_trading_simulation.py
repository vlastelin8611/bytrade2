#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from strategies.adaptive_ml import AdaptiveMLStrategy
from config import get_ml_config
import json
from datetime import datetime

class MockBybitClient:
    """–ú–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ API Bybit"""
    
    def __init__(self, api_key, api_secret):
        self.api_key = api_key
        self.api_secret = api_secret
        # –°–∏–º—É–ª—è—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
        self.balance = {
            'USDT': 100.0,  # 100 USDT –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'BTC': 0.0,
            'ETH': 0.0,
            'ATOM': 0.0
        }
        self.orders = []
        self.positions = []
    
    def get_wallet_balance(self, account_type="UNIFIED"):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        coins = []
        for coin, balance in self.balance.items():
            if balance > 0:
                coins.append({
                    'coin': coin,
                    'walletBalance': str(balance),
                    'availableToWithdraw': str(balance * 0.9),  # 90% –¥–æ—Å—Ç—É–ø–Ω–æ
                    'usdValue': str(balance if coin == 'USDT' else balance * 50000)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞
                })
        
        return {
            'retCode': 0,
            'retMsg': 'OK',
            'result': {
                'list': [{
                    'accountType': 'UNIFIED',
                    'totalEquity': str(sum(self.balance.values())),
                    'totalAvailableBalance': str(sum(self.balance.values()) * 0.9),
                    'coin': coins
                }]
            }
        }
    
    def get_klines(self, symbol, interval, limit=1000):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è klines"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import time
        current_time = int(time.time() * 1000)
        klines = []
        
        for i in range(limit):
            timestamp = current_time - (i * 4 * 60 * 60 * 1000)  # 4h –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            open_price = 50000 + (i % 100) * 10
            close_price = open_price + (-50 + (i % 100))
            high_price = max(open_price, close_price) + 20
            low_price = min(open_price, close_price) - 20
            volume = 100 + (i % 50)
            
            klines.append([
                str(timestamp),
                str(open_price),
                str(high_price),
                str(low_price),
                str(close_price),
                str(volume),
                str(timestamp + 4 * 60 * 60 * 1000)
            ])
        
        return {
            'retCode': 0,
            'retMsg': 'OK',
            'result': {
                'list': klines
            }
        }
    
    def place_order(self, symbol, side, order_type, qty, price=None):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if side == 'Buy':
            required_usdt = float(qty) * (float(price) if price else 50000)
            if self.balance['USDT'] < required_usdt:
                return {
                    'retCode': 10001,
                    'retMsg': 'Insufficient balance',
                    'result': {}
                }
            # –°–ø–∏—Å—ã–≤–∞–µ–º USDT
            self.balance['USDT'] -= required_usdt
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—É–ø–ª–µ–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É
            coin = symbol.replace('USDT', '')
            self.balance[coin] = self.balance.get(coin, 0) + float(qty)
        
        elif side == 'Sell':
            coin = symbol.replace('USDT', '')
            if self.balance.get(coin, 0) < float(qty):
                return {
                    'retCode': 10001,
                    'retMsg': 'Insufficient balance',
                    'result': {}
                }
            # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É
            self.balance[coin] -= float(qty)
            # –î–æ–±–∞–≤–ª—è–µ–º USDT
            received_usdt = float(qty) * (float(price) if price else 50000)
            self.balance['USDT'] += received_usdt
        
        order_id = f"order_{len(self.orders) + 1}"
        order = {
            'orderId': order_id,
            'symbol': symbol,
            'side': side,
            'orderType': order_type,
            'qty': qty,
            'price': price,
            'status': 'Filled'
        }
        self.orders.append(order)
        
        return {
            'retCode': 0,
            'retMsg': 'OK',
            'result': order
        }

class MockDBManager:
    """–ú–æ–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    def log_analysis(self, *args, **kwargs):
        pass

class MockConfigManager:
    """–ú–æ–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    def get_config(self, key, default=None):
        return default

def test_trading_simulation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
    print("=== –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç
    mock_client = MockBybitClient("test_key", "test_secret")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    print("\nüí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:")
    balance_response = mock_client.get_wallet_balance()
    if balance_response['retCode'] == 0:
        for coin_info in balance_response['result']['list'][0]['coin']:
            print(f"   {coin_info['coin']}: {coin_info['walletBalance']}")
    
    # –°–æ–∑–¥–∞–µ–º ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    ml_config = get_ml_config()
    mock_db = MockDBManager()
    mock_config = MockConfigManager()
    strategy = AdaptiveMLStrategy("test_strategy", ml_config, mock_client, mock_db, mock_config)
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞ –º–æ–∫ (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ)
    # strategy.client = mock_client
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è...")
    symbols = ['BTCUSDT', 'ETHUSDT']
    
    for symbol in symbols:
        print(f"\n   –û–±—É—á–µ–Ω–∏–µ –¥–ª—è {symbol}...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            klines_response = mock_client.get_klines(symbol, '4h', 1000)
            if klines_response['retCode'] == 0:
                klines = klines_response['result']['list']
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} klines")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
                training_result = strategy.train_on_historical_data(symbol, klines)
                if training_result:
                    print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –¥–ª—è {symbol}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {symbol}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ {symbol}: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
    print("\n   –¢–µ—Å—Ç 1: –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É BTCUSDT")
    try:
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
        order_result = mock_client.place_order(
            symbol='BTCUSDT',
            side='Buy',
            order_type='Market',
            qty='0.001',  # –ü–æ–∫—É–ø–∞–µ–º 0.001 BTC
            price='50000'
        )
        
        if order_result['retCode'] == 0:
            print(f"   ‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order_result['result']['orderId']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order_result['retMsg']}")
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
    print("\nüí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    balance_response = mock_client.get_wallet_balance()
    if balance_response['retCode'] == 0:
        for coin_info in balance_response['result']['list'][0]['coin']:
            print(f"   {coin_info['coin']}: {coin_info['walletBalance']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
    print("\n   –¢–µ—Å—Ç 2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å –Ω–∞ —Å—É–º–º—É –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        order_result = mock_client.place_order(
            symbol='BTCUSDT',
            side='Buy',
            order_type='Market',
            qty='10',  # –ü–æ–∫—É–ø–∞–µ–º 10 BTC (–±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å USDT)
            price='50000'
        )
        
        if order_result['retCode'] == 0:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –æ—Ä–¥–µ—Ä –ø—Ä–æ—à–µ–ª –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤")
        else:
            print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {order_result['retMsg']}")
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    test_trading_simulation()