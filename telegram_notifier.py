"""
Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""
import asyncio
import logging
import threading
import time
from datetime import datetime
from queue import Queue
from typing import Dict, Callable, Optional, Any

try:
    from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
    from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
    TELEGRAM_AVAILABLE = True
    DEFAULT_TYPE = ContextTypes.DEFAULT_TYPE
except ImportError:
    TELEGRAM_AVAILABLE = False
    Bot = None
    InlineKeyboardButton = None
    InlineKeyboardMarkup = None
    Update = None
    Application = None
    CallbackQueryHandler = None
    CommandHandler = None
    ContextTypes = None
    DEFAULT_TYPE = Any


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, token: str, chat_id: str):
        if not TELEGRAM_AVAILABLE:
            raise ImportError("python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.token = token
        self.chat_id = chat_id
        self.bot = Bot(token=token)
        self.application = None
        self.callbacks: Dict[str, Callable] = {}
        self.message_queue = Queue()
        self.running = False
        self.thread = None
        self.polling_thread = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.messages_sent = 0
        self.errors_count = 0
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self._start_message_processor()
    
    def set_callback(self, callback_name: str, callback_func: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback —Ñ—É–Ω–∫—Ü–∏–∏"""
        self.logger.info(f"üîç DEBUG: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback '{callback_name}' -> {callback_func}")
        self.callbacks[callback_name] = callback_func
    
    def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤"""
        if not TELEGRAM_AVAILABLE:
            self.logger.error("Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        try:
            self.logger.info("üîç DEBUG: –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.application.add_handler(CallbackQueryHandler(self._handle_callback))
            self.application.add_handler(CommandHandler("balance", self._handle_balance_command))
            self.application.add_handler(CommandHandler("stop_trading", self._handle_stop_command))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.polling_thread = threading.Thread(target=self._run_polling, daemon=True)
            self.polling_thread.start()
            
            self.logger.info("‚úÖ Telegram polling –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            import traceback
            self.logger.error(f"üîç DEBUG: –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
    
    def _run_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ polling –ø–æ—Ç–æ–∫–µ: {e}")
    
    async def _handle_callback(self, update: Update, context: DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        try:
            callback_data = update.callback_query.data
            self.logger.info(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω callback: '{callback_data}'")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
            await update.callback_query.answer()
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            if callback_data in self.callbacks:
                self.logger.info(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è '{callback_data}'")
                callback_func = self.callbacks[callback_data]
                
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try:
                    result = callback_func()
                    if result:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await update.callback_query.message.reply_text(result)
                        self.logger.info(f"‚úÖ Callback '{callback_data}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Callback '{callback_data}' –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}"
                    await update.callback_query.message.reply_text(error_msg)
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback '{callback_data}': {e}")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: '{callback_data}'")
                await update.callback_query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            import traceback
            self.logger.error(f"üîç DEBUG: –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
    
    async def _handle_balance_command(self, update: Update, context: DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balance"""
        try:
            if 'get_balance' in self.callbacks:
                result = self.callbacks['get_balance']()
                await update.message.reply_text(result or "–ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    async def _handle_stop_command(self, update: Update, context: DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop_trading"""
        try:
            if 'stop_trading' in self.callbacks:
                result = self.callbacks['stop_trading']()
                await update.message.reply_text(result or "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
    
    def _start_message_processor(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.running = True
        self.thread = threading.Thread(target=self._process_messages, daemon=True)
        self.thread.start()
    
    def _process_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.running:
            try:
                if not self.message_queue.empty():
                    message_data = self.message_queue.get(timeout=1)
                    self._send_message_sync(message_data)
                else:
                    time.sleep(0.1)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                time.sleep(1)
    
    def _send_message_sync(self, message_data: Dict[str, Any]):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            loop.run_until_complete(self._send_message_async(message_data))
            
            self.messages_sent += 1
            
        except Exception as e:
            self.errors_count += 1
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        finally:
            loop.close()
    
    async def _send_message_async(self, message_data: Dict[str, Any]):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = message_data.get('text', '')
        reply_markup = message_data.get('reply_markup')
        
        await self.bot.send_message(
            chat_id=self.chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    def send_message(self, text: str, reply_markup=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        message_data = {
            'text': text,
            'reply_markup': reply_markup
        }
        self.message_queue.put(message_data)
    
    def send_test_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ callback_data
        inline_keyboard = [
            [
                InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="get_balance"),
                InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="stop_trading")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)
        
        test_text = f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        self.send_message(test_text, reply_markup)
    
    def notify_trade_executed(self, trade_info: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ"""
        symbol = trade_info.get('symbol', 'Unknown')
        side = trade_info.get('side', 'Unknown')
        amount = trade_info.get('amount', 0)
        price = trade_info.get('price', 0)
        confidence = trade_info.get('confidence', 0)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ callback_data
        inline_keyboard = [
            [
                InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="get_balance"),
                InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="stop_trading")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)
        
        text = f"""
üéØ <b>–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>
üìä –ü–∞—Ä–∞: {symbol}
üìà –¢–∏–ø: {side}
üí∞ –°—É–º–º–∞: ${amount:.2f}
üí≤ –¶–µ–Ω–∞: ${price:.6f}
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%
üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """.strip()
        
        self.send_message(text, reply_markup)
    
    def notify_balance_change(self, balance_info: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
        text = f"""
üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>
üíµ USDT: ${balance_info.get('usdt', 0):.2f}
üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """.strip()
        
        self.send_message(text)
    
    def notify_trading_status(self, status: str, message: str = ""):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        text = f"""
ü§ñ <b>–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏</b>
üìä {status}
{message}
üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """.strip()
        
        self.send_message(text)
    
    def notify_error(self, error_message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        text = f"""
‚ùå <b>–û—à–∏–±–∫–∞</b>
üîç {error_message}
üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """.strip()
        
        self.send_message(text)
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            'messages_sent': self.messages_sent,
            'errors_count': self.errors_count
        }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = False
        if self.application:
            try:
                self.application.stop()
            except:
                pass
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=2)
        
        if self.polling_thread and self.polling_thread.is_alive():
            self.polling_thread.join(timeout=2)