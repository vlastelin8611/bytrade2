#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –æ—Ä–¥–µ—Ä—É SOLUSDT
"""
import os
import sys
from pybit.unified_trading import HTTP

# –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏
keys_file = os.path.join(os.path.dirname(__file__), 'keys')
if os.path.exists(keys_file):
    with open(keys_file, 'r') as f:
        lines = f.read().strip().split('\n')
        api_key = lines[0].strip()
        api_secret = lines[1].strip()
else:
    print("‚ùå –§–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
client = HTTP(
    testnet=True,
    api_key=api_key,
    api_secret=api_secret,
)

print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ä–¥–µ—Ä—É SOLUSDT...")

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
try:
    instrument_info = client.get_instruments_info(category='spot', symbol='SOLUSDT')
    if instrument_info['retCode'] == 0:
        info = instrument_info['result']['list'][0]
        lot_size = info['lotSizeFilter']
        
        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ SOLUSDT:")
        print(f"   minOrderQty: {lot_size['minOrderQty']}")
        print(f"   minOrderAmt: {lot_size['minOrderAmt']}")
        print(f"   basePrecision: {lot_size['basePrecision']}")
        print(f"   quotePrecision: {lot_size['quotePrecision']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = client.get_tickers(category='spot', symbol='SOLUSDT')
        if ticker['retCode'] == 0:
            price = float(ticker['result']['list'][0]['lastPrice'])
            print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ SOLUSDT: ${price}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—É–º–º—ã
            test_amounts = [1.0, 5.0, 10.0, 15.0, 20.0]
            
            for amount in test_amounts:
                qty = amount / price
                # –û–∫—Ä—É–≥–ª—è–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ basePrecision
                precision = len(lot_size['basePrecision'].split('.')[-1]) if '.' in lot_size['basePrecision'] else 0
                qty_rounded = round(qty, precision)
                final_value = qty_rounded * price
                
                print(f"\nüßÆ –¢–µ—Å—Ç –¥–ª—è —Å—É–º–º—ã ${amount}:")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty_rounded}")
                print(f"   –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${final_value:.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                min_qty_ok = qty_rounded >= float(lot_size['minOrderQty'])
                min_amt_ok = final_value >= float(lot_size['minOrderAmt'])
                
                print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ OK: {min_qty_ok}")
                print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ OK: {min_amt_ok}")
                
                if min_qty_ok and min_amt_ok:
                    print(f"   ‚úÖ –û—Ä–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏")
                else:
                    print(f"   ‚ùå –û—Ä–¥–µ—Ä –Ω–µ –ø—Ä–æ–π–¥–µ—Ç")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")