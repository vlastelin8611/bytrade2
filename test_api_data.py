#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Bybit API
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from src.tools.ticker_data_loader import TickerDataLoader

def test_api_data():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Bybit API...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        loader = TickerDataLoader()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = loader.load_tickers_data()
        
        if not data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API")
            return
        
        tickers = data.get('tickers', {})
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º price24hPcnt –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        symbols_with_change = []
        symbols_without_change = []
        
        for symbol, ticker in tickers.items():
            price_change = float(ticker.get('price24hPcnt', 0))
            if price_change != 0:
                symbols_with_change.append((symbol, price_change))
            else:
                symbols_without_change.append(symbol)
        
        print(f"\nüìä –°–∏–º–≤–æ–ª—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã: {len(symbols_with_change)}")
        print(f"üìä –°–∏–º–≤–æ–ª—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {len(symbols_without_change)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 —Å–∏–º–≤–æ–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã
        if symbols_with_change:
            symbols_with_change.sort(key=lambda x: abs(x[1]), reverse=True)
            print("\nüî• –¢–æ–ø-10 —Å–∏–º–≤–æ–ª–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã:")
            for i, (symbol, change) in enumerate(symbols_with_change[:10]):
                print(f"  {i+1}. {symbol}: {change}%")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if symbols_without_change:
            print(f"\n‚ö™ –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:")
            for i, symbol in enumerate(symbols_without_change[:10]):
                ticker = tickers[symbol]
                print(f"  {i+1}. {symbol}: lastPrice={ticker.get('lastPrice')}, prevPrice24h={ticker.get('prevPrice24h')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        popular_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
        print(f"\nüéØ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:")
        for symbol in popular_symbols:
            if symbol in tickers:
                ticker = tickers[symbol]
                price_change = float(ticker.get('price24hPcnt', 0))
                print(f"  {symbol}: —Ü–µ–Ω–∞={ticker.get('lastPrice')}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ={price_change}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_api_data()