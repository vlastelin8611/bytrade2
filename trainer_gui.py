#!/usr/bin/env python3
"""
GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
–û—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π
"""

import sys
import os
import json
import time
from datetime import datetime
from typing import Dict, List, Optional
from pathlib import Path

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QPushButton, QProgressBar, QTableWidget, QTableWidgetItem,
    QTextEdit, QGroupBox, QGridLayout, QComboBox, QSpinBox, QDoubleSpinBox,
    QCheckBox, QSplitter, QTabWidget, QScrollArea
)
from PySide6.QtCore import QTimer, QThread, Signal, Qt
from PySide6.QtGui import QFont, QColor, QPalette

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from src.strategies.adaptive_ml import AdaptiveMLStrategy
    from src.api.bybit_client import BybitClient
    from config import get_api_credentials, get_ml_config
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")


class TrainingWorker(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    progress_updated = Signal(str, int)  # symbol, progress
    status_updated = Signal(str, str, float)  # symbol, status, accuracy
    log_updated = Signal(str)  # log message
    training_completed = Signal()

    def __init__(self, ml_strategy, symbols, symbol_categories=None):
        super().__init__()
        self.ml_strategy = ml_strategy
        self.symbols = symbols
        self.symbol_categories = symbol_categories or {}
        self.is_running = False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        self.is_running = True
        self.log_updated.emit("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_symbols = len(self.symbols)
        successful_trainings = 0
        failed_trainings = 0
        
        for i, symbol in enumerate(self.symbols):
            if not self.is_running:
                break
                
            try:
                self.log_updated.emit(f"üìä –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol} ({i+1}/{total_symbols})...")
                self.progress_updated.emit(symbol, 0)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                category = self.choose_category(symbol)
                klines = []
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
                try:
                    klines_response = self.ml_strategy.api_client.get_klines(category=category, symbol=symbol, interval='60', limit=1000)
                    if not klines_response or 'list' not in klines_response or not klines_response['list']:
                        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        available_categories = self.symbol_categories.get(symbol, [category])
                        alt_categories = [cat for cat in available_categories if cat != category]
                        
                        if alt_categories:
                            alt_category = alt_categories[0]
                            self.log_updated.emit(f"üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{alt_category}' –¥–ª—è {symbol}")
                            klines_response = self.ml_strategy.api_client.get_klines(category=alt_category, symbol=symbol, interval='60', limit=1000)
                        else:
                            self.log_updated.emit(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                    if klines_response and 'list' in klines_response and klines_response['list']:
                        klines_data = klines_response['list']
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        for kline in klines_data:
                            klines.append({
                                'open': float(kline[1]),
                                'high': float(kline[2]), 
                                'low': float(kline[3]),
                                'close': float(kline[4]),
                                'volume': float(kline[5])
                            })
                        self.log_updated.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} —á–µ—Ä–µ–∑ API")
                    else:
                        self.log_updated.emit(f"‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                        
                except Exception as e:
                    error_msg = str(e)
                    if "Category is invalid" in error_msg:
                        self.log_updated.emit(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è {symbol}: API –æ—à–∏–±–∫–∞: {error_msg}")
                    elif "Not supported symbols" in error_msg:
                        self.log_updated.emit(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: API –æ—à–∏–±–∫–∞: {error_msg}")
                    elif "Symbol Is Invalid" in error_msg:
                        self.log_updated.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: API –æ—à–∏–±–∫–∞: {error_msg}")
                    else:
                        self.log_updated.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: API –æ—à–∏–±–∫–∞: {error_msg}")
                
                # –ï—Å–ª–∏ API –Ω–µ –¥–∞–ª –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ TickerDataLoader
                if not klines or len(klines) < 100:
                    try:
                        if hasattr(self.ml_strategy, 'ticker_loader') and self.ml_strategy.ticker_loader:
                            historical_data = self.ml_strategy.ticker_loader.get_historical_data(symbol)
                            if historical_data and len(historical_data) > len(klines):
                                klines = historical_data
                                self.log_updated.emit(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è {symbol}: {len(klines)} –∑–∞–ø–∏—Å–µ–π")
                    except Exception as e:
                        self.log_updated.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è {symbol}: {e}")
                
                self.progress_updated.emit(symbol, 20)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                min_required = 30  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –º–∞–ª—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö
                if not klines or len(klines) < min_required:
                    self.status_updated.emit(symbol, f"–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ({len(klines) if klines else 0})", 0.0)
                    self.log_updated.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(klines) if klines else 0} < {min_required}")
                    failed_trainings += 1
                    continue
                
                self.progress_updated.emit(symbol, 40)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –º–µ—Ç–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
                features, labels = [], []
                window = self.ml_strategy.feature_window
                
                for j in range(window, len(klines) - 1):
                    if not self.is_running:
                        break
                        
                    try:
                        f = self.ml_strategy.extract_features(klines[j-window:j])
                        if f and len(f) > 0:
                            features.append(f)
                            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                            current_price = float(klines[j]['close'])
                            future_price = float(klines[j + 1]['close'])
                            change = (future_price - current_price) / current_price
                            
                            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                            volatility = abs(float(klines[j]['high']) - float(klines[j]['low'])) / current_price
                            threshold = max(0.001, volatility * 0.5)  # –ú–∏–Ω–∏–º—É–º 0.1%, –º–∞–∫—Å–∏–º—É–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                            
                            if change > threshold:
                                labels.append(1)  # —Ä–æ—Å—Ç
                            elif change < -threshold:
                                labels.append(-1)  # –ø–∞–¥–µ–Ω–∏–µ
                            else:
                                labels.append(0)  # –±–æ–∫–æ–≤–∏–∫
                    except Exception as e:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                
                self.progress_updated.emit(symbol, 60)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                min_features = 20  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –º–∞–ª—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö
                if len(features) < min_features:
                    self.status_updated.emit(symbol, f"–ú–∞–ª–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ({len(features)})", 0.0)
                    self.log_updated.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}: {len(features)} < {min_features}")
                    failed_trainings += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
                unique_labels = set(labels)
                if len(unique_labels) < 2:
                    self.status_updated.emit(symbol, "–ù–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –º–µ—Ç–æ–∫", 0.0)
                    self.log_updated.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –º–µ—Ç–æ–∫ –¥–ª—è {symbol}")
                    failed_trainings += 1
                    continue
                
                self.progress_updated.emit(symbol, 80)
                
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                success = self.ml_strategy.train_model(symbol, features, labels)
                
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
                    try:
                        self.ml_strategy.save_models()
                        
                        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
                        accuracy = self.ml_strategy.performance.get(symbol, {}).get('accuracy', 0.0)
                        samples = self.ml_strategy.performance.get(symbol, {}).get('samples', len(features))
                        
                        self.status_updated.emit(symbol, "–û–±—É—á–µ–Ω–∞", accuracy)
                        self.log_updated.emit(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –æ–±—É—á–µ–Ω–∞ (—Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%}, –æ–±—Ä–∞–∑—Ü–æ–≤: {samples})")
                        successful_trainings += 1
                        
                    except Exception as e:
                        self.log_updated.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}: {e}")
                        self.status_updated.emit(symbol, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 0.0)
                        failed_trainings += 1
                else:
                    self.status_updated.emit(symbol, "–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è", 0.0)
                    self.log_updated.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}")
                    failed_trainings += 1
                
                self.progress_updated.emit(symbol, 100)
                
            except Exception as e:
                self.status_updated.emit(symbol, f"–û—à–∏–±–∫–∞: {str(e)[:20]}", 0.0)
                self.log_updated.emit(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ {symbol}: {e}")
                failed_trainings += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.log_updated.emit(f"üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        self.log_updated.emit(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ {successful_trainings}, –æ—à–∏–±–æ–∫ {failed_trainings} –∏–∑ {total_symbols}")
        if successful_trainings > 0:
            success_rate = (successful_trainings / total_symbols) * 100
            self.log_updated.emit(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        self.training_completed.emit()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
        self.is_running = False
        
    def choose_category(self, symbol: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if symbol in self.symbol_categories:
            categories = self.symbol_categories[symbol]
            if categories:
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º spot, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if 'spot' in categories:
                    return 'spot'
                else:
                    return categories[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        # Fallback: –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
        if symbol.endswith('USDT') and not symbol.endswith('PERP'):
            return 'spot'
        elif symbol.endswith('PERP') or symbol.endswith('USD'):
            return 'linear'
        else:
            return 'spot'


class TrainingMonitor(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ML Training Monitor - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
        self.setGeometry(100, 100, 1200, 800)

        # –ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
        self.training_in_progress = False
        self.pending_training = False
        self.symbol_progress = {}
        self.expected_symbol_count = 0
        self.last_ticker_file_mtime = None
        self.ticker_data_file = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.init_ml_components()
        self.init_ui()
        self.setup_timers()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        self.load_symbols()

    def init_ml_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º API credentials
            api_creds = get_api_credentials()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
            self.bybit_client = BybitClient(
                api_creds['api_key'],
                api_creds['api_secret'],
                api_creds['testnet']
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TickerDataLoader –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            try:
                from src.tools.ticker_data_loader import TickerDataLoader
                self.ticker_loader = TickerDataLoader()
                self.ticker_data_file = self.ticker_loader.get_data_file_path()
                if self.ticker_data_file.exists():
                    self.last_ticker_file_mtime = self.ticker_data_file.stat().st_mtime
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TickerDataLoader: {e}")
                self.ticker_loader = None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            ml_config = get_ml_config()
            self.ml_strategy = AdaptiveMLStrategy(
                name="adaptive_ml",
                config=ml_config,
                api_client=self.bybit_client,
                db_manager=None,
                config_manager=None
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º TickerDataLoader –∫ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if self.ticker_loader:
                self.ml_strategy.ticker_loader = self.ticker_loader
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
            self.ml_strategy.load_models()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("ü§ñ ML Training Monitor")
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tab_widget = QTabWidget()
        main_layout.addWidget(tab_widget)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        training_tab = self.create_training_tab()
        tab_widget.addTab(training_tab, "üéØ –û–±—É—á–µ–Ω–∏–µ")
        
        # –í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_tab = self.create_monitoring_tab()
        tab_widget.addTab(monitoring_tab, "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_tab = self.create_settings_tab()
        tab_widget.addTab(settings_tab, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    def create_training_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º")
        control_layout = QHBoxLayout(control_group)
        
        self.train_button = QPushButton("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
        self.train_button.clicked.connect(self.start_training)
        control_layout.addWidget(self.train_button)
        
        self.stop_button = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_button.clicked.connect(self.stop_training)
        self.stop_button.setEnabled(False)
        control_layout.addWidget(self.stop_button)
        
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_button.clicked.connect(self.refresh_data)
        control_layout.addWidget(self.refresh_button)
        
        control_layout.addStretch()
        layout.addWidget(control_group)
        
        # –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è")
        status_layout = QVBoxLayout(status_group)
        
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é")
        status_layout.addWidget(self.status_label)
        
        self.overall_progress = QProgressBar()
        status_layout.addWidget(self.overall_progress)
        
        layout.addWidget(status_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        progress_group = QGroupBox("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
        progress_layout = QVBoxLayout(progress_group)
        
        self.progress_table = QTableWidget(0, 4)
        self.progress_table.setHorizontalHeaderLabels(["–°–∏–º–≤–æ–ª", "–ü—Ä–æ–≥—Ä–µ—Å—Å", "–°—Ç–∞—Ç—É—Å", "–¢–æ—á–Ω–æ—Å—Ç—å"])
        self.progress_table.horizontalHeader().setStretchLastSection(True)
        progress_layout.addWidget(self.progress_table)
        
        layout.addWidget(progress_group)
        
        return widget

    def create_monitoring_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π
        metrics_group = QGroupBox("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π")
        metrics_layout = QVBoxLayout(metrics_group)
        
        self.metrics_table = QTableWidget(0, 6)
        self.metrics_table.setHorizontalHeaderLabels([
            "–°–∏–º–≤–æ–ª", "–¢–æ—á–Ω–æ—Å—Ç—å", "Precision", "Recall", "F1-Score", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ"
        ])
        self.metrics_table.horizontalHeader().setStretchLastSection(True)
        metrics_layout.addWidget(self.metrics_table)
        
        layout.addWidget(metrics_group)
        
        # –õ–æ–≥–∏
        logs_group = QGroupBox("–õ–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è")
        logs_layout = QVBoxLayout(logs_group)
        
        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(200)
        self.log_text.setReadOnly(True)
        logs_layout.addWidget(self.log_text)
        
        layout.addWidget(logs_group)
        
        return widget

    def create_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ML
        ml_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        ml_layout = QGridLayout(ml_group)
        
        ml_layout.addWidget(QLabel("Feature Window:"), 0, 0)
        self.feature_window_spin = QSpinBox()
        self.feature_window_spin.setRange(5, 100)
        self.feature_window_spin.setValue(15)  # –£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ml_layout.addWidget(self.feature_window_spin, 0, 1)
        
        ml_layout.addWidget(QLabel("Confidence Threshold:"), 1, 0)
        self.confidence_spin = QDoubleSpinBox()
        self.confidence_spin.setRange(0.1, 0.9)
        self.confidence_spin.setSingleStep(0.05)
        self.confidence_spin.setValue(0.65)
        ml_layout.addWidget(self.confidence_spin, 1, 1)
        
        ml_layout.addWidget(QLabel("Model Type:"), 2, 0)
        self.model_combo = QComboBox()
        self.model_combo.addItems(["random_forest", "gradient_boosting", "neural_network"])
        ml_layout.addWidget(self.model_combo, 2, 1)
        
        self.use_indicators_check = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        self.use_indicators_check.setChecked(True)
        ml_layout.addWidget(self.use_indicators_check, 3, 0, 1, 2)
        
        layout.addWidget(ml_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
        symbols_group = QGroupBox("–°–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        symbols_layout = QVBoxLayout(symbols_group)
        
        self.symbols_text = QTextEdit()
        self.symbols_text.setMaximumHeight(100)
        self.symbols_text.setPlainText("BTCUSDT\nETHUSDT\nADAUSDT\nSOLUSDT\nDOTUSDT")
        symbols_layout.addWidget(self.symbols_text)
        
        layout.addWidget(symbols_group)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        save_button.clicked.connect(self.save_settings)
        layout.addWidget(save_button)
        
        layout.addStretch()
        
        return widget

    def setup_timers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤"""
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        self.metrics_timer = QTimer()
        self.metrics_timer.timeout.connect(self.update_metrics)
        self.metrics_timer.start(5000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        self.ticker_data_timer = QTimer()
        self.ticker_data_timer.timeout.connect(self.check_ticker_data_updates)
        self.ticker_data_timer.start(2000)

    def check_ticker_data_updates(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ."""
        if not self.ticker_loader:
            return

        try:
            data_file = self.ticker_data_file or self.ticker_loader.get_data_file_path()
            if not data_file.exists():
                return

            mtime = data_file.stat().st_mtime
            if self.last_ticker_file_mtime is None or mtime > self.last_ticker_file_mtime:
                self.last_ticker_file_mtime = mtime
                self.log("üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ.")
                self.handle_new_ticker_data()
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {e}")

    def handle_new_ticker_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ–∂–∏–µ —Ç–∏–∫–µ—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        try:
            if self.ticker_loader:
                self.ticker_loader.load_tickers_data()

            self.load_symbols()

            if not self.symbols:
                self.log("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç. –ê–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
                return

            if self.training_in_progress:
                self.pending_training = True
                self.log("‚è≥ –û–±—É—á–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.")
            else:
                self.start_training(auto=True)
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è –ø–æ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º: {e}")

    def extract_symbols_from_ticker_data(self, ticker_data) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤."""
        symbols = []
        suspicious_symbols = []

        if isinstance(ticker_data, dict):
            iterable = ticker_data.items()
        elif isinstance(ticker_data, list):
            iterable = ((entry.get('symbol'), entry) for entry in ticker_data if isinstance(entry, dict))
        else:
            return symbols

        seen = set()
        for symbol, payload in iterable:
            if not symbol or symbol in seen:
                continue

            seen.add(symbol)
            symbols.append(symbol)

            try:
                price = float(payload.get('lastPrice') or payload.get('last_price') or 0)
                volume = float(payload.get('volume') or payload.get('volume24h') or 0)
                if price <= 0 or volume < 0:
                    suspicious_symbols.append(symbol)
            except (TypeError, ValueError):
                suspicious_symbols.append(symbol)

        if suspicious_symbols:
            preview = ', '.join(suspicious_symbols[:10])
            self.log(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {preview}")

        return symbols

    def validate_symbols_with_api(self, symbols: List[str]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ API Bybit

        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        try:
            self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ API...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = ['spot', 'linear']
            supported_symbols = {}
            symbol_categories = {}

            for category in categories:
                try:
                    instruments = self.ml_strategy.api_client.get_instruments_info(category=category)
                    if instruments:
                        category_symbols = set()
                        for instrument in instruments:
                            symbol = instrument.get('symbol', '')
                            status = instrument.get('status', '')
                            
                            # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤
                            if (symbol.endswith('USDT') and 
                                status in ['Trading', 'PreLaunch']):
                                category_symbols.add(symbol)
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                supported_symbols.setdefault(category, set()).add(symbol)

                                if symbol not in symbol_categories:
                                    symbol_categories[symbol] = []
                                symbol_categories[symbol].append(category)

                        if category not in supported_symbols:
                            supported_symbols[category] = set()
                        self.log(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {len(supported_symbols[category])} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                    else:
                        supported_symbols[category] = set()
                        self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
                except Exception as e:
                    supported_symbols[category] = set()
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {e}")

            api_confirmed = set()
            for category_symbols in supported_symbols.values():
                api_confirmed.update(category_symbols)

            missing_confirmation = [symbol for symbol in symbols if symbol not in api_confirmed]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö; –¥–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            for symbol in symbols:
                if symbol not in symbol_categories:
                    symbol_categories[symbol] = ['spot']

            self.symbol_categories = symbol_categories

            confirmed_count = len(symbols) - len(missing_confirmation)
            self.log(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ API: {confirmed_count}")

            if missing_confirmation:
                preview = ', '.join(missing_confirmation[:10])
                self.log(f"‚ö†Ô∏è API –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª {len(missing_confirmation)} —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤: {preview}")

            return symbols

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ USDT —Å–∏–º–≤–æ–ª—ã
            usdt_symbols = [s for s in symbols if s.endswith('USDT')]
            self.symbol_categories = {symbol: ['spot'] for symbol in usdt_symbols}
            return usdt_symbols

    def load_symbols(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ API"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ TickerDataLoader
            if self.ticker_loader:
                ticker_data = self.ticker_loader.get_ticker_data()
                if ticker_data:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    all_symbols = self.extract_symbols_from_ticker_data(ticker_data)
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
                    usdt_symbols = [symbol for symbol in all_symbols if symbol.endswith('USDT')]
                    unique_symbols = sorted(set(usdt_symbols))
                    self.expected_symbol_count = len(unique_symbols)
                    self.log(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∏–∫–µ—Ä–æ–≤: {self.expected_symbol_count}")

                    if unique_symbols:
                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ API (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è)
                        validated_symbols = self.validate_symbols_with_api(unique_symbols)

                        self.symbols = validated_symbols
                        self.log(
                            f"‚úÖ –°–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(self.symbols)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ —Ç–∏–∫–µ—Ä–∞–º: {self.expected_symbol_count})"
                        )

                        if hasattr(self, 'symbols_text'):
                            self.symbols_text.setPlainText('\n'.join(self.symbols))

                        return
                    else:
                        self.log("‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ USDT-—Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    self.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –∏–∑ TickerDataLoader")
            
            # Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
            self.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API...")
            try:
                instruments = self.ml_strategy.api_client.get_instruments_info(category='spot')
                if instruments:
                    api_symbols = []
                    for instrument in instruments:
                        symbol = instrument.get('symbol', '')
                        status = instrument.get('status', '')
                        
                        if symbol.endswith('USDT') and status == 'Trading':
                            api_symbols.append(symbol)
                    
                    if api_symbols:
                        self.symbols = api_symbols  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 100 —Å–∏–º–≤–æ–ª–æ–≤
                        self.log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ API: {len(self.symbols)}")
                        
                        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–ª—è API —Å–∏–º–≤–æ–ª–æ–≤
                        self.symbol_categories = {symbol: ['spot'] for symbol in self.symbols}
                        return
                    
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ API: {e}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
            self.symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT']
            self.symbol_categories = {symbol: ['spot'] for symbol in self.symbols}
            self.log(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤: {len(self.symbols)}")
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            self.symbols = ['BTCUSDT', 'ETHUSDT']
            self.symbol_categories = {symbol: ['spot'] for symbol in self.symbols}

    def start_training(self, auto=False):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            if self.training_in_progress:
                if not auto:
                    self.log("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                return

            if auto:
                self.log("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            else:
                self.log("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")

            self.training_in_progress = True
            self.pending_training = False

            self.load_symbols()

            if not self.symbols:
                self.log("‚ö†Ô∏è –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                self.training_in_progress = False
                self.pending_training = False
                self.status_label.setText("‚ö†Ô∏è –ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_table.setRowCount(len(self.symbols))
            for i, symbol in enumerate(self.symbols):
                self.progress_table.setItem(i, 0, QTableWidgetItem(symbol))
                self.progress_table.setItem(i, 1, QTableWidgetItem("0%"))
                self.progress_table.setItem(i, 2, QTableWidgetItem("–û–∂–∏–¥–∞–Ω–∏–µ"))
                self.progress_table.setItem(i, 3, QTableWidgetItem("-"))

            self.symbol_progress = {symbol: 0 for symbol in self.symbols}
            self.overall_progress.setValue(0)

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—É—á–µ–Ω–∏—è
            self.training_worker = TrainingWorker(
                self.ml_strategy,
                self.symbols,
                getattr(self, 'symbol_categories', {})
            )
            self.training_worker.progress_updated.connect(self.update_progress)
            self.training_worker.status_updated.connect(self.update_status)
            self.training_worker.log_updated.connect(self.log)
            self.training_worker.training_completed.connect(self.training_finished)

            self.training_worker.start()

            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.train_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            if auto:
                self.status_label.setText("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")
            else:
                self.status_label.setText("üöÄ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")

        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")

    def stop_training(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
        if hasattr(self, 'training_worker'):
            self.training_worker.stop()
            self.training_finished()

    def training_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"""
        self.train_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.training_in_progress = False

        overall = 0
        if self.symbol_progress:
            overall = sum(self.symbol_progress.values()) / len(self.symbol_progress)
            self.overall_progress.setValue(int(overall))
        else:
            self.overall_progress.setValue(0)

        if overall >= 99.9:
            self.status_label.setText("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            self.log("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        else:
            self.status_label.setText("‚èπÔ∏è –û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.log("‚èπÔ∏è –û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")

        if hasattr(self, 'training_worker'):
            self.training_worker = None

        if self.pending_training:
            self.log("üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏")
            self.pending_training = False
            QTimer.singleShot(1000, lambda: self.start_training(auto=True))

    def update_progress(self, symbol: str, progress: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        for row in range(self.progress_table.rowCount()):
            if self.progress_table.item(row, 0).text() == symbol:
                self.progress_table.setItem(row, 1, QTableWidgetItem(f"{progress}%"))
                break

        if symbol in self.symbol_progress:
            self.symbol_progress[symbol] = progress
            total_symbols = len(self.symbol_progress)
            if total_symbols:
                overall = sum(self.symbol_progress.values()) / total_symbols
                self.overall_progress.setValue(int(overall))

    def update_status(self, symbol: str, status: str, accuracy: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        for row in range(self.progress_table.rowCount()):
            if self.progress_table.item(row, 0).text() == symbol:
                self.progress_table.setItem(row, 2, QTableWidgetItem(status))
                if accuracy > 0:
                    self.progress_table.setItem(row, 3, QTableWidgetItem(f"{accuracy:.2%}"))
                break

    def update_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–µ–π"""
        try:
            if not hasattr(self, 'ml_strategy'):
                return
                
            performance = self.ml_strategy.performance
            self.metrics_table.setRowCount(len(performance))
            
            for i, (symbol, metrics) in enumerate(performance.items()):
                self.metrics_table.setItem(i, 0, QTableWidgetItem(symbol))
                self.metrics_table.setItem(i, 1, QTableWidgetItem(f"{metrics.get('accuracy', 0):.2%}"))
                self.metrics_table.setItem(i, 2, QTableWidgetItem(f"{metrics.get('precision', 0):.2%}"))
                self.metrics_table.setItem(i, 3, QTableWidgetItem(f"{metrics.get('recall', 0):.2%}"))
                self.metrics_table.setItem(i, 4, QTableWidgetItem(f"{metrics.get('f1_score', 0):.2%}"))
                
                last_trained = metrics.get('last_trained', '–ù–∏–∫–æ–≥–¥–∞')
                if isinstance(last_trained, (int, float)):
                    last_trained = datetime.fromtimestamp(last_trained).strftime('%Y-%m-%d %H:%M')
                self.metrics_table.setItem(i, 5, QTableWidgetItem(str(last_trained)))
                
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.update_metrics()
        self.log("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if hasattr(self, 'ml_strategy'):
                self.ml_strategy.feature_window = self.feature_window_spin.value()
                self.ml_strategy.confidence_threshold = self.confidence_spin.value()
                self.ml_strategy.use_technical_indicators = self.use_indicators_check.isChecked()
            
            self.log("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        formatted_message = f"[{timestamp}] {message}"
        
        if hasattr(self, 'log_text'):
            self.log_text.append(formatted_message)
            # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            cursor = self.log_text.textCursor()
            cursor.movePosition(cursor.MoveOperation.End)
            self.log_text.setTextCursor(cursor)
        
        print(formatted_message)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = TrainingMonitor()
    window.show()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    sys.exit(app.exec())


if __name__ == "__main__":
    main()