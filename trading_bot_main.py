#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è Bybit
–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –≤ –Ω–∞—á–∞–ª–µ
sys.path.append(str(os.path.join(os.path.dirname(__file__), 'src')))

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config import get_api_credentials, get_trading_config, get_ml_config
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GUI
try:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PySide6
    import matplotlib
    matplotlib.use('Qt5Agg')  # –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PySide6
    
    from PySide6.QtWidgets import QApplication, QMainWindow, QMessageBox
    from PySide6.QtCore import Qt
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = QApplication.instance()
    if app is None:
        app = QApplication(sys.argv)
        app.setQuitOnLastWindowClosed(True)
    
    print("‚úÖ GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    print("–ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
    GUI_AVAILABLE = False
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI: {e}")
    print("–ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
    GUI_AVAILABLE = False
else:
    GUI_AVAILABLE = True

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import traceback
import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from pathlib import Path
import threading
import time
import inspect

if GUI_AVAILABLE:
    import matplotlib.pyplot as plt
    import matplotlib.dates as mdates
    from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
    
    from PySide6.QtWidgets import (
        QVBoxLayout, QHBoxLayout, QWidget, QPushButton, QLabel, QTextEdit, 
        QTableWidget, QTableWidgetItem, QHeaderView, QSplitter, QGroupBox,
        QProgressBar, QStatusBar, QTabWidget, QScrollArea, QFrame, 
        QGridLayout, QSpacerItem, QSizePolicy, QLineEdit, QComboBox, QSlider
    )
    from PySide6.QtCore import QTimer, QThread, Signal, QMutex, QMetaObject, Q_ARG, QSettings
    from PySide6.QtGui import QTextCursor, QFont, QPalette, QColor, QPixmap, QIcon

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
try:
    from src.utils.log_handler import setup_terminal_logging
except ImportError:
    def setup_terminal_logging():
        pass

try:
    from src.utils.performance_monitor import get_performance_monitor, start_performance_monitoring, stop_performance_monitoring, measure_performance
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    def get_performance_monitor():
        return None
    def start_performance_monitoring():
        pass
    def stop_performance_monitoring():
        pass
    def measure_performance(operation_name=None):
        def decorator(func):
            return func
        return decorator

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from api.bybit_client import BybitClient
    from strategies.adaptive_ml import AdaptiveMLStrategy
    from database.db_manager import DatabaseManager
    
    if GUI_AVAILABLE:
        from gui.portfolio_tab import PortfolioTab
        from gui.strategies_tab import StrategiesTab
        from strategy.strategy_engine import StrategyEngine
    
    from tools.ticker_data_loader import TickerDataLoader
    
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    traceback.print_exc()
    sys.exit(1)


class TradingWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    balance_updated = Signal(dict)
    positions_updated = Signal(list)
    trade_executed = Signal(dict)
    log_message = Signal(str)
    error_occurred = Signal(str)
    status_updated = Signal(str)
    
    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        super().__init__()
        self.api_key = api_key
        self.api_secret = api_secret
        self.testnet = testnet
        self.running = False
        self.trading_enabled = True  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã
        self._mutex = QMutex()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.bybit_client = None
        self.ml_strategy = None
        self.db_manager = None
        self.config_manager = None
        self.performance_monitor = get_performance_monitor()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        start_performance_monitoring()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫
        self.trade_history = []
        self.balance_limit_active = False
        self.balance_limit_amount = 0.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.daily_volume = 0.0
        self.daily_pnl = 0.0
        self.last_reset_date = datetime.now().date()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É
        log_dir = Path(__file__).parent / 'logs'
        log_dir.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        log_file = log_dir / f'trading_bot_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª: {log_file}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        session_id = f"session_{int(time.time())}"
        
        try:
            self.running = True
            self.status_updated.emit("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            self.log_message.emit("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
            self.db_manager = DatabaseManager()
            # self.db_manager.log_entry({
            #     'level': 'INFO',
            #     'logger_name': 'TRADING_WORKER',
            #     'message': 'Trading worker started',
            #     'session_id': session_id
            # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try:
                # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ bytrade –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bytrade', 'src'))
                from core.config_manager import ConfigManager
                self.config_manager = ConfigManager()
                self.log_message.emit("‚úÖ ConfigManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except ImportError as e:
                self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ConfigManager: {e}")
                self.log_message.emit("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ ConfigManager")
                self.config_manager = None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API
            start_time = time.time()
            self.bybit_client = BybitClient(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet
            )
            init_time = (time.time() - start_time) * 1000
            
            # self.db_manager.log_entry({
            #     'level': 'INFO',
            #     'logger_name': 'API_CLIENT',
            #     'message': f'Client initialized (testnet: {self.testnet})',
            #     'session_id': session_id
            # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            try:
                self.log_message.emit("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
                self.log_message.emit("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML...")
                start_time = time.time()
                ml_config = {
                    'feature_window': 50,
                    'confidence_threshold': 0.65,
                    'use_technical_indicators': True,
                    'use_market_regime': True
                }
                self.log_message.emit("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML —Å–æ–∑–¥–∞–Ω–∞")
                self.log_message.emit("üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
                self.ml_strategy = AdaptiveMLStrategy(
                    name="adaptive_ml",
                    config=ml_config,
                    api_client=self.bybit_client,
                    db_manager=self.db_manager,
                    config_manager=self.config_manager
                )
                
                # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è TickerDataLoader –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                self.log_message.emit("üîß –°–æ–∑–¥–∞–Ω–∏–µ TickerDataLoader...")
                from src.tools.ticker_data_loader import TickerDataLoader
                ticker_loader = TickerDataLoader()
                self.ml_strategy.ticker_loader = ticker_loader
                self.log_message.emit("‚úÖ TickerDataLoader –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                self.log_message.emit("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
                try:
                    self.ml_strategy.load_models()
                    self.log_message.emit("‚úÖ –ú–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                except Exception as model_error:
                    self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {model_error}")
                    self.log_message.emit("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                
                self.log_message.emit("‚úÖ –û–±—ä–µ–∫—Ç ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–∑–¥–∞–Ω")
                ml_init_time = (time.time() - start_time) * 1000
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                # self.db_manager.log_entry({
                #     'level': 'INFO',
                #     'logger_name': 'ML_STRATEGY',
                #     'message': 'ML strategy initialized',
                #     'session_id': session_id
                # })
                self.log_message.emit("‚úÖ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                print("DEBUG: ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                self.log_message.emit("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML...")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}"
                self.log_message.emit(error_msg)
                self.error_occurred.emit(error_msg)
                raise
            
            print("DEBUG: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å...")
            self.log_message.emit("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ'...")
            print("DEBUG: –í—ã–∑—ã–≤–∞–µ–º status_updated.emit...")
            self.status_updated.emit("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
            print("DEBUG: –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.log_message.emit("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.log_message.emit("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print(f"DEBUG: self.running = {self.running}")
            print("DEBUG: –í—ã–∑—ã–≤–∞–µ–º log_message.emit –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞...")
            self.log_message.emit("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
            print("DEBUG: –í—ã–∑—ã–≤–∞–µ–º log_message.emit –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏...")
            self.log_message.emit("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Ü–∏–∫–ª—É...")
            print("DEBUG: –î–æ—à–ª–∏ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            cycle_count = 0
            print(f"DEBUG: –ü–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Ü–∏–∫–ª, self.running = {self.running}")
            print("DEBUG: –ó–∞–º–µ–Ω—è–µ–º log_message.emit –Ω–∞ print –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
            print(f"‚úÖ –í—Ö–æ–¥–∏–º –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª, running={self.running}")
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª while...")
            while self.running:
                print(f"üîÑ –ù–∞—á–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ #{cycle_count + 1}")
                try:
                    print(f"üîÑ –¶–∏–∫–ª #{cycle_count + 1} –Ω–∞—á–∞—Ç")
                    cycle_start = time.time()
                    cycle_count += 1
                    
                    # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    print("üîÑ –í—ã–∑–æ–≤ _reset_daily_stats_if_needed()...")
                    self._reset_daily_stats_if_needed()
                    print("‚úÖ _reset_daily_stats_if_needed() –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")
                    balance_info = self._update_balance(session_id)
                    print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {balance_info is not None}")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
                    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
                    positions = self._update_positions(session_id)
                    print(f"‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(positions) if positions else 0} –ø–æ–∑–∏—Ü–∏–π")
                    
                    # –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                    if self.trading_enabled:
                        print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ #{cycle_count}...")
                        self._execute_trading_cycle(session_id, positions)
                    else:
                        print(f"‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ü–∏–∫–ª #{cycle_count})")
                        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                        if cycle_count % 10 == 1:
                            print("üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é' –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
                    cycle_time = (time.time() - cycle_start) * 1000
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    # self.db_manager.log_entry({
                    #     'level': 'DEBUG',
                    #     'logger_name': 'TRADING_CYCLE',
                    #     'message': f'Trading cycle {cycle_count} completed (enabled: {self.trading_enabled})',
                    #     'session_id': session_id
                    # })
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    self.msleep(5000)  # 5 —Å–µ–∫—É–Ω–¥
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}"
                    self.logger.error(error_msg)
                    self.error_occurred.emit(error_msg)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    # self.db_manager.log_entry({
                    #     'level': 'ERROR',
                    #     'logger_name': 'TRADING_WORKER',
                    #     'message': f'{type(e).__name__}: {str(e)}',
                    #     'exception': traceback.format_exc()
                    # })
                    
                    self.msleep(10000)  # 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞: {e}"
            self.logger.error(error_msg)
            self.error_occurred.emit(error_msg)
            
            if self.db_manager:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                # self.db_manager.log_entry({
                #     'level': 'CRITICAL',
                #     'logger_name': 'TRADING_WORKER',
                #     'message': f'Critical error: {type(e).__name__}: {str(e)}',
                #     'exception': traceback.format_exc()
                # })
                pass
        finally:
            self.running = False
            self.status_updated.emit("–û—Ç–∫–ª—é—á–µ–Ω–æ")
            self.log_message.emit("–¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            if self.db_manager:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                # self.db_manager.log_entry({
                #     'level': 'INFO',
                #     'logger_name': 'TRADING_WORKER',
                #     'message': 'Trading worker stopped',
                #     'session_id': session_id
                # })
                pass
    
    def _reset_daily_stats_if_needed(self):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è"""
        current_date = datetime.now().date()
        if current_date != self.last_reset_date:
            self.daily_volume = 0.0
            self.daily_pnl = 0.0
            self.last_reset_date = current_date
            
            # self.db_manager.log_entry({
            #     'level': 'INFO',
            #     'logger_name': 'TRADING_STATS',
            #     'message': f'Daily stats reset for date: {current_date}',
            #     'session_id': getattr(self, 'current_session_id', None)
            # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    
    @measure_performance("update_balance")
    def _update_balance(self, session_id: str) -> Optional[dict]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"""
        try:
            start_time = time.time()
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
            balance_response = self.bybit_client.get_wallet_balance()
            exec_time = (time.time() - start_time) * 1000
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–∞–ª–∞–Ω—Å–∞: {balance_response}")
            
            if balance_response and balance_response.get('list'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
                balance_data = balance_response['list'][0]
                
                # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                balance_info = {
                    'totalWalletBalance': balance_data.get('totalWalletBalance', '0'),
                    'totalAvailableBalance': balance_data.get('totalAvailableBalance', '0'),
                    'totalEquity': balance_data.get('totalEquity', '0'),
                    'totalPerpUPL': balance_data.get('totalPerpUPL', '0'),
                    'coins': balance_data.get('coin', [])
                }
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ USD –∏–∑ walletBalance –º–æ–Ω–µ—Ç
                total_wallet_usd = 0
                total_available_usd = 0
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–∞—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for coin in balance_info['coins']:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ USD
                    # –∏ –±–µ–∑ —É—Å–µ—á–µ–Ω–∏—è –¥–æ –º–µ–Ω—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    coin_name = coin.get('coin')
                    wallet_balance = coin.get('walletBalance', '0')
                    # –î–ª—è UNIFIED –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º walletBalance –≤–º–µ—Å—Ç–æ availableToWithdraw
                    available_balance = coin.get('availableToWithdraw', wallet_balance)
                    if not available_balance or available_balance == '':
                        available_balance = wallet_balance
                    usd_value = coin.get('usdValue', '0')
                    
                    # –°—É–º–º–∏—Ä—É–µ–º USD —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                    try:
                        total_wallet_usd += float(usd_value)
                        # –î–ª—è UNIFIED –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º walletBalance –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
                        total_available_usd += float(usd_value)
                    except (ValueError, TypeError, ZeroDivisionError):
                        self.logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ USD –¥–ª—è {coin_name}")
                    
                    self.logger.info(f"–ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã {coin_name}: {wallet_balance} (walletBalance), {usd_value} (usdValue), {available_balance} (–¥–æ—Å—Ç—É–ø–Ω–æ)")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å
                balance_info['total_wallet_usd'] = str(total_wallet_usd)
                balance_info['total_available_usd'] = str(total_available_usd)
                
                self.logger.info(f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USD: {total_wallet_usd}, –¥–æ—Å—Ç—É–ø–Ω—ã–π: {total_available_usd}")
                self.balance_updated.emit(balance_info)
                
                return balance_info
            else:
                self.logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞")
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None
    
    @measure_performance("update_positions")
    def _update_positions(self, session_id: str) -> List[dict]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö (–¥–ª—è —Å–ø–æ—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ - –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞)"""
        try:
            start_time = time.time()
            
            # –î–ª—è —Å–ø–æ—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –ø–æ–∑–∏—Ü–∏–π
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ API
                orders_response = self.bybit_client.get_open_orders(category="spot")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                if orders_response and 'list' in orders_response:
                    orders_list = orders_response['list']
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ä–¥–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø–æ–∑–∏—Ü–∏–π
                    spot_positions = []
                    for order in orders_list:
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ø–æ—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                        spot_position = {
                            'symbol': order.get('symbol'),
                            'category': 'spot',
                            'side': order.get('side'),
                            'size': order.get('qty'),
                            'avgPrice': order.get('price'),
                            'positionValue': float(order.get('price', 0)) * float(order.get('qty', 0)),
                            'orderId': order.get('orderId'),
                            'orderType': order.get('orderType'),
                            'orderStatus': order.get('orderStatus'),
                            'createdTime': order.get('createdTime'),
                            'updatedTime': order.get('updatedTime')
                        }
                        spot_positions.append(spot_position)
                    
                    self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(spot_positions)} —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
                else:
                    spot_positions = []
                    self.logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
                spot_positions = []
            
            exec_time = (time.time() - start_time) * 1000
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(spot_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
            self.positions_updated.emit(spot_positions)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db_manager:
                try:
                    self.db_manager.save_positions(spot_positions)
                    self.log_message.emit(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(spot_positions)} —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                except Exception as db_err:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î: {db_err}")
            
            # self.db_manager.log_entry({
            #     'level': 'DEBUG',
            #     'logger_name': 'API_POSITIONS',
            #     'message': f'Spot orders updated: {len(spot_positions)} active orders',
            #     'session_id': session_id
            # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            return spot_positions
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            self.positions_updated.emit([])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db_manager:
                try:
                    self.db_manager.save_positions([])
                    self.log_message.emit("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ë–î")
                except Exception as db_err:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î: {db_err}")
            
            return []
    
    def _execute_trading_cycle(self, session_id: str, positions: List[dict]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        try:
            cycle_start = time.time()
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞
            self.logger.info(f"–ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (session_id: {session_id})")
            self.logger.info(f"–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏: {'–í–ö–õ–Æ–ß–ï–ù–ê' if self.trading_enabled else '–í–´–ö–õ–Æ–ß–ï–ù–ê'}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è
            if not self.trading_enabled:
                self.logger.warning("–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª.")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            symbols_to_analyze = self._get_trading_symbols(positions)
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(symbols_to_analyze)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {', '.join(symbols_to_analyze[:5])}...")
            
            if not symbols_to_analyze:
                self.logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ä–æ–≤.")
                return
            
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä
            max_symbols = 100  # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ü–∏–∫–ª –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞ —Ä—ã–Ω–∫–∞ (~600 —Ç–∏–∫–µ—Ä–æ–≤)
            
            # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if len(symbols_to_analyze) > max_symbols:
                symbols_to_analyze = self._select_best_symbols(symbols_to_analyze, max_symbols)
            
            self.logger.info(f"–û—Ç–æ–±—Ä–∞–Ω–æ {len(symbols_to_analyze)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            self._process_symbols_async(symbols_to_analyze, session_id, cycle_start)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            self.logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    def _process_symbols_async(self, symbols: List[str], session_id: str, cycle_start: float):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        if not symbols:
            cycle_time = (time.time() - cycle_start) * 1000
            self.logger.info(f"–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.2f} –º—Å")
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
            self.cycle_count = getattr(self, 'cycle_count', 0) + 1
            if self.cycle_count % 10 == 0:
                try:
                    performance_summary = self.performance_monitor.get_performance_summary()
                    self.logger.info(f"–û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ü–∏–∫–ª {self.cycle_count}): {performance_summary}")
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –∏–∑ —Å–ø–∏—Å–∫–∞
        symbol = symbols[0]
        remaining_symbols = symbols[1:]
        
        try:
            self.logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞: {symbol}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ø—Ä–æ—â–∞–µ–º –ª–æ–≥–∏–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                klines = self._get_symbol_klines(symbol)
                if not klines:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                    self._process_symbols_async(remaining_symbols, session_id, cycle_start)
                    return
                
                # ML –∞–Ω–∞–ª–∏–∑ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                market_data = {
                    'symbol': symbol,
                    'klines': klines,
                    'current_price': float(klines[-1]['close']) if klines else 0.0
                }
                
                analysis_result = self.ml_strategy.analyze_market(market_data)
                
                if not analysis_result:
                    self.logger.warning(f"–ù–µ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}")
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                    self._process_symbols_async(remaining_symbols, session_id, cycle_start)
                    return
                    
                self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ {symbol}: —Å–∏–≥–Ω–∞–ª={analysis_result.get('signal', '–ù–ï–¢')}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={analysis_result.get('confidence', 0)}")
                
                if analysis_result and analysis_result.get('signal') in ['BUY', 'SELL']:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
                    if self._check_daily_limits(analysis_result):
                        self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {symbol} —Å —Å–∏–≥–Ω–∞–ª–æ–º {analysis_result.get('signal')}")
                        trade_result = self._execute_trade(symbol, analysis_result, session_id)
                        
                        if trade_result:
                            self.logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {trade_result}")
                            self.trade_executed.emit(trade_result)
                            
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                            self.daily_volume += float(trade_result.get('size', 0))
                            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—ä–µ–º={self.daily_volume}")
                            
                            # –û–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è {symbol}")
                            self.ml_strategy.update_performance(symbol, trade_result)
                        else:
                            self.logger.warning(f"–¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è {symbol} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    else:
                        self.logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω—ã –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è {symbol}")
                else:
                    self.logger.info(f"–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol} –∏–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–µ BUY/SELL")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                self._process_symbols_async(remaining_symbols, session_id, cycle_start)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
                self.logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self._process_symbols_async(remaining_symbols, session_id, cycle_start)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É
            self._process_symbols_async(remaining_symbols, session_id, cycle_start)
    
    def _get_symbol_klines(self, symbol: str) -> Optional[List[dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ Invalid period
            try:
                klines = self.bybit_client.get_kline(
                    category='spot',
                    symbol=symbol,
                    interval='4h',
                    limit=200
                )
                return klines
            except Exception as kline_error:
                if "Invalid period" in str(kline_error):
                    self.logger.warning(f"–°–∏–º–≤–æ–ª {symbol}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    try:
                        klines = self.bybit_client.get_kline(
                            category='spot',
                            symbol=symbol,
                            interval='60',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 1h
                            limit=200
                        )
                        return klines
                    except Exception as alt_error:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: {alt_error}")
                        return None
                else:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {kline_error}")
                    return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è klines –¥–ª—è {symbol}: {e}")
            return None
    
    def _get_all_available_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∏–∫–µ—Ä–æ–≤"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∏–∫–µ—Ä–æ–≤
            try:
                from src.tools.ticker_data_loader import TickerDataLoader
                ticker_loader = TickerDataLoader()
                ticker_data = ticker_loader.load_tickers_data()
                
                if ticker_data:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
                    ticker_symbols = list(ticker_data.keys())
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
                    usdt_symbols = [symbol for symbol in ticker_symbols if symbol.endswith('USDT')]
                    
                    if usdt_symbols:
                        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(usdt_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∏–∫–µ—Ä–æ–≤")
                        return sorted(usdt_symbols)
                        
            except Exception as ticker_error:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∏–∫–µ—Ä–æ–≤: {ticker_error}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–∏–∫–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º API
            if not self.bybit_client:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ spot –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            instruments = self.bybit_client.get_instruments_info(category="spot")
            
            if not instruments:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫")
                from config import FALLBACK_TRADING_SYMBOLS
                return FALLBACK_TRADING_SYMBOLS
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            usdt_symbols = []
            for instrument in instruments:
                symbol = instrument.get('symbol', '')
                status = instrument.get('status', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ USDT –ø–∞—Ä–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
                if (symbol.endswith('USDT') and 
                    status == 'Trading' and 
                    len(symbol) <= 12):  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    usdt_symbols.append(symbol)
            
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(usdt_symbols)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USDT —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ API")
            return sorted(usdt_symbols)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                from config import FALLBACK_TRADING_SYMBOLS
                return FALLBACK_TRADING_SYMBOLS
            except:
                # –ï—Å–ª–∏ –¥–∞–∂–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã
                return ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT']
    
    def _get_trading_symbols(self, positions: List[dict]) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        all_available_symbols = self._get_all_available_symbols()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        position_symbols = [pos.get('symbol') for pos in positions if pos.get('symbol')]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∞–º —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
        priority_symbols = list(set(position_symbols))  # –°–∏–º–≤–æ–ª—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
        other_symbols = [s for s in all_available_symbols if s not in priority_symbols]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å–∏–º–≤–æ–ª—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        final_symbols = priority_symbols + other_symbols
        
        self.logger.info(f"–ë—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è {len(final_symbols)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        return final_symbols  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    
    def _select_best_symbols(self, symbols: List[str], max_count: int) -> List[str]:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä –ª—É—á—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ä–∞—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if hasattr(self, 'ticker_loader') and self.ticker_loader:
                ticker_data = self.ticker_loader.get_all_tickers()
                if ticker_data:
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                    symbol_metrics = []
                    for symbol in symbols:
                        if symbol in ticker_data:
                            data = ticker_data[symbol]
                            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–±—ä–µ–º * –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã)
                            volume = float(data.get('volume', 0))
                            price_change = abs(float(data.get('price_change_percent', 0)))
                            activity_score = volume * (1 + price_change / 100)
                            
                            symbol_metrics.append({
                                'symbol': symbol,
                                'volume': volume,
                                'price_change': price_change,
                                'activity_score': activity_score
                            })
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
                    symbol_metrics.sort(key=lambda x: x['activity_score'], reverse=True)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤
                    selected_symbols = [item['symbol'] for item in symbol_metrics[:max_count]]
                    
                    self.logger.info(f"–û—Ç–æ–±—Ä–∞–Ω–æ {len(selected_symbols)} –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
                    return selected_symbols
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            self.logger.warning("–î–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–±–æ—Ä")
            return symbols[:max_count]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–±–æ—Ä–µ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return symbols[:max_count]
    
    @measure_performance("analyze_symbol")
    def _analyze_symbol(self, symbol: str, session_id: str) -> Optional[dict]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        try:
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ API
            if not hasattr(self, 'bybit_client') or self.bybit_client is None:
                self.logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª {symbol}: API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if not hasattr(self, 'ml_strategy') or self.ml_strategy is None:
                self.logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª {symbol}: ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            def analyze_async():
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ Invalid period
                    try:
                        klines = self.bybit_client.get_kline(
                            category='spot',
                            symbol=symbol,
                            interval='4h',
                            limit=200
                        )
                    except Exception as kline_error:
                        if "Invalid period" in str(kline_error):
                            self.logger.warning(f"–°–∏–º–≤–æ–ª {symbol}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
                            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                            try:
                                klines = self.bybit_client.get_kline(
                                    category='spot',
                                    symbol=symbol,
                                    interval='60',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 1h
                                    limit=200
                                )
                            except Exception as alt_error:
                                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: {alt_error}")
                                return None
                        else:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {kline_error}")
                            return None
                    
                    if not klines or len(klines) < 10:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: –ø–æ–ª—É—á–µ–Ω–æ {len(klines) if klines else 0} —Å–≤–µ—á–µ–π")
                        return None
                    
                    # ML –∞–Ω–∞–ª–∏–∑ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                    try:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        market_data = {
                            'symbol': symbol,
                            'klines': klines,
                            'current_price': float(klines[-1]['close']) if klines and len(klines) > 0 else 0.0
                        }
                        analysis = self.ml_strategy.analyze_market(market_data)
                    except Exception as ml_error:
                        self.logger.error(f"–û—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {ml_error}")
                        return None
                    
                    exec_time = (time.time() - start_time) * 1000
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
                    if analysis:
                        analysis_data = {
                            'symbol': symbol,
                            'timeframe': '4h',
                            'current_price': klines[-1].get('close') if klines else 0,
                            'features': analysis.get('features', []),
                            'indicators': analysis.get('indicators', {}),
                            'regime': analysis.get('regime', {}),
                            'prediction': analysis.get('prediction', {}),
                            'signal': analysis.get('signal'),
                            'confidence': analysis.get('confidence'),
                            'execution_time_ms': exec_time
                        }
                        
                        try:
                            if hasattr(self, 'db_manager') and self.db_manager is not None:
                                self.db_manager.log_analysis(analysis_data)
                        except Exception as db_error:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î –¥–ª—è {symbol}: {db_error}")
                    
                    return analysis
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
                    return None
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ QTimer
            QTimer.singleShot(0, analyze_async)
            return None  # –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            return None
    
    def _check_daily_limits(self, analysis: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"""
        try:
            # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –í–°–ï –õ–ò–ú–ò–¢–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –¢–û–†–ì–û–í–õ–ò
            return True
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            balance_response = self.bybit_client.get_wallet_balance()
            if not balance_response or not balance_response.get('list'):
                return False
            
            balance_data = balance_response['list'][0]
            available_balance = float(balance_data.get('totalAvailableBalance', 0))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ 20% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤ –¥–µ–Ω—å
            daily_limit = available_balance * 0.2
            
            if self.daily_volume >= daily_limit:
                # self.db_manager.log_entry({
                #     'level': 'WARNING',
                #     'logger_name': 'TRADING_LIMITS',
                #     'message': f'Daily trading limit reached: volume {self.daily_volume:.2f}, limit {daily_limit:.2f}',
                #     'session_id': getattr(self, 'current_session_id', None)
                # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = analysis.get('confidence', 0)
            if confidence < 0.65:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
            return False
    
    @measure_performance("execute_trade")
    def _execute_trade(self, symbol: str, analysis: dict, session_id: str) -> Optional[dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            start_time = time.time()
            
            signal = analysis.get('signal')
            confidence = analysis.get('confidence', 0)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è
            if not self.trading_enabled:
                self.logger.info(f"–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –°–∏–≥–Ω–∞–ª {signal} –¥–ª—è {symbol} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
                return None

            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–ª—è SELL –æ—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã, –∑–∞—Ç–µ–º –ø—Ä–æ–¥–∞–µ–º
            if signal == 'SELL':
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ 1INCHUSDT –ø–æ–ª—É—á–∞–µ–º 1INCH)
                base_currency = symbol.replace('USDT', '') if symbol.endswith('USDT') else symbol.replace('USD', '')
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                balance_resp = self.bybit_client.get_wallet_balance()
                usdt_balance = 0.0
                
                if balance_resp:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                    if 'result' in balance_resp and balance_resp['result'].get('list'):
                        coins = balance_resp['result']['list'][0].get('coin', [])
                    elif 'list' in balance_resp and balance_resp['list']:
                        coins = balance_resp['list'][0].get('coin', [])
                    else:
                        coins = []
                    
                    # –ò—â–µ–º –±–∞–ª–∞–Ω—Å USDT
                    for coin in coins:
                        if coin.get('coin') == 'USDT':
                            usdt_balance = float(coin.get('walletBalance', 0))
                            break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–¥–∞–∂–∏
                min_trade_amount = 10.0  # –ú–∏–Ω–∏–º—É–º $10 –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                if usdt_balance < min_trade_amount:
                    self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}: {usdt_balance} (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_trade_amount})")
                    return None
                
                self.logger.info(f"USDT –±–∞–ª–∞–Ω—Å: {usdt_balance} - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}")
                
                # –í–´–ü–û–õ–ù–Ø–ï–ú –¢–û–†–ì–û–í–õ–Æ –ß–ï–†–ï–ó USDT (–ø–æ–∫—É–ø–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∑–∞ USDT, –∑–∞—Ç–µ–º –ø—Ä–æ–¥–∞–µ–º)
                trade_amount_usdt = min(usdt_balance * 0.1, 50.0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 10% –æ—Ç USDT –±–∞–ª–∞–Ω—Å–∞, –Ω–æ –Ω–µ –±–æ–ª–µ–µ $50
                
                self.logger.info(f"üî• –í–´–ü–û–õ–ù–Ø–ï–ú –¢–û–†–ì–û–í–õ–Æ {symbol}: –ø–æ–∫—É–ø–∞–µ–º –∑–∞ {trade_amount_usdt} USDT, –∑–∞—Ç–µ–º –ø—Ä–æ–¥–∞–µ–º")
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ API
                # –ü–æ–∫–∞ —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
                trade_result = {
                    'symbol': symbol,
                    'side': 'SELL',
                    'amount': trade_amount_usdt,
                    'price': 'market',
                    'status': 'filled',
                    'timestamp': time.time()
                }
                
                self.logger.info(f"‚úÖ –¢–û–†–ì–û–í–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ê: {trade_result}")
                return trade_result
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–ª—è BUY –æ—Ä–¥–µ—Ä–æ–≤ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º USDT
            if signal == 'BUY':
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                balance_resp = self.bybit_client.get_wallet_balance()
                usdt_balance = 0.0
                
                if balance_resp:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                    if 'result' in balance_resp and balance_resp['result'].get('list'):
                        coins = balance_resp['result']['list'][0].get('coin', [])
                    elif 'list' in balance_resp and balance_resp['list']:
                        coins = balance_resp['list'][0].get('coin', [])
                    else:
                        coins = []
                    
                    # –ò—â–µ–º –±–∞–ª–∞–Ω—Å USDT
                    for coin in coins:
                        if coin.get('coin') == 'USDT':
                            usdt_balance = float(coin.get('walletBalance', 0))
                            break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                min_trade_amount = 10.0  # –ú–∏–Ω–∏–º—É–º $10 –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                if usdt_balance < min_trade_amount:
                    self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {symbol}: {usdt_balance} (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_trade_amount})")
                    return None
                
                self.logger.info(f"USDT –±–∞–ª–∞–Ω—Å: {usdt_balance} - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {symbol}")
                
                # –í–´–ü–û–õ–ù–Ø–ï–ú –ü–û–ö–£–ü–ö–£
                trade_amount_usdt = min(usdt_balance * 0.1, 50.0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 10% –æ—Ç USDT –±–∞–ª–∞–Ω—Å–∞, –Ω–æ –Ω–µ –±–æ–ª–µ–µ $50
                
                self.logger.info(f"üî• –í–´–ü–û–õ–ù–Ø–ï–ú –ü–û–ö–£–ü–ö–£ {symbol}: –ø–æ–∫—É–ø–∞–µ–º –∑–∞ {trade_amount_usdt} USDT")
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ API
                # –ü–æ–∫–∞ —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
                trade_result = {
                    'symbol': symbol,
                    'side': 'BUY',
                    'amount': trade_amount_usdt,
                    'price': 'market',
                    'status': 'filled',
                    'timestamp': time.time()
                }
                
                self.logger.info(f"‚úÖ –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê: {trade_result}")
                return trade_result
            
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            balance_resp = self.bybit_client.get_wallet_balance()
            if not balance_resp:
                return None
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            available_balance = 0.0
            if balance_resp:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: —Å 'result' –∏ –±–µ–∑ –Ω–µ–≥–æ
                if 'result' in balance_resp and balance_resp['result'].get('list'):
                    # –§–æ—Ä–º–∞—Ç —Å 'result': {'result': {'list': [...]}}
                    available_balance = float(balance_resp['result']['list'][0].get('totalAvailableBalance', 0))
                elif 'list' in balance_resp and balance_resp['list']:
                    # –§–æ—Ä–º–∞—Ç –±–µ–∑ 'result': {'list': [...]}
                    available_balance = float(balance_resp['list'][0].get('totalAvailableBalance', 0))
                else:
                    self.logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: {balance_resp}")
                    available_balance = 0.0
            
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –±–∞–ª–∞–Ω—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            if hasattr(self, 'balance_limit_active') and hasattr(self, 'balance_limit_amount'):
                if self.balance_limit_active and self.balance_limit_amount > 0:
                    available_balance = min(available_balance, self.balance_limit_amount)
            
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (1-3% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
            position_percentage = 0.01 + (confidence - 0.65) * 0.02  # 1-3%
            position_size = available_balance * position_percentage
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (Bybit —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 5 USDT –¥–ª—è —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏)
            if position_size < 5:
                self.logger.info(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${position_size:.2f} < $5.00")
                return None
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            side = 'Buy' if signal == 'BUY' else 'Sell'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä category='spot'
            order_result = self.bybit_client.place_order(
                category='spot',  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è API Bybit v5
                symbol=symbol,
                side=side,
                order_type='Market',
                qty=str(position_size)
            )
            
            exec_time = (time.time() - start_time) * 1000
            
            if order_result:
                trade_info = {
                    'timestamp': datetime.now().isoformat(),
                    'symbol': symbol,
                    'side': side,
                    'order_type': 'Market',
                    'size': position_size,
                    'analysis': analysis,
                    'order_result': order_result,
                    'execution_time_ms': exec_time,
                    'status': 'Executed'
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ trade_history –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                if hasattr(self, 'trade_history'):
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏
                    self.trade_history.append(trade_info)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
                    if hasattr(self, 'update_trading_stats'):
                        self.update_trading_stats()
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                try:
                    if self.db_manager:
                        self.db_manager.log_trade(trade_info)
                except Exception as db_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏ –≤ –ë–î: {db_error}")
                
                self.log_message.emit(
                    f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è: {symbol} {side} ${position_size:.2f} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})"
                )
                
                return trade_info
            else:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä: {symbol} {side}"
                self.logger.warning(error_msg)
                self.log_message.emit(f"‚ö†Ô∏è {error_msg}")
                
                try:
                    if self.db_manager:
                        self.db_manager.log_entry({
                            'level': 'WARNING',
                            'logger_name': 'TRADING_ORDER',
                            'message': f'Order failed: {symbol} {side}',
                            'session_id': session_id
                        })
                except Exception as db_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –ë–î: {db_error}")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ {symbol}: {e}"
            self.logger.error(error_msg)
            self.log_message.emit(f"‚ùå {error_msg}")
            
            try:
                if self.db_manager:
                    self.db_manager.log_entry({
                        'level': 'ERROR',
                        'logger_name': 'TRADING_EXECUTION',
                        'message': error_msg,
                        'exception': str(e),
                        'session_id': getattr(self, 'current_session_id', None)
                    })
            except Exception as db_error:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –ë–î: {db_error}")
            
            return None
    
    def enable_trading(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self._mutex.lock()
        try:
            self.trading_enabled = enabled
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            self.log_message.emit(f"üîÑ –¢–æ—Ä–≥–æ–≤–ª—è {status}")
            
            if self.db_manager:
                pass
                # self.db_manager.log_entry({
                #     'level': 'INFO',
                #     'logger_name': 'TRADING_CONTROL',
                #     'message': f'Trading toggled: {status}',
                #     'session_id': getattr(self, 'current_session_id', None)
                # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        finally:
            self._mutex.unlock()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        self._mutex.lock()
        try:
            self.running = False
            # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —Å–∞–º
            # self.trading_enabled = False  # –£–ë–†–ê–ù–û: –Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ç–æ–∫–∞
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            stop_performance_monitoring()
            
            # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if self.performance_monitor:
                summary = self.performance_monitor.get_performance_summary()
                self.logger.info("=== –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===")
                for key, value in summary.items():
                    self.logger.info(f"{key}: {value}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
            if not self.trading_enabled:
                self.status_updated.emit("–û—Ç–∫–ª—é—á–µ–Ω–æ")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å–∞–º
            self.terminate()
            
            if self.db_manager:
                pass
                # self.db_manager.log_entry({
                #     'level': 'INFO',
                #     'logger_name': 'TRADING_WORKER',
                #     'message': 'Trading worker stop requested',
                #     'session_id': getattr(self, 'current_session_id', None)
                # }) # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        finally:
            self._mutex.unlock()


class TradingBotMainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
    balance_limit_timer_signal = Signal(int)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞
    
    def __init__(self):
        super().__init__()
        
        print("üîÑ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞
        self.balance_limit_active = False
        self.balance_limit_percent = 50
        self.balance_limit_amount = 0.0
        self.balance_limit_timer = QTimer(self)
        self.balance_limit_timer.timeout.connect(self.update_balance_limit_timer)
        self.balance_limit_seconds_left = 12 * 60 * 60  # 12 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ä–∞—Ö
        self.last_ticker_update = None
        
        # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        try:
            import config
            # –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π –∏–∑ config.py
            try:
                credentials = config.get_api_credentials()
                self.api_key = credentials['api_key']
                self.api_secret = credentials['api_secret']
                self.testnet = credentials['testnet']
                print("‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.py")
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á–∏ –∏–∑ config.py: {e}")
                self.api_key = ""
                self.api_secret = ""
                self.testnet = True
                print("‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_errors = config.validate_config()
            if config_errors:
                error_msg = "\n".join(config_errors)
                QMessageBox.critical(
                    None, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
                    f"–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n{error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª config.py"
                )
                sys.exit(1)
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
                
        except ImportError:
            QMessageBox.critical(
                None, "–û—à–∏–±–∫–∞", 
                "–§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
            )
            sys.exit(1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.trading_worker = None
        self.db_manager = None
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.current_balance = {}
        self.current_positions = []
        self.trade_history = []
        self.total_balance_usd = 0.0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI...")
        self.init_ui()
        print("‚úÖ UI —Å–æ–∑–¥–∞–Ω")
        
        print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π...")
        self.setup_styles()
        print("‚úÖ –°—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π –≤ –ø–æ–ª—è –≤–≤–æ–¥–∞
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π –≤ –ø–æ–ª—è –≤–≤–æ–¥–∞...")
        self.load_api_keys()
        print("‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–æ–ª—è –≤–≤–æ–¥–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        self.setup_timers()
        print("‚úÖ –¢–∞–π–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        print("üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
        self.start_trading_worker()
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def setup_timers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
        self.positions_timer = QTimer(self)
        self.positions_timer.timeout.connect(self.refresh_positions)
        self.positions_timer.start(30000)  # 30 —Å–µ–∫—É–Ω–¥
        self.logger.info("–¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 30 —Å–µ–∫—É–Ω–¥)")
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥)
        self.connection_timer = QTimer(self)
        self.connection_timer.timeout.connect(self.check_api_connection)
        self.connection_timer.start(60000)  # 60 —Å–µ–∫—É–Ω–¥
        self.logger.info("–¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 60 —Å–µ–∫—É–Ω–¥)")
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 120 —Å–µ–∫—É–Ω–¥)
        self.data_timer = QTimer(self)
        self.data_timer.timeout.connect(self.refresh_data)
        self.data_timer.start(120000)  # 120 —Å–µ–∫—É–Ω–¥
        self.logger.info("–¢–∞–π–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 120 —Å–µ–∫—É–Ω–¥)")
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
        self.tickers_timer = QTimer(self)
        self.tickers_timer.timeout.connect(self.auto_update_tickers)
        self.tickers_timer.start(30000)  # 30 —Å–µ–∫—É–Ω–¥
        self.logger.info("–¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 30 —Å–µ–∫—É–Ω–¥)")
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç Bybit - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¢–æ—Ä–≥–æ–≤–ª—è")
        self.setMinimumSize(1200, 800)
        self.resize(1400, 900)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.create_header(main_layout)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≤–∏–¥–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_main_content(main_layout)
        
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.create_status_bar()
    
    def create_header(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_frame = QFrame()
        header_frame.setFrameStyle(QFrame.StyledPanel)
        header_frame.setMaximumHeight(80)
        
        header_layout = QHBoxLayout(header_frame)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_label = QLabel("ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç Bybit")
        title_font = QFont()
        title_font.setPointSize(18)
        title_font.setBold(True)
        title_label.setFont(title_font)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = QLabel("üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ")
        self.connection_status.setStyleSheet(
            "QLabel { color: #e74c3c; font-weight: bold; font-size: 14px; }"
        )
        
        # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        self.trading_toggle_btn = QPushButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
        self.trading_toggle_btn.setMinimumSize(180, 40)
        self.trading_toggle_btn.clicked.connect(self.toggle_trading)
        self.trading_toggle_btn.setEnabled(False)
        
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        header_layout.addWidget(self.connection_status)
        header_layout.addWidget(self.trading_toggle_btn)
        
        parent_layout.addWidget(header_frame)
    
    def create_main_content(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget = QTabWidget()
        self.tabs = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        
        # –í–∫–ª–∞–¥–∫–∞ "–û–±–∑–æ—Ä"
        self.create_overview_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ–∑–∏—Ü–∏–∏"
        self.create_positions_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–¢–∏–∫–µ—Ä—ã"
        self.create_tickers_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
        self.create_history_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        self.create_settings_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–õ–æ–≥–∏"
        self.create_logs_tab()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        parent_layout.addWidget(self.tab_widget)
        
    def create_positions_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–π"""
        positions_tab = QWidget()
        layout = QVBoxLayout(positions_tab)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        header_layout = QHBoxLayout()
        title_label = QLabel("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        title_label.setFont(QFont("Arial", 12, QFont.Bold))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.stop_strategy_btn = QPushButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        self.stop_strategy_btn.setMinimumSize(180, 30)
        self.stop_strategy_btn.clicked.connect(self.stop_strategy)
        self.stop_strategy_btn.setEnabled(False)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏")
        refresh_btn.setMinimumSize(180, 30)
        refresh_btn.clicked.connect(self.refresh_positions)
        
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        header_layout.addWidget(self.stop_strategy_btn)
        header_layout.addWidget(refresh_btn)
        
        layout.addLayout(header_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        self.positions_table = QTableWidget()
        self.positions_table.setColumnCount(10)
        self.positions_table.setHorizontalHeaderLabels([
            "–°–∏–º–≤–æ–ª", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—Ç–æ—Ä–æ–Ω–∞", "–†–∞–∑–º–µ—Ä", "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", 
            "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", "–ò–∑–º. 1—á", "–ò–∑–º. 24—á", "–ò–∑–º. 30–¥", "P&L"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        header = self.positions_table.horizontalHeader()
        for i in range(10):
            header.setSectionResizeMode(i, QHeaderView.Stretch)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.positions_table.setAlternatingRowColors(True)
        self.positions_table.setSelectionBehavior(QTableWidget.SelectRows)
        
        layout.addWidget(self.positions_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –≤ –≤–∏–¥–∂–µ—Ç –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget.addTab(positions_tab, "–ü–æ–∑–∏—Ü–∏–∏")
        self.tabs["positions"] = positions_tab
    
    def create_strategies_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        from src.strategy.strategy_engine import StrategyEngine
        strategy_engine = StrategyEngine(
            api_client=self.bybit_client,
            db_manager=self.db_manager,
            config_manager=self.config_manager
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞ StrategiesTab
        from src.gui.strategies_tab import StrategiesTab
        self.strategies_tab = StrategiesTab(
            config=self.config_manager,
            db_manager=self.db_manager,
            api_client=self.bybit_client,
            strategy_engine=strategy_engine
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –≤ –≤–∏–¥–∂–µ—Ç –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget.addTab(self.strategies_tab, "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        self.tabs["strategies"] = self.strategies_tab
    
    def create_tickers_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤"""
        tickers_widget = QWidget()
        layout = QVBoxLayout(tickers_widget)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_frame = QFrame()
        filter_layout = QHBoxLayout(filter_frame)
        filter_layout.setContentsMargins(0, 0, 0, 0)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç–∏–∫–µ—Ä–∞
        filter_label = QLabel("–§–∏–ª—å—Ç—Ä:")
        self.filter_combo = QComboBox()
        self.filter_combo.addItems(["ALL", "USDT", "BTC", "ETH", "USDC"])
        self.filter_combo.currentIndexChanged.connect(self.apply_ticker_filter)
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_label = QLabel("–ü–æ–∏—Å–∫:")
        self.search_entry = QLineEdit()
        self.search_entry.textChanged.connect(self.apply_ticker_filter)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_button.clicked.connect(self.refresh_tickers)
        
        filter_layout.addWidget(filter_label)
        filter_layout.addWidget(self.filter_combo)
        filter_layout.addWidget(search_label)
        filter_layout.addWidget(self.search_entry)
        filter_layout.addStretch()
        filter_layout.addWidget(refresh_button)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–∏–∫–µ—Ä–æ–≤
        self.ticker_table = QTableWidget()
        self.ticker_table.setColumnCount(8)
        self.ticker_table.setHorizontalHeaderLabels([
            "–°–∏–º–≤–æ–ª", "–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞", "–ú–∞–∫—Å. 24—á", "–ú–∏–Ω. 24—á", 
            "–û–±—ä–µ–º 24—á", "–û–±–æ—Ä–æ—Ç 24—á", "–ò–∑–º. 24—á (%)", "–ò–∑–º. –∑–∞ –ø–µ—Ä–∏–æ–¥ (%)"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.ticker_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.ticker_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.ticker_table.setSelectionMode(QTableWidget.SingleSelection)
        self.ticker_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.ticker_table.setSortingEnabled(True)
        self.ticker_table.setAlternatingRowColors(True)
        self.ticker_table.itemSelectionChanged.connect(self.on_ticker_select)
        
        # –ü–∞–Ω–µ–ª—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        chart_frame = QFrame()
        chart_layout = QVBoxLayout(chart_frame)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        interval_frame = QFrame()
        interval_layout = QHBoxLayout(interval_frame)
        interval_layout.setContentsMargins(0, 0, 0, 0)
        
        interval_label = QLabel("–ò–Ω—Ç–µ—Ä–≤–∞–ª:")
        self.interval_combo = QComboBox()
        self.interval_combo.addItems([
            "1 –º–∏–Ω—É—Ç–∞", "5 –º–∏–Ω—É—Ç", "15 –º–∏–Ω—É—Ç", "30 –º–∏–Ω—É—Ç", 
            "1 —á–∞—Å", "4 —á–∞—Å–∞", "1 –¥–µ–Ω—å", "1 –Ω–µ–¥–µ–ª—è", "1 –º–µ—Å—è—Ü"
        ])
        self.interval_combo.setCurrentText("1 —á–∞—Å")
        self.interval_combo.currentIndexChanged.connect(self.update_ticker_chart)
        
        interval_layout.addWidget(interval_label)
        interval_layout.addWidget(self.interval_combo)
        interval_layout.addStretch()
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫)
        self.chart_placeholder = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        self.chart_placeholder.setAlignment(Qt.AlignCenter)
        self.chart_placeholder.setStyleSheet("background-color: #f0f0f0; border: 1px solid #ddd;")
        self.chart_placeholder.setMinimumHeight(300)
        
        chart_layout.addWidget(interval_frame)
        chart_layout.addWidget(self.chart_placeholder)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        splitter = QSplitter(Qt.Vertical)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        table_container = QWidget()
        table_layout = QVBoxLayout(table_container)
        table_layout.setContentsMargins(0, 0, 0, 0)
        table_layout.addWidget(filter_frame)
        table_layout.addWidget(self.ticker_table)
        
        splitter.addWidget(table_container)
        splitter.addWidget(chart_frame)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        splitter.setSizes([400, 300])
        
        layout.addWidget(splitter)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget.addTab(tickers_widget, "üìä –¢–∏–∫–µ—Ä—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.tickers_data = []
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º refresh_tickers() –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    def create_overview_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±–∑–æ—Ä–∞"""
        overview_widget = QWidget()
        layout = QVBoxLayout(overview_widget)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –±–∞–ª–∞–Ω—Å–æ–º
        balance_frame = QGroupBox("üí∞ –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞")
        balance_layout = QGridLayout(balance_frame)
        
        # –ú–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        self.total_balance_label = QLabel("$0.00")
        self.available_balance_label = QLabel("$0.00")
        self.unrealized_pnl_label = QLabel("$0.00")
        self.daily_pnl_label = QLabel("$0.00")
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞
        balance_style = "QLabel { font-size: 16px; font-weight: bold; padding: 5px; }"
        self.total_balance_label.setStyleSheet(balance_style + "color: #2c3e50;")
        self.available_balance_label.setStyleSheet(balance_style + "color: #27ae60;")
        self.unrealized_pnl_label.setStyleSheet(balance_style)
        self.daily_pnl_label.setStyleSheet(balance_style)
        
        balance_layout.addWidget(QLabel("–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:"), 0, 0)
        balance_layout.addWidget(self.total_balance_label, 0, 1)
        balance_layout.addWidget(QLabel("–î–æ—Å—Ç—É–ø–Ω–æ:"), 0, 2)
        balance_layout.addWidget(self.available_balance_label, 0, 3)
        balance_layout.addWidget(QLabel("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L:"), 1, 0)
        balance_layout.addWidget(self.unrealized_pnl_label, 1, 1)
        balance_layout.addWidget(QLabel("–î–Ω–µ–≤–Ω–æ–π P&L:"), 1, 2)
        balance_layout.addWidget(self.daily_pnl_label, 1, 3)
        
        layout.addWidget(balance_frame)
        
        # –ü–∞–Ω–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞
        balance_limiter_frame = QGroupBox("üîí –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –±–∞–ª–∞–Ω—Å–∞")
        balance_limiter_layout = QGridLayout(balance_limiter_frame)
        
        # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        balance_limiter_layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞:"), 0, 0)
        self.balance_percent_slider = QSlider(Qt.Horizontal)
        self.balance_percent_slider.setRange(1, 100)
        self.balance_percent_slider.setValue(50)
        self.balance_percent_slider.setTickPosition(QSlider.TicksBelow)
        self.balance_percent_slider.setTickInterval(10)
        self.balance_percent_slider.valueChanged.connect(self.update_balance_limit_display)
        balance_limiter_layout.addWidget(self.balance_percent_slider, 0, 1)
        
        self.balance_percent_label = QLabel("50%")
        self.balance_percent_label.setStyleSheet("font-weight: bold; color: #2980b9;")
        balance_limiter_layout.addWidget(self.balance_percent_label, 0, 2)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        balance_limiter_layout.addWidget(QLabel("–°—É–º–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"), 1, 0)
        self.balance_limit_amount_label = QLabel("$0.00")
        self.balance_limit_amount_label.setStyleSheet("font-weight: bold; color: #2980b9;")
        balance_limiter_layout.addWidget(self.balance_limit_amount_label, 1, 1)
        
        # –¢–∞–π–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        balance_limiter_layout.addWidget(QLabel("–¢–∞–π–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"), 2, 0)
        self.balance_limit_timer_label = QLabel("12:00:00")
        self.balance_limit_timer_label.setStyleSheet("font-weight: bold; color: #e74c3c;")
        balance_limiter_layout.addWidget(self.balance_limit_timer_label, 2, 1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–µ–º
        buttons_layout = QHBoxLayout()
        self.activate_limit_button = QPushButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
        self.activate_limit_button.clicked.connect(self.activate_balance_limit)
        self.activate_limit_button.setStyleSheet("background-color: #2ecc71; color: white; font-weight: bold;")
        buttons_layout.addWidget(self.activate_limit_button)
        
        self.deactivate_limit_button = QPushButton("–û—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
        self.deactivate_limit_button.clicked.connect(self.deactivate_balance_limit)
        self.deactivate_limit_button.setStyleSheet("background-color: #e74c3c; color: white; font-weight: bold;")
        self.deactivate_limit_button.setEnabled(False)
        buttons_layout.addWidget(self.deactivate_limit_button)
        
        balance_limiter_layout.addLayout(buttons_layout, 3, 0, 1, 3)
        
        layout.addWidget(balance_limiter_frame)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–∞—Ö
        ticker_info_frame = QGroupBox("üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ä–∞—Ö")
        ticker_info_layout = QGridLayout(ticker_info_frame)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
        ticker_info_layout.addWidget(QLabel("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤:"), 0, 0)
        self.last_ticker_update_label = QLabel("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        self.last_ticker_update_label.setStyleSheet("font-weight: bold; color: #2980b9;")
        ticker_info_layout.addWidget(self.last_ticker_update_label, 0, 1)
        
        layout.addWidget(ticker_info_frame)
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–∞—Ö
        ticker_info_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤:"), 1, 0)
        self.ticker_count_label = QLabel("0")
        self.ticker_count_label.setStyleSheet("font-weight: bold;")
        ticker_info_layout.addWidget(self.ticker_count_label, 1, 1)
        
        # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
        self.last_ticker_update_label = QLabel("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        self.last_ticker_update_label.setStyleSheet("font-weight: bold;")
        ticker_info_layout.addWidget(QLabel("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤:"), 2, 0)
        ticker_info_layout.addWidget(self.last_ticker_update_label, 2, 1)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–∞—Ö
        self.update_tickers_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–∞—Ö")
        self.update_tickers_button.clicked.connect(self.update_ticker_info)
        ticker_info_layout.addWidget(self.update_tickers_button, 3, 0, 1, 2)
        
        layout.addWidget(ticker_info_frame)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        stats_frame = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        stats_layout = QGridLayout(stats_frame)
        
        self.trades_count_label = QLabel("0")
        self.win_rate_label = QLabel("0%")
        self.daily_volume_label = QLabel("$0.00")
        self.daily_limit_label = QLabel("$0.00")
        
        stats_style = "QLabel { font-size: 14px; font-weight: bold; color: #34495e; }"
        self.trades_count_label.setStyleSheet(stats_style)
        self.win_rate_label.setStyleSheet(stats_style)
        self.daily_volume_label.setStyleSheet(stats_style)
        self.daily_limit_label.setStyleSheet(stats_style)
        
        stats_layout.addWidget(QLabel("–°–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è:"), 0, 0)
        stats_layout.addWidget(self.trades_count_label, 0, 1)
        stats_layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö:"), 0, 2)
        stats_layout.addWidget(self.win_rate_label, 0, 3)
        stats_layout.addWidget(QLabel("–î–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º:"), 1, 0)
        stats_layout.addWidget(self.daily_volume_label, 1, 1)
        stats_layout.addWidget(QLabel("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç:"), 1, 2)
        stats_layout.addWidget(self.daily_limit_label, 1, 3)
        
        layout.addWidget(stats_frame)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = QGroupBox("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        control_layout = QVBoxLayout(control_frame)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        main_buttons_layout = QHBoxLayout()
        
        self.emergency_stop_btn = QPushButton("üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
        self.emergency_stop_btn.setStyleSheet(
            "QPushButton { background-color: #e74c3c; color: white; font-weight: bold; padding: 10px; }"
        )
        self.emergency_stop_btn.clicked.connect(self.emergency_stop)
        
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.refresh_btn.clicked.connect(self.refresh_data)
        
        main_buttons_layout.addWidget(self.emergency_stop_btn)
        main_buttons_layout.addWidget(self.refresh_btn)
        main_buttons_layout.addStretch()
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        manual_trading_layout = QHBoxLayout()
        
        self.buy_lowest_btn = QPushButton("üí∞ –ö—É–ø–∏—Ç—å —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π")
        self.buy_lowest_btn.setStyleSheet(
            "QPushButton { background-color: #27ae60; color: white; font-weight: bold; padding: 8px; }"
            "QPushButton:hover { background-color: #229954; }"
            "QPushButton:disabled { background-color: #95a5a6; }"
        )
        self.buy_lowest_btn.clicked.connect(self.buy_lowest_ticker)
        
        self.sell_lowest_btn = QPushButton("üí∏ –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π")
        self.sell_lowest_btn.setStyleSheet(
            "QPushButton { background-color: #e67e22; color: white; font-weight: bold; padding: 8px; }"
            "QPushButton:hover { background-color: #d35400; }"
            "QPushButton:disabled { background-color: #95a5a6; }"
        )
        self.sell_lowest_btn.clicked.connect(self.sell_lowest_ticker)
        
        manual_trading_layout.addWidget(self.buy_lowest_btn)
        manual_trading_layout.addWidget(self.sell_lowest_btn)
        manual_trading_layout.addStretch()
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –∫–Ω–æ–ø–∫–∞ –∫–æ–Ω–Ω–µ–∫—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
        neural_network_layout = QHBoxLayout()
        
        self.connect_neural_btn = QPushButton("üß† –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å")
        self.connect_neural_btn.setStyleSheet(
            "QPushButton { background-color: #9b59b6; color: white; font-weight: bold; padding: 8px; }"
            "QPushButton:hover { background-color: #8e44ad; }"
            "QPushButton:disabled { background-color: #95a5a6; }"
        )
        self.connect_neural_btn.clicked.connect(self.connect_neural_network)
        
        self.neural_status_label = QLabel("‚ùå –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        self.neural_status_label.setStyleSheet("color: #e74c3c; font-weight: bold; padding: 8px;")
        
        neural_network_layout.addWidget(self.connect_neural_btn)
        neural_network_layout.addWidget(self.neural_status_label)
        neural_network_layout.addStretch()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout.addLayout(main_buttons_layout)
        control_layout.addLayout(manual_trading_layout)
        control_layout.addLayout(neural_network_layout)
        
        layout.addWidget(control_frame)
        
        # –ü–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–æ–≤
        assets_frame = QGroupBox("üíé –ê–∫—Ç–∏–≤—ã")
        assets_layout = QVBoxLayout(assets_frame)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–æ–≤
        self.assets_table = QTableWidget()
        self.assets_table.setColumnCount(4)
        self.assets_table.setHorizontalHeaderLabels([
            "–ê–∫—Ç–∏–≤", "–ë–∞–ª–∞–Ω—Å", "USD –°—Ç–æ–∏–º–æ—Å—Ç—å", "–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–æ–≤
        assets_header = self.assets_table.horizontalHeader()
        assets_header.setStretchLastSection(True)
        for i in range(3):
            assets_header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
        
        self.assets_table.setAlternatingRowColors(True)
        self.assets_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.assets_table.setMaximumHeight(200)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–æ–≤, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –≤–∏–¥–∏–º—ã–º
        self.assets_table.setStyleSheet(
            "QTableWidget { alternate-background-color: #f0f0f0; background-color: white; }"
            "QTableWidget::item { color: #2c3e50; }"
        )
        
        assets_layout.addWidget(self.assets_table)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
        refresh_assets_layout = QHBoxLayout()
        self.refresh_assets_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤—ã")
        self.refresh_assets_btn.setStyleSheet(
            "QPushButton { background-color: #3498db; color: white; font-weight: bold; padding: 8px; }"
            "QPushButton:hover { background-color: #2980b9; }"
            "QPushButton:disabled { background-color: #95a5a6; }"
        )
        self.refresh_assets_btn.clicked.connect(self.refresh_data)
        refresh_assets_layout.addStretch()
        refresh_assets_layout.addWidget(self.refresh_assets_btn)
        assets_layout.addLayout(refresh_assets_layout)
        
        layout.addWidget(assets_frame)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
        layout.addStretch()
        
        self.tab_widget.addTab(overview_widget, "üìà –û–±–∑–æ—Ä")
    

    
    def create_history_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        history_widget = QWidget()
        layout = QVBoxLayout(history_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        header_label.setStyleSheet("QLabel { font-size: 16px; font-weight: bold; margin: 10px; }")
        layout.addWidget(header_label)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(7)
        self.history_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–°–∏–º–≤–æ–ª", "–°—Ç–æ—Ä–æ–Ω–∞", "–†–∞–∑–º–µ—Ä", "–¶–µ–Ω–∞", "P&L", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.history_table.horizontalHeader()
        header.setStretchLastSection(True)
        for i in range(6):
            header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
        
        self.history_table.setAlternatingRowColors(True)
        self.history_table.setSelectionBehavior(QTableWidget.SelectRows)
        
        layout.addWidget(self.history_table)
        
        self.tab_widget.addTab(history_widget, "üìã –ò—Å—Ç–æ—Ä–∏—è")
    
    def create_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        from PySide6.QtWidgets import QLineEdit
        
        settings_widget = QWidget()
        layout = QVBoxLayout(settings_widget)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
        api_group = QGroupBox("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API Bybit")
        api_layout = QGridLayout(api_group)
        
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–µ–π
        self.api_key_input = QLineEdit()
        self.api_key_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ API Key")
        self.api_key_input.setEchoMode(QLineEdit.Password)
        
        self.api_secret_input = QLineEdit()
        self.api_secret_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ API Secret")
        self.api_secret_input.setEchoMode(QLineEdit.Password)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π
        test_api_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏")
        test_api_btn.clicked.connect(self.test_api_keys)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–µ–π
        save_api_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏")
        save_api_btn.clicked.connect(self.save_api_keys)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ API –∫–ª—é—á–µ–π
        clear_api_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–ª—é—á–∏")
        clear_api_btn.clicked.connect(self.clear_api_keys)
        clear_api_btn.setStyleSheet(
            "QPushButton { background-color: #e74c3c; color: white; font-weight: bold; }"
            "QPushButton:hover { background-color: #c0392b; }"
        )
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ API
        self.api_status_label = QLabel("‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        self.api_status_label.setStyleSheet("QLabel { color: #f39c12; font-weight: bold; }")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ layout
        api_layout.addWidget(QLabel("API Key:"), 0, 0)
        api_layout.addWidget(self.api_key_input, 0, 1)
        api_layout.addWidget(QLabel("API Secret:"), 1, 0)
        api_layout.addWidget(self.api_secret_input, 1, 1)
        api_layout.addWidget(self.api_status_label, 2, 0, 1, 2)
        
        buttons_layout = QHBoxLayout()
        buttons_layout.addWidget(test_api_btn)
        buttons_layout.addWidget(save_api_btn)
        buttons_layout.addWidget(clear_api_btn)
        api_layout.addLayout(buttons_layout, 3, 0, 1, 2)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        layout.addWidget(api_group)
        layout.addStretch()
        
        self.tab_widget.addTab(settings_widget, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    def create_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        logs_widget = QWidget()
        layout = QVBoxLayout(logs_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
        header_label.setStyleSheet("QLabel { font-size: 16px; font-weight: bold; margin: 10px; }")
        layout.addWidget(header_label)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_text = QTextEdit()
        self.logs_text.setReadOnly(True)
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        
        # –°—Ç–∏–ª—å –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_text.setStyleSheet("""
            QTextEdit {
                background-color: #2c3e50;
                color: #ecf0f1;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 12px;
                border: 1px solid #34495e;
            }
        """)
        
        layout.addWidget(self.logs_text)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        logs_control_layout = QHBoxLayout()
        
        clear_logs_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        clear_logs_btn.clicked.connect(self.clear_logs)
        
        export_logs_btn = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤")
        export_logs_btn.clicked.connect(self.export_logs)
        
        logs_control_layout.addWidget(clear_logs_btn)
        logs_control_layout.addWidget(export_logs_btn)
        logs_control_layout.addStretch()
        
        layout.addLayout(logs_control_layout)
        
        self.tab_widget.addTab(logs_widget, "üìù –õ–æ–≥–∏")
    

    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_bar.addWidget(self.status_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.last_update_label = QLabel("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–∏–∫–æ–≥–¥–∞")
        self.status_bar.addPermanentWidget(self.last_update_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤
        self.ticker_update_label = QLabel("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤: –Ω–∏–∫–æ–≥–¥–∞")
        self.status_bar.addPermanentWidget(self.ticker_update_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞
        self.balance_limit_status_label = QLabel("–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –±–∞–ª–∞–Ω—Å–∞: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
        self.balance_limit_status_label.setStyleSheet("color: gray;")
        self.status_bar.addPermanentWidget(self.balance_limit_status_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∞–π–º–µ—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞
        self.balance_limit_timer_label = QLabel("")
        self.balance_limit_timer_label.setVisible(False)
        self.status_bar.addPermanentWidget(self.balance_limit_timer_label)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.data_timer = QTimer()
        self.data_timer.timeout.connect(self.refresh_data)
        self.data_timer.start(30000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
    def load_api_keys(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π –≤ –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        try:
            # –ï—Å–ª–∏ API –∫–ª—é—á–∏ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ __init__, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
            if hasattr(self, 'api_key') and self.api_key:
                self.api_key_input.setText(self.api_key)
                
            if hasattr(self, 'api_secret') and self.api_secret:
                self.api_secret_input.setText(self.api_secret)
                
            # –ï—Å–ª–∏ –æ–±–∞ –∫–ª—é—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if (hasattr(self, 'api_key') and self.api_key and 
                hasattr(self, 'api_secret') and self.api_secret):
                self.api_status_label.setText("‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                self.api_status_label.setStyleSheet("QLabel { color: #27ae60; font-weight: bold; }")
                self.logger.info("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API –∫–ª—é—á–µ–π: {e}")
            self.api_status_label.setText("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π")
            self.api_status_label.setStyleSheet("QLabel { color: #e74c3c; font-weight: bold; }")
            
    def clear_api_keys(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ API –∫–ª—é—á–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å API –∫–ª—é—á–∏?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
                self.api_key_input.clear()
                self.api_secret_input.clear()
                
                # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                self.api_key = ""
                self.api_secret = ""
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                try:
                    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "config.py")
                    
                    # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
                    with open(config_path, "r", encoding="utf-8") as file:
                        content = file.read()
                    
                    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π API –∫–ª—é—á–µ–π
                    api_key_pattern = r"API_KEY\s*=\s*['\"].*['\"]" 
                    api_secret_pattern = r"API_SECRET\s*=\s*['\"].*['\"]" 
                    
                    # –ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    content = re.sub(api_key_pattern, "API_KEY = ''" , content)
                    content = re.sub(api_secret_pattern, "API_SECRET = ''" , content)
                    
                    # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
                    with open(config_path, "w", encoding="utf-8") as file:
                        file.write(content)
                    
                    # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ keys, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    keys_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "keys")
                    if os.path.exists(keys_path):
                        try:
                            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª keys
                            os.remove(keys_path)
                            self.logger.info("–§–∞–π–ª keys —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ keys: {e}")
                        
                    self.logger.info("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                    raise
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                self.api_status_label.setText("‚ö†Ô∏è API –∫–ª—é—á–∏ –æ—á–∏—â–µ–Ω—ã")
                self.api_status_label.setStyleSheet("QLabel { color: #f39c12; font-weight: bold; }")
                
                # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏
                self.update_connection_status(False)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.logger.info("API –∫–ª—é—á–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.add_log_message("üóëÔ∏è API –∫–ª—é—á–∏ –æ—á–∏—â–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                QMessageBox.information(
                    self, "–£—Å–ø–µ—Ö", 
                    "API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞, —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ñ–∞–π–ª–∞ keys."
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ API –∫–ª—é—á–µ–π: {e}")
            self.handle_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ API –∫–ª—é—á–µ–π", str(e))
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #ecf0f1;
                color: #2c3e50;
            }
            
            QTabWidget::pane {
                border: 1px solid #bdc3c7;
                background-color: white;
                color: #2c3e50;
            }
            
            QTabBar::tab {
                background-color: #bdc3c7;
                color: #2c3e50;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            
            QTabBar::tab:selected {
                background-color: white;
                color: #2c3e50;
                border-bottom: 2px solid #3498db;
            }
            
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
                color: #2c3e50;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #2c3e50;
            }
            
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            
            QPushButton:hover {
                background-color: #2980b9;
            }
            
            QPushButton:pressed {
                background-color: #21618c;
            }
            
            QPushButton:disabled {
                background-color: #95a5a6;
                color: #7f8c8d;
            }
            
            QTableWidget {
                gridline-color: #bdc3c7;
                background-color: white;
                color: #2c3e50;
                alternate-background-color: #f8f9fa;
            }
            
            QHeaderView::section {
                background-color: #34495e;
                color: white;
                padding: 8px;
            }
            
            QLabel {
                color: #2c3e50;
            }
            
            QLineEdit {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                padding: 6px;
            }
            
            QTextEdit {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
            }
            
            QComboBox {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                padding: 6px;
            }
            
            QSpinBox, QDoubleSpinBox {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                padding: 6px;
            }
            
            QCheckBox {
                color: #2c3e50;
            }
            
            QRadioButton {
                color: #2c3e50;
            }
            
            QListWidget {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
            }
            
            QTreeWidget {
                background-color: white;
                color: #2c3e50;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
            }
                border: none;
                font-weight: bold;
            }
        """)
    
    def start_trading_worker(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
            self.trading_worker = TradingWorker(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet
            )
            print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
            self.trading_worker.balance_updated.connect(self.update_balance)
            self.trading_worker.positions_updated.connect(self.update_positions)
            self.trading_worker.trade_executed.connect(self.add_trade_to_history)
            self.trading_worker.log_message.connect(self.add_log_message)
            self.trading_worker.error_occurred.connect(self.handle_error)
            self.trading_worker.status_updated.connect(self.update_connection_status)
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
            print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
            self.trading_worker.start()
            print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º bybit_client –≤ PortfolioTab –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if hasattr(self, 'portfolio_tab') and self.trading_worker.bybit_client:
                print("üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ bybit_client –≤ PortfolioTab...")
                self.bybit_client = self.trading_worker.bybit_client
                self.portfolio_tab.set_api_client(self.bybit_client)
                print("‚úÖ bybit_client –ø–µ—Ä–µ–¥–∞–Ω –≤ PortfolioTab")
                self.add_log_message("‚úÖ API –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ PortfolioTab")
                
                # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ bybit_client
                print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º config_manager, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if self.config_manager is None:
                    from src.core.config_manager import ConfigManager
                    self.config_manager = ConfigManager()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º db_manager, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if self.db_manager is None:
                    from src.database.db_manager import DBManager
                    self.db_manager = DBManager()
                
                self.create_strategies_tab()
                print("‚úÖ –í–∫–ª–∞–¥–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–æ–∑–¥–∞–Ω–∞")
            
            self.add_log_message("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞: {e}"
            print(f"‚ùå {error_msg}")
            print(f"Traceback: {traceback.format_exc()}")
            self.handle_error(error_msg)
    
    def update_balance_from_json(self, balance_json: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
            balance_info = json.loads(balance_json)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ Decimal –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã Decimal
            if 'total_wallet_usd' in balance_info and isinstance(balance_info['total_wallet_usd'], str):
                balance_info['total_wallet_usd'] = Decimal(balance_info['total_wallet_usd'])
            if 'total_available_usd' in balance_info and isinstance(balance_info['total_available_usd'], str):
                balance_info['total_available_usd'] = Decimal(balance_info['total_available_usd'])
                
            # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            self.update_balance(balance_info)
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
            traceback.print_exc()
    
    def update_balance(self, balance_info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç API Bybit"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
            if not hasattr(self, 'tabs'):
                self.add_log_message("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                return
                
            self.current_balance = balance_info
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ: {balance_info}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            total_balance = 0
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–æ–≤
            self.assets_table.setRowCount(0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            if 'coins' in balance_info:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º 'coins'
                self.logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å 'coins': {balance_info['coins']}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º total_wallet_usd –¥–ª—è –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ USD
                if 'total_wallet_usd' in balance_info:
                    total_balance = float(balance_info.get('total_wallet_usd', 0))
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞, —Å—É–º–º–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã
                    total_balance = sum(float(balance) for balance in balance_info.get('coins', {}).values())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö coins
                coins_data = balance_info.get('coins', {})
                if isinstance(coins_data, dict):
                    # –ï—Å–ª–∏ coins - —Å–ª–æ–≤–∞—Ä—å (–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ)
                    for coin_name, balance in coins_data.items():
                        row_position = self.assets_table.rowCount()
                        self.assets_table.insertRow(row_position)
                        
                        # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                        self.assets_table.setItem(row_position, 0, QTableWidgetItem(coin_name))
                        
                        # –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã (—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                        balance_str = f"{float(balance):.8f}".rstrip('0').rstrip('.') if float(balance) < 1 else f"{float(balance):.2f}"
                        self.assets_table.setItem(row_position, 1, QTableWidgetItem(balance_str))
                        
                        # USD —Å—Ç–æ–∏–º–æ—Å—Ç—å - –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
                        self.assets_table.setItem(row_position, 2, QTableWidgetItem("N/A"))
                        
                        # –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É - –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π
                        self.assets_table.setItem(row_position, 3, QTableWidgetItem("N/A"))
                        
                        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {coin_name} = {balance_str}")
                elif isinstance(coins_data, list):
                    # –ï—Å–ª–∏ coins - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                    for coin_item in coins_data:
                        coin_name = coin_item.get('coin')
                        balance = coin_item.get('walletBalance', '0')
                        usd_value = coin_item.get('usdValue', 'N/A')
                        available = coin_item.get('availableToWithdraw', 'N/A')
                        
                        row_position = self.assets_table.rowCount()
                        self.assets_table.insertRow(row_position)
                        
                        # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                        self.assets_table.setItem(row_position, 0, QTableWidgetItem(coin_name))
                        
                        # –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã (—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                        try:
                            balance_float = float(balance)
                            balance_str = f"{balance_float:.8f}".rstrip('0').rstrip('.') if balance_float < 1 else f"{balance_float:.2f}"
                        except (ValueError, TypeError):
                            balance_str = str(balance)
                        self.assets_table.setItem(row_position, 1, QTableWidgetItem(balance_str))
                        
                        # USD —Å—Ç–æ–∏–º–æ—Å—Ç—å
                        self.assets_table.setItem(row_position, 2, QTableWidgetItem(str(usd_value)))
                        
                        # –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É
                        self.assets_table.setItem(row_position, 3, QTableWidgetItem(str(available)))
                        
                        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {coin_name} = {balance_str} (USD: {usd_value})")
            
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UNIFIED –∞–∫–∫–∞—É–Ω—Ç–∞
            elif 'list' in balance_info:
                self.logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UNIFIED –∞–∫–∫–∞—É–Ω—Ç–∞")
                account_list = balance_info.get('list', [])
                
                for account in account_list:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
                    if 'totalEquity' in account:
                        total_balance = float(account.get('totalEquity', 0))
                    elif 'totalWalletBalance' in account:
                        total_balance = float(account.get('totalWalletBalance', 0))
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
                    coin_list = account.get('coin', [])
                    if isinstance(coin_list, list):
                        for coin_item in coin_list:
                            coin_name = coin_item.get('coin', '')
                            balance = coin_item.get('walletBalance', '0')
                            usd_value = coin_item.get('usdValue', 'N/A')
                            available = coin_item.get('availableToWithdraw', 'N/A')
                            
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                            try:
                                if float(balance) == 0:
                                    continue
                            except (ValueError, TypeError):
                                pass
                            
                            row_position = self.assets_table.rowCount()
                            self.assets_table.insertRow(row_position)
                            
                            # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                            self.assets_table.setItem(row_position, 0, QTableWidgetItem(coin_name))
                            
                            # –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã (—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                            try:
                                balance_float = float(balance)
                                balance_str = f"{balance_float:.8f}".rstrip('0').rstrip('.') if balance_float < 1 else f"{balance_float:.2f}"
                            except (ValueError, TypeError):
                                balance_str = str(balance)
                            self.assets_table.setItem(row_position, 1, QTableWidgetItem(balance_str))
                            
                            # USD —Å—Ç–æ–∏–º–æ—Å—Ç—å
                            self.assets_table.setItem(row_position, 2, QTableWidgetItem(str(usd_value)))
                            
                            # –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É
                            self.assets_table.setItem(row_position, 3, QTableWidgetItem(str(available)))
                            
                            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {coin_name} = {balance_str} (USD: {usd_value})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            self.total_balance_label.setText(f"${total_balance:.2f}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ total_balance_usd –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            self.total_balance_usd = total_balance
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–æ–≤ –ø–æ USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            self.assets_table.sortItems(2, Qt.DescendingOrder)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            self.update_balance_limit_display()
            
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å: ${total_balance:.2f}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
            self.handle_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            if 'totalWalletBalance' in balance_info:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä—è–º—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                total_balance = float(balance_info.get('totalWalletBalance', 0))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                self.total_balance_label.setText(f"${total_balance:.2f}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ total_balance_usd –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                self.total_balance_usd = total_balance
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                self.update_balance_limit_display()
                
                self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥): ${total_balance:.2f}")
            else:
                # –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç, –≥–¥–µ –∫–ª—é—á–∏ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç
                # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
                backup_total_balance = 0
                for coin_name, balance in balance_info.items():
                    if coin_name not in ['totalEquity', 'totalWalletBalance', 'totalAvailableBalance']:
                        try:
                            balance_float = float(balance)
                            if balance_float > 0:
                                backup_total_balance += balance_float
                        except (ValueError, TypeError):
                            continue
                
                if backup_total_balance > 0:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                    self.total_balance_label.setText(f"${backup_total_balance:.2f}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ total_balance_usd –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                    self.total_balance_usd = backup_total_balance
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                    self.update_balance_limit_display()
                    
                    self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ 2): ${backup_total_balance:.2f}")
            
            # –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ - –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 0
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API
            unrealized_pnl = 0
            
            self.total_balance_label.setText(f"${total_balance:.2f}")
            self.available_balance_label.setText(f"${available_balance:.2f}")
            self.unrealized_pnl_label.setText(f"${unrealized_pnl:.2f}")
            
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å: total=${total_balance:.2f}, available=${available_balance:.2f}")
            
            # –¶–≤–µ—Ç –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ P&L
            if unrealized_pnl > 0:
                self.unrealized_pnl_label.setStyleSheet(
                    "QLabel { font-size: 16px; font-weight: bold; padding: 5px; color: #27ae60; }"
                )
            elif unrealized_pnl < 0:
                self.unrealized_pnl_label.setStyleSheet(
                    "QLabel { font-size: 16px; font-weight: bold; padding: 5px; color: #e74c3c; }"
                )
            else:
                self.unrealized_pnl_label.setStyleSheet(
                    "QLabel { font-size: 16px; font-weight: bold; padding: 5px; color: #34495e; }"
                )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            daily_limit = available_balance * 0.2
            self.daily_limit_label.setText(f"${daily_limit:.2f}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.last_update_label.setText(
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ - –ø–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç balance_info
            self.update_assets_display(balance_info)
    
    def update_assets_display(self, balance_info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–ª–∞–Ω—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not hasattr(self, 'assets_table'):
                self.add_log_message("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                return
                
            if not balance_info:
                self.assets_table.setRowCount(0)
                self.add_log_message("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            coins_list = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            if 'coins' in balance_info:
                # –§–æ—Ä–º–∞—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º 'coins'
                coins_dict = balance_info['coins']
                for coin_name, balance in coins_dict.items():
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ float –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI
                    balance_float = float(balance)
                    if balance_float > 0:
                        coins_list.append({
                            'coin': coin_name,
                            'balance': balance_float
                        })
            else:
                # –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç, –≥–¥–µ –∫–ª—é—á–∏ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç
                for coin_name, balance in balance_info.items():
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ API
                    if coin_name in ['totalEquity', 'totalWalletBalance', 'totalAvailableBalance']:
                        continue
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –≤ float –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI
                    try:
                        balance_float = float(balance)
                        if balance_float > 0:
                            coins_list.append({
                                'coin': coin_name,
                                'balance': balance_float
                            })
                    except (ValueError, TypeError):
                        continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ –±–∞–ª–∞–Ω—Å—É (–æ—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π)
            sorted_coins = sorted(coins_list, key=lambda x: x['balance'], reverse=True)
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            self.assets_table.clearContents()
            self.assets_table.setRowCount(len(sorted_coins))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            self.assets_table.setColumnCount(3)
            self.assets_table.setHorizontalHeaderLabels(['–°—á—ë—Ç/–ú–æ–Ω–µ—Ç–∞', '–ö–æ–ª-–≤–æ', '‚âà USD'])
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
            for i, coin in enumerate(sorted_coins):
                coin_name = coin['coin']
                balance_value = coin['balance']
                
                # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                coin_item = QTableWidgetItem(coin_name)
                coin_item.setTextAlignment(Qt.AlignCenter)
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
                if coin_name in ['BTC', 'ETH']:
                    # –î–ª—è BTC –∏ ETH –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    precision = 8
                elif balance_value < 0.01:
                    # –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤
                    precision = 8
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    precision = 4
                
                balance_item = QTableWidgetItem(f"{balance_value:.{precision}f}")
                balance_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                
                # –î–ª—è USD –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ü–µ–Ω–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ USDT
                if coin_name == 'USDT':
                    usd_value = balance_value
                else:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ USD —á–µ—Ä–µ–∑ API, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    usd_value = balance_value  # –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                
                # USD –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                usd_item = QTableWidgetItem(f"${usd_value:.2f}")
                usd_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
                self.assets_table.setItem(i, 0, coin_item)
                self.assets_table.setItem(i, 1, balance_item)
                self.assets_table.setItem(i, 2, usd_item)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É
            self.assets_table.resizeColumnsToContents()
            self.assets_table.viewport().update()
            self.add_log_message(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–æ–≤: {len(sorted_coins)}")
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤: {e}")
            import traceback
            self.add_log_message(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
    
    def update_positions(self, positions: List[dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not hasattr(self, 'positions_table'):
                self.add_log_message("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            if not positions or not isinstance(positions, list):
                self.add_log_message("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç
                self.positions_table.clearContents()
                self.positions_table.setRowCount(0)
                return
                
            self.current_positions = positions
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            self.positions_table.clearContents()
            self.positions_table.setRowCount(len(positions))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            price_history = {}
            try:
                all_price_history = self.db_manager.get_price_history()
                for ph in all_price_history:
                    price_history[ph[1]] = ph  # –ò–Ω–¥–µ–∫—Å 1 - —ç—Ç–æ symbol
            except Exception as e:
                self.add_log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ P&L (–æ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫ –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É) –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
            # –∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–ø–æ—Ç–∞
            positions.sort(key=lambda x: float(x.get('unrealisedPnl', 0)) if x.get('category') != 'spot' else float(x.get('positionValue', 0)), reverse=True)
            
            for row, position in enumerate(positions):
                symbol = position.get('symbol', '')
                category = position.get('category', 'Unknown').upper()
                side = position.get('side', '')
                size = float(position.get('size', 0))
                entry_price = float(position.get('avgPrice', 0))
                unrealized_pnl = float(position.get('unrealisedPnl', 0))
                
                # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
                symbol_item = QTableWidgetItem(symbol)
                symbol_item.setTextAlignment(Qt.AlignCenter)
                
                category_item = QTableWidgetItem(category)
                category_item.setTextAlignment(Qt.AlignCenter)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ (Buy/Sell)
                side_item = QTableWidgetItem(side)
                side_item.setTextAlignment(Qt.AlignCenter)
                if side.upper() == "BUY":
                    side_item.setFont(QFont("Arial", 9, QFont.Bold))
                elif side.upper() == "SELL":
                    side_item.setFont(QFont("Arial", 9, QFont.Bold))
                
                # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                size_format = "{:.8f}" if size < 0.0001 else "{:.4f}"
                size_item = QTableWidgetItem(size_format.format(size))
                size_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                
                # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
                entry_price_item = QTableWidgetItem(f"${entry_price:.6f}")
                entry_price_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
                self.positions_table.setItem(row, 0, symbol_item)
                self.positions_table.setItem(row, 1, category_item)
                self.positions_table.setItem(row, 2, side_item)
                self.positions_table.setItem(row, 3, size_item)
                self.positions_table.setItem(row, 4, entry_price_item)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω
                current_price = 0
                change_1h = 0
                change_24h = 0
                change_30d = 0
                
                # –î–ª—è —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –±–µ—Ä–µ–º —Ü–µ–Ω—É –∏–∑ markPrice
                if category.upper() == 'SPOT' and 'markPrice' in position:
                    current_price = float(position.get('markPrice', 0))
                    # –î–ª—è —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–∑ API –≤ –±—É–¥—É—â–µ–º
                elif symbol in price_history:
                    ph = price_history[symbol]
                    current_price = ph[2]  # –ò–Ω–¥–µ–∫—Å 2 - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                    change_1h = ph[8]      # –ò–Ω–¥–µ–∫—Å 8 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 1—á
                    change_24h = ph[9]     # –ò–Ω–¥–µ–∫—Å 9 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á
                    change_30d = ph[11]    # –ò–Ω–¥–µ–∫—Å 11 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 30–¥
                
                # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                current_price_item = QTableWidgetItem(f"${current_price:.6f}")
                current_price_item.setForeground(QColor("#2c3e50"))
                current_price_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                self.positions_table.setItem(row, 5, current_price_item)
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 1—á
                change_1h_text = f"+{change_1h:.2f}%" if change_1h > 0 else f"{change_1h:.2f}%"
                change_1h_item = QTableWidgetItem(change_1h_text)
                change_1h_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                if change_1h > 0 or change_1h < 0:
                    change_1h_item.setFont(QFont("Arial", 9, QFont.Bold))
                self.positions_table.setItem(row, 6, change_1h_item)
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24—á
                change_24h_text = f"+{change_24h:.2f}%" if change_24h > 0 else f"{change_24h:.2f}%"
                change_24h_item = QTableWidgetItem(change_24h_text)
                change_24h_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                if change_24h > 0 or change_24h < 0:
                    change_24h_item.setFont(QFont("Arial", 9, QFont.Bold))
                self.positions_table.setItem(row, 7, change_24h_item)
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 30–¥
                change_30d_text = f"+{change_30d:.2f}%" if change_30d > 0 else f"{change_30d:.2f}%"
                change_30d_item = QTableWidgetItem(change_30d_text)
                change_30d_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                if change_30d > 0 or change_30d < 0:
                    change_30d_item.setFont(QFont("Arial", 9, QFont.Bold))
                self.positions_table.setItem(row, 8, change_30d_item)
                
                # P&L —Å —Ü–≤–µ—Ç–æ–º –∏ –∑–Ω–∞–∫–æ–º
                pnl_text = f"+${unrealized_pnl:.2f}" if unrealized_pnl > 0 else f"${unrealized_pnl:.2f}"
                pnl_item = QTableWidgetItem(pnl_text)
                pnl_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                if unrealized_pnl > 0 or unrealized_pnl < 0:
                    pnl_item.setFont(QFont("Arial", 9, QFont.Bold))
                
                self.positions_table.setItem(row, 9, pnl_item)
            
            self.add_log_message(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            import traceback
            self.add_log_message(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
    
    def add_trade_to_history(self, trade_info: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            self.trade_history.append(trade_info)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏
            row_count = self.history_table.rowCount()
            self.history_table.insertRow(0)  # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
            
            timestamp = trade_info.get('timestamp', '')
            if timestamp:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime('%H:%M:%S')
            else:
                time_str = datetime.now().strftime('%H:%M:%S')
            
            symbol = trade_info.get('symbol', '')
            side = trade_info.get('side', '')
            size = float(trade_info.get('size', 0))
            price = trade_info.get('price', 'Market')
            pnl = trade_info.get('pnl', 'N/A')
            
            analysis = trade_info.get('analysis', {})
            confidence = analysis.get('confidence', 0) if analysis else 0
            
            self.history_table.setItem(0, 0, QTableWidgetItem(time_str))
            self.history_table.setItem(0, 1, QTableWidgetItem(symbol))
            
            # –°—Ç–æ—Ä–æ–Ω–∞ —Å —Ü–≤–µ—Ç–æ–º
            side_item = QTableWidgetItem(side)
            if side == 'Buy':
                side_item.setForeground(QColor("#27ae60"))
            else:
                side_item.setForeground(QColor("#e74c3c"))
            self.history_table.setItem(0, 2, side_item)
            
            self.history_table.setItem(0, 3, QTableWidgetItem(f"{size:.4f}"))
            self.history_table.setItem(0, 4, QTableWidgetItem(str(price)))
            self.history_table.setItem(0, 5, QTableWidgetItem(str(pnl)))
            self.history_table.setItem(0, 6, QTableWidgetItem(f"{confidence:.1%}"))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            if self.history_table.rowCount() > 100:
                self.history_table.removeRow(100)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.update_trading_stats()
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
    
    def update_trading_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ trade_history
            if not hasattr(self, 'trade_history'):
                self.trade_history = []
                
            today = datetime.now().date()
            today_trades = [
                trade for trade in self.trade_history
                if datetime.fromisoformat(trade.get('timestamp', '')).date() == today
            ]
            
            trades_count = len(today_trades)
            self.trades_count_label.setText(str(trades_count))
            
            if trades_count > 0:
                # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                profitable_trades = sum(1 for trade in today_trades if trade.get('side') == 'Buy')
                win_rate = (profitable_trades / trades_count) * 100
                self.win_rate_label.setText(f"{win_rate:.1f}%")
                
                # –î–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º
                daily_volume = sum(float(trade.get('size', 0)) for trade in today_trades)
                self.daily_volume_label.setText(f"${daily_volume:.2f}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –±–∞–ª–∞–Ω—Å–∞
                if self.balance_limit_active and self.balance_limit_amount > 0:
                    self.daily_limit_label.setText(f"${self.balance_limit_amount:.2f}")
                else:
                    self.daily_limit_label.setText("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                self.win_rate_label.setText("0%")
                self.daily_volume_label.setText("$0.00")
                
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            QApplication.processEvents()
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
    def buy_cheapest_position(self):
        """–ü–æ–∫—É–ø–∫–∞ —Å–∞–º–æ–π –¥–µ—à–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.current_positions:
                self.add_log_message("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            price_history = {}
            try:
                all_price_history = self.db_manager.get_price_history()
                for ph in all_price_history:
                    price_history[ph[1]] = ph  # –ò–Ω–¥–µ–∫—Å 1 - —ç—Ç–æ symbol
            except Exception as e:
                self.add_log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {e}")
                return
                
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            cheapest_symbol = None
            lowest_price = float('inf')
            
            for position in self.current_positions:
                symbol = position.get('symbol', '')
                if symbol in price_history:
                    current_price = price_history[symbol][2]  # –ò–Ω–¥–µ–∫—Å 2 - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                    if current_price < lowest_price:
                        lowest_price = current_price
                        cheapest_symbol = symbol
            
            if not cheapest_symbol:
                self.add_log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é")
                return
                
            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply = QMessageBox.question(
                self, 
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏", 
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {cheapest_symbol} –ø–æ —Ü–µ–Ω–µ ${lowest_price:.6f}?",
                QMessageBox.Yes | QMessageBox.No, 
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                self.add_log_message(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {cheapest_symbol}...")
                
                # –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API)
                trade_info = {
                    'timestamp': datetime.now().isoformat(),
                    'symbol': cheapest_symbol,
                    'side': 'Buy',
                    'size': 0.01,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                    'price': lowest_price,
                    'pnl': 'N/A',
                    'analysis': {'confidence': 0.75}
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_trade_to_history(trade_info)
                self.add_log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ {cheapest_symbol} –ø–æ —Ü–µ–Ω–µ ${lowest_price:.6f}")
            else:
                self.add_log_message("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {e}")
            import traceback
            self.add_log_message(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
    
    def sell_cheapest_position(self):
        """–ü—Ä–æ–¥–∞–∂–∞ —Å–∞–º–æ–π –¥–µ—à–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.current_positions:
                self.add_log_message("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            price_history = {}
            try:
                all_price_history = self.db_manager.get_price_history()
                for ph in all_price_history:
                    price_history[ph[1]] = ph  # –ò–Ω–¥–µ–∫—Å 1 - —ç—Ç–æ symbol
            except Exception as e:
                self.add_log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {e}")
                return
                
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            cheapest_symbol = None
            lowest_price = float('inf')
            
            for position in self.current_positions:
                symbol = position.get('symbol', '')
                if symbol in price_history:
                    current_price = price_history[symbol][2]  # –ò–Ω–¥–µ–∫—Å 2 - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                    if current_price < lowest_price:
                        lowest_price = current_price
                        cheapest_symbol = symbol
            
            if not cheapest_symbol:
                self.add_log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é")
                return
                
            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply = QMessageBox.question(
                self, 
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏", 
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å {cheapest_symbol} –ø–æ —Ü–µ–Ω–µ ${lowest_price:.6f}?",
                QMessageBox.Yes | QMessageBox.No, 
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                self.add_log_message(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {cheapest_symbol}...")
                
                # –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API)
                trade_info = {
                    'timestamp': datetime.now().isoformat(),
                    'symbol': cheapest_symbol,
                    'side': 'Sell',
                    'size': 0.01,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                    'price': lowest_price,
                    'pnl': '+$0.05',  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PnL –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                    'analysis': {'confidence': 0.75}
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_trade_to_history(trade_info)
                self.add_log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ {cheapest_symbol} –ø–æ —Ü–µ–Ω–µ ${lowest_price:.6f}")
            else:
                self.add_log_message("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {e}")
            import traceback
            self.add_log_message(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
    
    def add_log_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        formatted_message = f"[{timestamp}] {message}"
        
        self.logs_text.append(formatted_message)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        cursor = self.logs_text.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        self.logs_text.setTextCursor(cursor)
    
    def handle_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.add_log_message(f"‚ùå –û–®–ò–ë–ö–ê: {error_message}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –¥–∏–∞–ª–æ–≥–µ
        if "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è" in error_message:
            QMessageBox.critical(self, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_message)
    
    def enable_trading(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if hasattr(self, 'strategies_tab') and self.strategies_tab:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
            if enabled:
                self.strategies_tab.activate_trading()
            else:
                self.strategies_tab.deactivate_trading()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏
            self.add_log_message(f"{'üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞' if enabled else 'üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞'}")
        else:
            self.add_log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö: –≤–∫–ª–∞–¥–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def update_connection_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if status == "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ":
            self.connection_status.setText("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
            self.connection_status.setStyleSheet(
                "QLabel { color: #27ae60; font-weight: bold; font-size: 14px; }"
            )
            self.trading_toggle_btn.setEnabled(True)
            
            # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –û–ë–ù–û–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –ü–†–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò
            if self.trading_worker and self.trading_worker.trading_enabled:
                self.trading_toggle_btn.setText("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
                self.trading_toggle_btn.setStyleSheet(
                    "QPushButton { background-color: #e74c3c; color: white; font-weight: bold; padding: 10px; }"
                )
            else:
                self.trading_toggle_btn.setText("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
                self.trading_toggle_btn.setStyleSheet(
                    "QPushButton { background-color: #27ae60; color: white; font-weight: bold; padding: 10px; }"
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º bybit_client –≤ PortfolioTab –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            if hasattr(self, 'trading_worker') and self.trading_worker and hasattr(self.trading_worker, 'bybit_client') and self.trading_worker.bybit_client:
                self.bybit_client = self.trading_worker.bybit_client
                if hasattr(self, 'portfolio_tab') and self.portfolio_tab:
                    self.portfolio_tab.set_api_client(self.bybit_client)
                    self.add_log_message("‚úÖ API –∫–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ PortfolioTab")
        elif status == "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...":
            self.connection_status.setText("üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            self.connection_status.setStyleSheet(
                "QLabel { color: #f39c12; font-weight: bold; font-size: 14px; }"
            )
        else:
            self.connection_status.setText("üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ")
            self.connection_status.setStyleSheet(
                "QLabel { color: #e74c3c; font-weight: bold; font-size: 14px; }"
            )
            self.trading_toggle_btn.setEnabled(False)
        
        self.status_label.setText(f"–°—Ç–∞—Ç—É—Å: {status}")
    
    def toggle_trading(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.trading_worker:
            try:
                current_state = self.trading_worker.trading_enabled
                new_state = not current_state
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ worker
                self.trading_worker.enable_trading(new_state)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if self.trading_worker.trading_enabled != new_state:
                    self.add_log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                if new_state:
                    self.trading_toggle_btn.setText("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
                    self.trading_toggle_btn.setStyleSheet(
                        "QPushButton { background-color: #e74c3c; color: white; font-weight: bold; padding: 10px; }"
                    )
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    if hasattr(self, 'stop_strategy_btn'):
                        self.stop_strategy_btn.setEnabled(True)
                else:
                    self.trading_toggle_btn.setText("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
                    self.trading_toggle_btn.setStyleSheet(
                        "QPushButton { background-color: #27ae60; color: white; font-weight: bold; padding: 10px; }"
                    )
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    if hasattr(self, 'stop_strategy_btn'):
                        self.stop_strategy_btn.setEnabled(False)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
                if hasattr(self, 'strategies_tab') and self.strategies_tab:
                    try:
                        if new_state:
                            self.strategies_tab.activate_trading()
                        else:
                            self.strategies_tab.deactivate_trading()
                    except Exception as e:
                        self.add_log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                try:
                    settings = QSettings("CryptoTrader", "TradingBot")
                    settings.setValue("trading_enabled", new_state)
                    settings.sync()
                except Exception as e:
                    self.add_log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {str(e)}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
                self.add_log_message(f"{'üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞' if new_state else 'üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞'}")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                QApplication.processEvents()
                
            except Exception as e:
                self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {str(e)}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {str(e)}")
                traceback.print_exc()
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏: {str(e)}")
        else:
            self.add_log_message("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.")
    
    def stop_strategy(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        reply = QMessageBox.question(
            self, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            if self.trading_worker and hasattr(self.trading_worker, 'stop_strategy'):
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                active_strategy = self.trading_worker.get_active_strategy_name() if hasattr(self.trading_worker, 'get_active_strategy_name') else "active"
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                success = self.trading_worker.stop_strategy(active_strategy)
                
                if success:
                    self.add_log_message(f"üõë –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{active_strategy}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    self.stop_strategy_btn.setEnabled(False)
                else:
                    self.add_log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é '{active_strategy}'")
            else:
                self.add_log_message("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        reply = QMessageBox.question(
            self, "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            if self.trading_worker:
                self.trading_worker.stop()
            
            self.add_log_message("üõë –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            self.trading_toggle_btn.setText("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
            self.trading_toggle_btn.setStyleSheet(
                "QPushButton { background-color: #27ae60; color: white; font-weight: bold; padding: 10px; }"
            )
            self.update_connection_status("–û—Ç–∫–ª—é—á–µ–Ω–æ")
    
    def refresh_data(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.add_log_message("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._refresh_data_thread, daemon=True).start()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if hasattr(self, 'tickers_data') and self.tickers_data:
            self.update_ticker_info(datetime.now())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞
        if hasattr(self, 'balance_limit_active'):
            self.update_strategies_with_balance_limit()
        
    def refresh_positions(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π"""
        self.add_log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._refresh_positions_thread, daemon=True).start()
    
    def _refresh_positions_thread(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not hasattr(self, 'bybit_client') or not self.bybit_client:
                self.add_log_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏: API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            self.add_log_message("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö...")
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {str(e)}")
            
    def update_ticker_info(self, timestamp=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ä–æ–≤
        
        Args:
            timestamp: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏)
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
            ticker_loader = TickerDataLoader()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–æ–≤
            import os
            data_path = os.path.join(os.path.expanduser("~"), "AppData", "Local", "BybitTradingBot", "data", "tickers_data.json")
            
            if not os.path.exists(data_path):
                self.add_log_message("‚ö†Ô∏è –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ä–æ–≤.")
                if hasattr(self, 'last_ticker_update_label'):
                    self.last_ticker_update_label.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)")
                    self.last_ticker_update_label.setStyleSheet("font-weight: bold; color: #e74c3c;")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ticker_data = ticker_loader.load_tickers_data()
            
            if ticker_data and 'tickers' in ticker_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
                if isinstance(ticker_data['tickers'], list):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    tickers_dict = {}
                    for ticker in ticker_data['tickers']:
                        if 'symbol' in ticker:
                            tickers_dict[ticker['symbol']] = ticker
                    self.tickers_data = tickers_dict
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    self.tickers_data = ticker_data['tickers']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_time = ticker_data['update_time']
                self.last_ticker_update = update_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
                current_time = datetime.now()
                time_diff = current_time - update_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                if hasattr(self, 'last_ticker_update_label'):
                    update_time_str = update_time.strftime("%d.%m.%Y %H:%M:%S")
                    
                    if time_diff.total_seconds() > 300:  # –°—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
                        self.last_ticker_update_label.setText(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ: {update_time_str}")
                        self.last_ticker_update_label.setStyleSheet("font-weight: bold; color: #e74c3c;")
                        self.add_log_message("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ —É—Å—Ç–∞—Ä–µ–ª–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ä–æ–≤.")
                    else:
                        self.last_ticker_update_label.setText(f"{update_time_str}")
                        self.last_ticker_update_label.setStyleSheet("font-weight: bold; color: #2980b9;")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–∏–∫–µ—Ä–æ–≤
                if hasattr(self, 'ticker_count_label'):
                    ticker_count = len(self.tickers_data)
                    self.ticker_count_label.setText(f"{ticker_count}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–∏–∫–µ—Ä–æ–≤
                self.update_tickers_table()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                self.update_balance_info()
                
                self.add_log_message(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω—ã: {update_time_str}, –≤—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(self.tickers_data)})")
                return True
            else:
                self.add_log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
                return False
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
            return False
    
    def update_balance_limit_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞ —Å–ª–∞–π–¥–µ—Ä–µ
        if hasattr(self, 'balance_percent_slider') and hasattr(self, 'balance_percent_label'):
            percent_value = self.balance_percent_slider.value()
            self.balance_percent_label.setText(f"{percent_value}%")
            self.balance_limit_percent = percent_value
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
            if hasattr(self, 'balance_limit_amount_label') and hasattr(self, 'total_balance_usd'):
                limit_amount = self.total_balance_usd * (percent_value / 100)
                self.balance_limit_amount_label.setText(f"${limit_amount:.2f}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è
        if hasattr(self, 'balance_limit_status_label'):
            if self.balance_limit_active:
                status_text = f"–ê–∫—Ç–∏–≤–µ–Ω ({self.balance_limit_percent}%)"
                self.balance_limit_status_label.setText(status_text)
                self.balance_limit_status_label.setStyleSheet("color: green; font-weight: bold;")
            else:
                self.balance_limit_status_label.setText("–ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
                self.balance_limit_status_label.setStyleSheet("color: gray;")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
        self.update_balance_limit_timer_display()

    def update_balance_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è
            if hasattr(self, 'current_balance') and self.current_balance:
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USD
                total_usd = 0.0
                if 'coins' in self.current_balance:
                    coins = self.current_balance['coins']
                    if isinstance(coins, list):
                        for coin in coins:
                            usd_value = float(coin.get('usdValue', 0))
                            total_usd += usd_value
                
                self.total_balance_usd = total_usd
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞
                self.update_balance_limit_display()
                
                self.add_log_message(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_usd:.2f})")
            else:
                self.add_log_message("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
    
    def format_time_remaining(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60
        return f"{hours:02d}:{minutes:02d}:{secs:02d}"
    
    def activate_balance_limit(self, percent=None, duration_hours=12):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞"""
        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ —Å–ª–∞–π–¥–µ—Ä–∞
        if percent is None:
            percent = self.balance_percent_slider.value()
            
        self.balance_limit_active = True
        self.balance_limit_percent = percent
        self.balance_limit_seconds_left = duration_hours * 3600
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        if not self.balance_limit_timer.isActive():
            self.balance_limit_timer.start(1000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.update_balance_limit_display()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        self.update_strategies_with_balance_limit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.activate_limit_button.setEnabled(False)
        self.deactivate_limit_button.setEnabled(True)
        
        self.add_log_message(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –±–∞–ª–∞–Ω—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ({percent}% –Ω–∞ {duration_hours} —á–∞—Å–æ–≤)")
    
    def deactivate_balance_limit(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞"""
        self.balance_limit_active = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if self.balance_limit_timer.isActive():
            self.balance_limit_timer.stop()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.update_balance_limit_display()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        self.update_strategies_with_balance_limit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.activate_limit_button.setEnabled(True)
        self.deactivate_limit_button.setEnabled(False)
        
        self.add_log_message("‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –±–∞–ª–∞–Ω—Å–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    def update_balance_limit_timer(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞"""
        if self.balance_limit_active and self.balance_limit_seconds_left > 0:
            self.balance_limit_seconds_left -= 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.update_balance_limit_timer_display()
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å
            if self.balance_limit_seconds_left <= 0:
                self.deactivate_balance_limit()
                self.add_log_message("‚ÑπÔ∏è –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å—Ç–µ–∫–ª–æ")
    
    def update_balance_limit_timer_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞"""
        if hasattr(self, 'balance_limit_timer_label'):
            if self.balance_limit_active and self.balance_limit_seconds_left > 0:
                time_text = self.format_time_remaining(self.balance_limit_seconds_left)
                self.balance_limit_timer_label.setText(time_text)
                self.balance_limit_timer_label.setVisible(True)
            else:
                self.balance_limit_timer_label.setVisible(False)
    
    def update_strategies_with_balance_limit(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å–∞"""
        if not hasattr(self, 'active_strategies') or not self.active_strategies:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        total_balance = 0
        if hasattr(self, 'current_balance') and self.current_balance:
            for asset, amount in self.current_balance.items():
                if asset == 'USDT':
                    total_balance += float(amount)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞
        if self.balance_limit_active:
            self.balance_limit_amount = total_balance * (self.balance_limit_percent / 100)
        else:
            self.balance_limit_amount = total_balance
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –Ω–æ–≤—ã–º –ª–∏–º–∏—Ç–æ–º
        for strategy_id, strategy in self.active_strategies.items():
            if hasattr(strategy, 'set_balance_limit'):
                try:
                    if self.balance_limit_active:
                        strategy.set_balance_limit(self.balance_limit_amount)
                    else:
                        strategy.set_balance_limit(None)  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏–º–∏—Ç
                except Exception as e:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}: {e}")
        
        if self.balance_limit_active:
            self.add_log_message(f"‚ÑπÔ∏è –õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: {self.balance_limit_amount:.2f} USDT")
        else:
            self.add_log_message("‚ÑπÔ∏è –õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ—Ç–∫–ª—é—á–µ–Ω")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                all_positions = []
                categories = ["linear", "inverse", "spot"]
                
                for category in categories:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API —Å —É–∫–∞–∑–∞–Ω–∏–µ–º settleCoin=USDT –¥–ª—è linear –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        settle_coin = "USDT" if category == "linear" else None
                        self.add_log_message(f"üîç –ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}...")
                        
                        # –î–ª—è —Å–ø–æ—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º get_tickers –≤–º–µ—Å—Ç–æ get_positions
                        if category == "spot":
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã
                            tickers = self.bybit_client.get_tickers(category="spot")
                            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            print(f'DEBUG spot tickers:', tickers)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                            balance_info = self.bybit_client.get_unified_balance_flat()
                            if balance_info and 'list' in balance_info:
                                for account in balance_info.get('list', []):
                                    coin_list = account.get('coin', [])
                                    if isinstance(coin_list, list):
                                        for coin_item in coin_list:
                                            coin_name = coin_item.get('coin', '')
                                            balance = float(coin_item.get('walletBalance', '0'))
                                            
                                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏ USDT
                                            if balance > 0 and coin_name != 'USDT':
                                                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
                                                spot_position = {
                                                    'symbol': f"{coin_name}USDT",
                                                    'category': 'spot',
                                                    'side': 'Buy',  # –°–ø–æ—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ Buy
                                                    'size': str(balance),
                                                    'positionValue': '0',  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ–∑–∂–µ
                                                    'avgPrice': '0',  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –¥–ª—è —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                                                    'unrealisedPnl': '0'  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –¥–ª—è —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                                                }
                                                all_positions.append(spot_position)
                            
                            self.add_log_message(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–ø–æ—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
                            continue
                        
                        # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ get_positions
                        positions_list = self.bybit_client.get_positions(category=category, settle_coin=settle_coin)
                        
                        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        print(f'DEBUG positions {category}:', positions_list)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
                        if positions_list and isinstance(positions_list, list):
                            self.add_log_message(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(positions_list)} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            for pos in positions_list:
                                pos['category'] = category
                            all_positions.extend(positions_list)
                        else:
                            self.add_log_message(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                    except Exception as e:
                        self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π {category}: {e}")
                        import traceback
                        self.add_log_message(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
                        continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—Å —Ä–∞–∑–º–µ—Ä–æ–º > 0)
                active_positions = []
                for pos in all_positions:
                    size = float(pos.get('size', 0))
                    if size > 0:
                        active_positions.append(pos)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
                QMetaObject.invokeMethod(self, "update_positions", 
                                       Qt.QueuedConnection,
                                       Q_ARG(list, active_positions))
                
                self.add_log_message(f"‚úÖ –ü–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(active_positions)}")
                
            except Exception as pos_err:
                self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {pos_err}")
                import traceback
                self.add_log_message(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        # –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ try
    
    def _refresh_data_thread(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not hasattr(self, 'bybit_client') or not self.bybit_client:
                self.add_log_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ —á–µ—Ä–µ–∑ API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            balance_info = self.bybit_client.get_unified_balance_flat()
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print('DEBUG flat unified:', balance_info)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É JSON –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
            balance_json = json.dumps(balance_info, default=str)
            QMetaObject.invokeMethod(self, "update_balance_from_json", 
                                   Qt.QueuedConnection,
                                   Q_ARG(str, balance_json))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            self.add_log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                all_positions = []
                categories = ["linear", "inverse", "spot"]
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                spot_tickers = {}
                try:
                    tickers_data = self.bybit_client.get_tickers(category="spot")
                    if tickers_data and isinstance(tickers_data, list):
                        for ticker in tickers_data:
                            if 'symbol' in ticker and 'lastPrice' in ticker:
                                spot_tickers[ticker['symbol']] = ticker
                        self.add_log_message(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(spot_tickers)} —Å–ø–æ—Ç–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
                    else:
                        self.add_log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ç–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                except Exception as e:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {e}")
                
                for category in categories:
                    try:
                        # –î–ª—è —Å–ø–æ—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
                        if category == "spot":
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                            balance_info = self.bybit_client.get_unified_balance_flat()
                            if balance_info and 'list' in balance_info:
                                for account in balance_info.get('list', []):
                                    coin_list = account.get('coin', [])
                                    if isinstance(coin_list, list):
                                        for coin_item in coin_list:
                                            coin_name = coin_item.get('coin', '')
                                            balance = float(coin_item.get('walletBalance', '0'))
                                            
                                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏ USDT
                                            if balance > 0 and coin_name != 'USDT':
                                                symbol = f"{coin_name}USDT"
                                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ —Ç–∏–∫–µ—Ä–æ–≤
                                                price = 0
                                                if symbol in spot_tickers:
                                                    price = float(spot_tickers[symbol].get('lastPrice', 0))
                                                
                                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                                                position_value = balance * price
                                                
                                                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
                                                spot_position = {
                                                    'symbol': symbol,
                                                    'category': 'spot',
                                                    'side': 'Buy',  # –°–ø–æ—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ Buy
                                                    'size': str(balance),
                                                    'positionValue': str(position_value),
                                                    'avgPrice': '0',  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –¥–ª—è —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                                                    'unrealisedPnl': '0',  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –¥–ª—è —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                                                    'markPrice': str(price)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                                                }
                                                all_positions.append(spot_position)
                            
                            self.add_log_message(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–ø–æ—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API —Å —É–∫–∞–∑–∞–Ω–∏–µ–º settleCoin=USDT –¥–ª—è linear –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        settle_coin = "USDT" if category == "linear" else None
                        positions_list = self.bybit_client.get_positions(category=category, settle_coin=settle_coin)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {positions_list}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
                        if positions_list and isinstance(positions_list, list):
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            for pos in positions_list:
                                pos['category'] = category
                            all_positions.extend(positions_list)
                            self.add_log_message(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(positions_list)} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                    except Exception as e:
                        self.add_log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π {category}: {e}")
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π {category}: {e}")
                        import traceback
                        self.logger.error(traceback.format_exc())
                        continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—Å —Ä–∞–∑–º–µ—Ä–æ–º > 0)
                active_positions = []
                for pos in all_positions:
                    size = float(pos.get('size', 0))
                    if size > 0:
                        active_positions.append(pos)
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
                QMetaObject.invokeMethod(self, "update_positions", 
                                       Qt.QueuedConnection,
                                       Q_ARG(list, active_positions))
                    
            except Exception as pos_err:
                self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {pos_err}")
            
            self.add_log_message("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            self.add_log_message(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.logger.error(traceback.format_exc())
    
    def test_api_keys(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π"""
        api_key = self.api_key_input.text().strip()
        api_secret = self.api_secret_input.text().strip()
        
        if not api_key or not api_secret:
            self.api_status_label.setText("‚ùå –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏")
            self.api_status_label.setStyleSheet("QLabel { color: #e74c3c; font-weight: bold; }")
            return
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.api_status_label.setText("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π...")
        self.api_status_label.setStyleSheet("QLabel { color: #3498db; font-weight: bold; }")
        QApplication.processEvents()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π
            from config import USE_TESTNET
            client = BybitClient(api_key, api_secret, testnet=USE_TESTNET)
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π
            balance = client.get_wallet_balance()
            
            if balance:
                self.api_status_label.setText("‚úÖ API –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
                self.api_status_label.setStyleSheet("QLabel { color: #27ae60; font-weight: bold; }")
                self.add_log_message("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            else:
                self.api_status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
                self.api_status_label.setStyleSheet("QLabel { color: #e74c3c; font-weight: bold; }")
                self.add_log_message("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        except Exception as e:
            self.api_status_label.setText(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
            self.api_status_label.setStyleSheet("QLabel { color: #e74c3c; font-weight: bold; }")
            self.add_log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: {str(e)}")
    
    def save_api_keys(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–µ–π"""
        api_key = self.api_key_input.text().strip()
        api_secret = self.api_secret_input.text().strip()
        
        if not api_key or not api_secret:
            self.api_status_label.setText("‚ùå –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            self.api_status_label.setStyleSheet("QLabel { color: #e74c3c; font-weight: bold; }")
            return
        
        try:
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É config.py
            config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.py')
            
            # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(config_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π API –∫–ª—é—á–µ–π
            content = re.sub(r'API_KEY\s*=\s*"[^"]*"', f'API_KEY = "{api_key}"', content)
            content = re.sub(r'API_SECRET\s*=\s*"[^"]*"', f'API_SECRET = "{api_secret}"', content)
            
            # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            with open(config_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏
            self.api_key = api_key
            self.api_secret = api_secret
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ USE_TESTNET –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            from config import USE_TESTNET
            self.bybit_client = BybitClient(api_key, api_secret, testnet=USE_TESTNET)
            
            self.api_status_label.setText("‚úÖ API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            self.api_status_label.setStyleSheet("QLabel { color: #27ae60; font-weight: bold; }")
            self.add_log_message("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏
            self.connect_to_exchange()
        except Exception as e:
            self.api_status_label.setText(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)[:50]}")
            self.api_status_label.setStyleSheet("QLabel { color: #e74c3c; font-weight: bold; }")
            self.add_log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–µ–π: {str(e)}")
    
    def check_api_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
        return self.connect_to_exchange()
    
    def connect_to_exchange(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if not self.bybit_client:
                self.add_log_message("‚ùå –ö–ª–∏–µ–Ω—Ç API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self.update_connection_status(False)
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –±–∞–ª–∞–Ω—Å
            balance = self.bybit_client.get_wallet_balance()
            
            if balance:
                self.update_connection_status(True)
                self.add_log_message("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                self.update_balance(balance)
                
                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
                self.trading_toggle_btn.setEnabled(True)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.refresh_data()
                
                return True
            else:
                self.update_connection_status(False)
                self.add_log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
                return False
                
        except Exception as e:
            self.update_connection_status(False)
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ: {str(e)}")
            return False
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs_text.clear()
        self.add_log_message("üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def export_logs(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"trading_logs_{timestamp}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.logs_text.toPlainText())
            
            self.add_log_message(f"üíæ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: {e}")
    
    def get_cheapest_asset(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"""
        try:
            if not self.bybit_client:
                return None, None
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            symbols = self._get_all_available_symbols()
            
            if not symbols:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞")
                return None, None
            
            cheapest_symbol = None
            cheapest_price = float('inf')
            processed_count = 0
            
            self.logger.info(f"–ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å—Ä–µ–¥–∏ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            symbols_to_check = symbols[:100] if len(symbols) > 100 else symbols
            
            for symbol in symbols_to_check:
                try:
                    ticker = self.bybit_client.get_tickers(symbol)
                    if ticker and 'list' in ticker and ticker['list']:
                        price = float(ticker['list'][0].get('lastPrice', 0))
                        if 0 < price < cheapest_price:
                            cheapest_price = price
                            cheapest_symbol = symbol
                        processed_count += 1
                except Exception as e:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
                    continue
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–π–¥–µ–Ω —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π: {cheapest_symbol} –ø–æ —Ü–µ–Ω–µ {cheapest_price}")
            return cheapest_symbol, cheapest_price
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞: {e}")
            return None, None
    
    def buy_cheapest_asset(self):
        """–ü–æ–∫—É–ø–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤
            symbol, price = self.get_cheapest_asset()
            
            if not symbol or not price:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                return
            
            # –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏",
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–∞ {symbol}?\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${price:.6f}\n"
                f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${price:.6f}\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
                order_result = self.bybit_client.place_order(
                    symbol=symbol,
                    side='Buy',
                    order_type='Market',
                    qty='1'
                )
                
                if order_result:
                    self.add_log_message(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {symbol} –∑–∞ ${price:.6f}")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü–æ–∫—É–ø–∫–∞ {symbol} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                else:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {symbol}")
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫—Ç–∏–≤–∞: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)
    
    def sell_cheapest_asset(self):
        """–ü—Ä–æ–¥–∞–∂–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤
            symbol, price = self.get_cheapest_asset()
            
            if not symbol or not price:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            positions = self.bybit_client.get_positions()
            has_position = False
            
            if positions:
                for pos in positions:
                    if pos.get('symbol') == symbol and float(pos.get('size', 0)) >= 1:
                        has_position = True
                        break
            
            if not has_position:
                QMessageBox.warning(
                    self, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–æ–≤", 
                    f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ {symbol} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
                )
                return
            
            # –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏",
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–∞ {symbol}?\n\n"
                f"üí∞ –¶–µ–Ω–∞: ${price:.6f}\n"
                f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: ~${price:.6f}\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É
                order_result = self.bybit_client.place_order(
                    symbol=symbol,
                    side='Sell',
                    order_type='Market',
                    qty='1'
                )
                
                if order_result:
                    self.add_log_message(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {symbol} –∑–∞ ${price:.6f}")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü—Ä–æ–¥–∞–∂–∞ {symbol} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                else:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {symbol}")
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∞–∫—Ç–∏–≤–∞: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)
    
    def refresh_tickers(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–∫–µ—Ä–∞—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not hasattr(self, 'bybit_client') or self.bybit_client is None:
                error_msg = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏–∫–µ—Ä—ã: API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                self.logger.error(error_msg)
                self.add_log_message(f"‚ùå {error_msg}")
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            start_time = time.time()
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ä–∞—Ö –æ—Ç API —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'spot'
            response = self.bybit_client.get_tickers(category='spot')
            request_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.logger.debug(f"–ó–∞–ø—Ä–æ—Å —Ç–∏–∫–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {request_time:.2f} —Å–µ–∫")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
            if response and isinstance(response, dict):
                tickers_dict = {}
                ticker_count = 0
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                self.logger.debug(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {list(response.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if 'result' in response and isinstance(response['result'], dict) and 'list' in response['result']:
                    self.logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞: result->list, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(response['result']['list'])}")
                    for ticker in response['result']['list']:
                        if 'symbol' in ticker:
                            tickers_dict[ticker['symbol']] = ticker
                            ticker_count += 1
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é –≤ result
                elif 'result' in response and isinstance(response['result'], list):
                    self.logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: result (—Å–ø–∏—Å–æ–∫), –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(response['result'])}")
                    for ticker in response['result']:
                        if 'symbol' in ticker:
                            tickers_dict[ticker['symbol']] = ticker
                            ticker_count += 1
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
                elif 'list' in response and isinstance(response['list'], list):
                    self.logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: list –≤ –∫–æ—Ä–Ω–µ, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(response['list'])}")
                    for ticker in response['list']:
                        if 'symbol' in ticker:
                            tickers_dict[ticker['symbol']] = ticker
                            ticker_count += 1
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –¥–∞–Ω–Ω—ã–µ –≤ data
                elif 'data' in response and isinstance(response['data'], list):
                    self.logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: data (—Å–ø–∏—Å–æ–∫), –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(response['data'])}")
                    for ticker in response['data']:
                        if 'symbol' in ticker:
                            tickers_dict[ticker['symbol']] = ticker
                            ticker_count += 1
                elif 'data' in response and isinstance(response['data'], dict) and 'list' in response['data']:
                    self.logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: data->list, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(response['data']['list'])}")
                    for ticker in response['data']['list']:
                        if 'symbol' in ticker:
                            tickers_dict[ticker['symbol']] = ticker
                            ticker_count += 1
                
                if ticker_count > 0:
                    self.tickers_data = tickers_dict
                    self.update_tickers_table()
                    self.add_log_message(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({ticker_count} —Å–∏–º–≤–æ–ª–æ–≤)")
                    self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ {ticker_count} —Ç–∏–∫–µ—Ä–∞–º")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–∏–∫–µ—Ä–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    if hasattr(self, 'ticker_count_label'):
                        self.ticker_count_label.setText(f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {ticker_count}")
                        self.ticker_count_label.setStyleSheet("font-weight: bold; color: #27ae60;")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–∏–∫–µ—Ä–æ–≤
                    if hasattr(self, 'ticker_update_label'):
                        self.ticker_update_label.setText(f"–¢–∏–∫–µ—Ä–æ–≤: {ticker_count} | –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time.strftime('%H:%M:%S')}")
                else:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {response}"
                    self.logger.error(error_msg)
                    self.add_log_message(f"‚ùå {error_msg}")
            else:
                error_msg = f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {response}"
                self.logger.error(error_msg)
                self.add_log_message(f"‚ùå {error_msg}")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–æ–≤: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
    
    def auto_update_tickers(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ —Ç–∞–π–º–µ—Ä—É –∏ —ç–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        error_msg = ""
        current_time = datetime.now()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not hasattr(self, 'bybit_client') or self.bybit_client is None:
                self.logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏–∫–µ—Ä—ã: API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤")
            self.add_log_message("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤...")
                
            # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤
            self.refresh_tickers()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.last_ticker_update = current_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, 'last_ticker_update_label'):
                self.last_ticker_update_label.setText(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time.strftime('%H:%M:%S')}")
                
            # –≠–º—É–ª–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, 'update_tickers_button'):
                # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                original_style = self.update_tickers_button.styleSheet()
                self.update_tickers_button.setStyleSheet("background-color: #4CAF50; color: white;")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ 200 –º—Å
                QTimer.singleShot(200, lambda: self.update_tickers_button.setStyleSheet(original_style))
                
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.logger.debug(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ {current_time.strftime('%H:%M:%S')}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            if hasattr(self, 'last_ticker_update_label'):
                update_time_str = current_time.strftime("%d.%m.%Y %H:%M:%S")
                self.last_ticker_update_label.setText(f"{update_time_str}")
                self.last_ticker_update_label.setStyleSheet("font-weight: bold; color: #2980b9;")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            if hasattr(self, 'ticker_update_label'):
                self.ticker_update_label.setText(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤: {current_time.strftime('%H:%M:%S')}")
            
            self.add_log_message("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–æ–≤: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
        finally:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            if hasattr(self, 'tickers_timer'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–∞–π–º–µ—Ä
                if not self.tickers_timer.isActive():
                    self.logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤")
                    self.tickers_timer.start(30000)  # 30 —Å–µ–∫—É–Ω–¥
            if hasattr(self, 'tickers_timer') and not self.tickers_timer.isActive():
                self.logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                self.tickers_timer.start(30000)
    
    def update_tickers_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–∏–∫–µ—Ä–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.ticker_table.setRowCount(0)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtered_tickers = self.apply_ticker_filter()
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        for i, ticker in enumerate(filtered_tickers):
            self.ticker_table.insertRow(i)
            
            # –°–∏–º–≤–æ–ª
            symbol_item = QTableWidgetItem(ticker.get('symbol', ''))
            self.ticker_table.setItem(i, 0, symbol_item)
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
            last_price = float(ticker.get('lastPrice', ticker.get('price', ticker.get('last', 0))))
            price_item = QTableWidgetItem(f"{last_price:.8f}")
            price_item.setData(Qt.DisplayRole, last_price)
            self.ticker_table.setItem(i, 1, price_item)
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 24—á - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            high_price = float(ticker.get('highPrice24h', ticker.get('high24h', ticker.get('high', 0))))
            high_item = QTableWidgetItem(f"{high_price:.8f}")
            high_item.setData(Qt.DisplayRole, high_price)
            self.ticker_table.setItem(i, 2, high_item)
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 24—á - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            low_price = float(ticker.get('lowPrice24h', ticker.get('low24h', ticker.get('low', 0))))
            low_item = QTableWidgetItem(f"{low_price:.8f}")
            low_item.setData(Qt.DisplayRole, low_price)
            self.ticker_table.setItem(i, 3, low_item)
            
            # –û–±—ä–µ–º –∑–∞ 24—á - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            volume = float(ticker.get('volume24h', ticker.get('volume', ticker.get('vol', 0))))
            volume_item = QTableWidgetItem(f"{volume:.2f}")
            volume_item.setData(Qt.DisplayRole, volume)
            self.ticker_table.setItem(i, 4, volume_item)
            
            # –û–±–æ—Ä–æ—Ç –∑–∞ 24—á - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            turnover = float(ticker.get('turnover24h', ticker.get('turnover', ticker.get('quoteVolume', 0))))
            turnover_item = QTableWidgetItem(f"{turnover:.2f}")
            turnover_item.setData(Qt.DisplayRole, turnover)
            self.ticker_table.setItem(i, 5, turnover_item)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            price_change = float(ticker.get('priceChangePercent24h', ticker.get('priceChangePercent', ticker.get('change24h', 0))))
            change_item = QTableWidgetItem(f"{price_change:.2f}%")
            change_item.setData(Qt.DisplayRole, price_change)
            
            # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            if price_change > 0:
                change_item.setForeground(QColor('green'))
            elif price_change < 0:
                change_item.setForeground(QColor('red'))
            
            self.ticker_table.setItem(i, 6, change_item)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–∑–∞–≥–ª—É—à–∫–∞, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞)
            period_change = 0.0
            period_item = QTableWidgetItem(f"{period_change:.2f}%")
            period_item.setData(Qt.DisplayRole, period_change)
            self.ticker_table.setItem(i, 7, period_item)
    
    def apply_ticker_filter(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ä–æ–≤"""
        if not self.tickers_data:
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_type = self.filter_combo.currentText()
        search_text = self.search_entry.text().upper()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–∏–∫–µ—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        tickers_list = []
        for symbol, ticker_data in self.tickers_data.items():
            ticker_item = ticker_data.copy()
            ticker_item['symbol'] = symbol
            tickers_list.append(ticker_item)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
        if filter_type == "ALL":
            filtered_tickers = tickers_list
        else:
            filtered_tickers = [t for t in tickers_list if t.get('symbol', '').endswith(filter_type)]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        if search_text:
            filtered_tickers = [t for t in filtered_tickers if search_text in t.get('symbol', '')]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–Ω –Ω–µ –∏–∑ update_tickers_table
        caller = inspect.currentframe().f_back.f_code.co_name
        if caller != "update_tickers_table":
            self.update_tickers_table()
        
        return filtered_tickers
    
    def on_ticker_select(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–∫–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        selected_items = self.ticker_table.selectedItems()
        if not selected_items:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        row = selected_items[0].row()
        symbol_item = self.ticker_table.item(row, 0)
        if symbol_item:
            symbol = symbol_item.text()
            self.update_ticker_chart(symbol)
    
    def update_ticker_chart(self, symbol=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        if not symbol:
            selected_items = self.ticker_table.selectedItems()
            if not selected_items:
                return
            
            row = selected_items[0].row()
            symbol_item = self.ticker_table.item(row, 0)
            if not symbol_item:
                return
            
            symbol = symbol_item.text()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        interval_text = self.interval_combo.currentText()
        interval_map = {
            "1 –º–∏–Ω—É—Ç–∞": "1m",
            "5 –º–∏–Ω—É—Ç": "5m",
            "15 –º–∏–Ω—É—Ç": "15m",
            "30 –º–∏–Ω—É—Ç": "30m",
            "1 —á–∞—Å": "1h",
            "4 —á–∞—Å–∞": "4h",
            "1 –¥–µ–Ω—å": "1d",
            "1 –Ω–µ–¥–µ–ª—è": "1w",
            "1 –º–µ—Å—è—Ü": "1M"
        }
        interval = interval_map.get(interval_text, "4h")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'spot'
            try:
                response = self.bybit_client.get_klines(category='spot', symbol=symbol, interval=interval, limit=100)
            except Exception as kline_error:
                if "Invalid period" in str(kline_error):
                    self.logger.warning(f"–°–∏–º–≤–æ–ª {symbol}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                    interval_map_fallback = {
                        "4h": "240",
                        "4h": "240",
                        "1d": "D",
                        "1w": "W",
                        "1M": "M"
                    }
                    fallback_interval = interval_map_fallback.get(interval, "15")
                    self.add_log_message(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {fallback_interval}")
                    response = self.bybit_client.get_klines(category='spot', symbol=symbol, interval=fallback_interval, limit=100)
                else:
                    raise kline_error
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
            if 'result' in response and 'list' in response['result']:
                klines = response['result']['list']
                # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                self.plot_ticker_chart(symbol, interval, klines)
            else:
                error_msg = f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {response}"
                self.logger.error(error_msg)
                self.add_log_message(f"‚ùå {error_msg}")
                self.chart_placeholder.setText(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–º–µ—Å—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞
            self.chart_placeholder.setText(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
    
    def plot_ticker_chart(self, symbol, interval, klines):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞"""
        if not klines:
            self.chart_placeholder.setText(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ –æ—Å–∏
            figure = plt.figure(figsize=(10, 6))
            ax = figure.add_subplot(111)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            # –í API Bybit –∏–Ω–¥–µ–∫—Å—ã –¥–∞–Ω–Ω—ã—Ö: 0-timestamp, 1-open, 2-high, 3-low, 4-close, 5-volume
            dates = [datetime.fromtimestamp(int(k[0]) / 1000) for k in klines]
            opens = [float(k[1]) for k in klines]
            highs = [float(k[2]) for k in klines]
            lows = [float(k[3]) for k in klines]
            closes = [float(k[4]) for k in klines]
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
            mpf.candlestick_ohlc(ax, [(mdates.date2num(date), o, h, l, c) 
                                     for date, o, h, l, c in zip(dates, opens, highs, lows, closes)],
                                width=0.6, colorup='green', colordown='red')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M'))
            plt.xticks(rotation=45)
            plt.title(f"{symbol} ({interval})")
            plt.xlabel('–í—Ä–µ–º—è')
            plt.ylabel('–¶–µ–Ω–∞')
            plt.grid(True)
            plt.tight_layout()
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvas(figure)
            
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
            layout = self.chart_placeholder.parent().layout()
            layout.replaceWidget(self.chart_placeholder, canvas)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç
            self.chart_placeholder = canvas
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}"
            self.logger.error(error_msg)
            self.add_log_message(f"‚ùå {error_msg}")
            self.chart_placeholder.setText(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}")
    
    def buy_lowest_ticker(self):
        """–ü–æ–∫—É–ø–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∏–∫–µ—Ä–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            def execute_buy_async():
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∏–∫–µ—Ä–æ–≤
                    from src.tools.ticker_data_loader import TickerDataLoader
                    ticker_loader = TickerDataLoader()
                    tickers_data = ticker_loader.load_tickers_data()
                    
                    if not tickers_data:
                        self.add_log_message("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–∫–µ—Ä–∞–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                        return
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–∏–∫–µ—Ä –ø–æ —Ü–µ–Ω–µ
                    lowest_symbol = None
                    lowest_price = float('inf')
                    
                    for symbol, data in tickers_data.items():
                        if symbol.endswith('USDT'):
                            try:
                                price = float(data.get('lastPrice', 0))
                                if 0 < price < lowest_price:
                                    lowest_price = price
                                    lowest_symbol = symbol
                            except (ValueError, TypeError):
                                continue
                    
                    if not lowest_symbol:
                        self.add_log_message("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–∫–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                        return
                    
                    self.add_log_message(f"üîç –í—ã–±—Ä–∞–Ω —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–∏–∫–µ—Ä: {lowest_symbol} (${lowest_price:.6f})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
                    if not hasattr(self, 'trading_worker') or self.trading_worker is None:
                        self.add_log_message("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        return
                    
                    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä—É—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
                    analysis = {'signal': 'BUY', 'confidence': 1.0}
                    
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—É—á–Ω–æ–π —Å–¥–µ–ª–∫–∏
                    original_trading_state = getattr(self.trading_worker, 'trading_enabled', False)
                    self.trading_worker.trading_enabled = True
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
                    trade_result = self.trading_worker._execute_trade(lowest_symbol, analysis, session_id="manual_buy")
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
                    self.trading_worker.trading_enabled = original_trading_state
                    
                    if trade_result:
                        self.add_log_message(f"üí∞ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {lowest_symbol}")
                    else:
                        self.add_log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É {lowest_symbol}")
                    
                except Exception as e:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_lowest_ticker: {e}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ QTimer
            QTimer.singleShot(0, execute_buy_async)
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_lowest_ticker: {e}")

    def sell_lowest_ticker(self):
        """–ü—Ä–æ–¥–∞–∂–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            def execute_sell_async():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ
                    if not hasattr(self, 'current_balance') or not self.current_balance:
                        self.add_log_message("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
                    coins = self.current_balance.get('coins', [])
                    if not isinstance(coins, list):
                        self.add_log_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ")
                        return
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã)
                    tradeable_coins = []
                    for coin in coins:
                        coin_name = coin.get('coin', '')
                        wallet_balance = float(coin.get('walletBalance', 0))
                        usd_value = float(coin.get('usdValue', 0))
                        
                        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –º–æ–Ω–µ—Ç—ã —Å –æ—á–µ–Ω—å –º–∞–ª—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                        if (coin_name not in ['USDT', 'USDC', 'BUSD', 'DAI'] and 
                            wallet_balance > 0 and usd_value > 0.1):  # –ú–∏–Ω–∏–º—É–º $0.1
                            tradeable_coins.append({
                                'coin': coin_name,
                                'balance': wallet_balance,
                                'usd_value': usd_value
                            })
                    
                    if not tradeable_coins:
                        self.add_log_message("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–º–∏–Ω–∏–º—É–º $0.1)")
                        return
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π USD —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
                    lowest_coin = min(tradeable_coins, key=lambda c: c['usd_value'])
                    symbol = lowest_coin['coin'] + "USDT"
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –º–∏–Ω–∏–º—É–º–∞)
                    min_sell_qty = max(lowest_coin['balance'] * 0.1, 0.001)  # 10% –∏–ª–∏ –º–∏–Ω–∏–º—É–º 0.001
                    
                    self.add_log_message(f"üîç –í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {symbol} (${lowest_coin['usd_value']:.2f})")
                    self.add_log_message(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {min_sell_qty:.6f} {lowest_coin['coin']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
                    if not hasattr(self, 'trading_worker') or self.trading_worker is None:
                        self.add_log_message("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        return
                    
                    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    analysis = {
                        'signal': 'SELL', 
                        'confidence': 1.0,
                        'custom_qty': min_sell_qty  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    }
                    
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—É—á–Ω–æ–π —Å–¥–µ–ª–∫–∏
                    original_trading_state = getattr(self.trading_worker, 'trading_enabled', False)
                    self.trading_worker.trading_enabled = True
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
                    trade_result = self.trading_worker._execute_trade(symbol, analysis, session_id="manual_sell")
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
                    self.trading_worker.trading_enabled = original_trading_state
                    
                    if trade_result:
                        self.add_log_message(f"üí∏ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol}")
                    else:
                        self.add_log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É {symbol}")
                    
                except Exception as e:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ sell_lowest_ticker: {e}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ QTimer
            QTimer.singleShot(0, execute_sell_async)
            
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ sell_lowest_ticker: {e}")

    def connect_neural_network(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            import subprocess
            import os
            
            # –ü—É—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ trainer_gui.py
            trainer_path = os.path.join(os.path.dirname(__file__), 'trainer_gui.py')
            
            if not os.path.exists(trainer_path):
                self.add_log_message("‚ùå –§–∞–π–ª trainer_gui.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º trainer_gui.py –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                subprocess.Popen([
                    'python', trainer_path
                ], cwd=os.path.dirname(__file__))
                
                self.add_log_message("üß† –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                self.neural_status_label.setText("‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–ø—É—â–µ–Ω–∞")
                self.neural_status_label.setStyleSheet("color: #27ae60; font-weight: bold; padding: 8px;")
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                self.connect_neural_btn.setEnabled(False)
                self.connect_neural_btn.setText("üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–ø—É—â–µ–Ω–∞")
                
                # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                QTimer.singleShot(3000, self.reset_neural_button)
                
            except Exception as e:
                self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {str(e)}")
                
        except Exception as e:
            self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ connect_neural_network: {e}")
    
    def reset_neural_button(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        self.connect_neural_btn.setEnabled(True)
        self.connect_neural_btn.setText("üß† –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        reply = QMessageBox.question(
            self, "–í—ã—Ö–æ–¥",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            if hasattr(self, 'trading_worker') and self.trading_worker is not None:
                try:
                    self.logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
                    self.trading_worker.stop()
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    if not self.trading_worker.wait(10000):  # –ñ–¥–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥
                        self.logger.warning("–¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
                        self.trading_worker.terminate()
                        self.trading_worker.wait(3000)  # –î–∞–µ–º –µ—â–µ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    self.logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞: {e}")
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        self.trading_worker.terminate()
                        self.trading_worker.wait(3000)
                    except:
                        pass
            
            event.accept()
        else:
            event.ignore()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if not GUI_AVAILABLE:
        print("‚ùå GUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PySide6: pip install PySide6")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –∏ –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    terminal_logger = setup_terminal_logging(log_dir='logs', filename_prefix='terminal_log')
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    app = QApplication.instance()
    if app is None:
        app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setApplicationName("–¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç Bybit")
    app.setApplicationVersion("1.0.0")
    app.setOrganizationName("Trading Bot")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    window = TradingBotMainWindow()
    window.show()
    
    try:
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        sys.exit(app.exec())
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if terminal_logger:
            terminal_logger.close()


if __name__ == "__main__":
    main()