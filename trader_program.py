#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞-—Ç–æ—Ä–≥–æ–≤–µ—Ü –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —Ç–∏–∫–µ—Ä–æ–≤ –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
"""

import sys
import os
import json
import pickle
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG —É—Ä–æ–≤–µ–Ω—å
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('trader_program.log', encoding='utf-8')
    ]
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(os.path.join(os.path.dirname(__file__), 'src')))

# GUI –∏–º–ø–æ—Ä—Ç—ã
try:
    from PySide6.QtWidgets import (
        QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, 
        QPushButton, QLabel, QTextEdit, QGroupBox, QGridLayout,
        QProgressBar, QStatusBar, QFrame, QSplitter, QTableWidget,
        QTableWidgetItem, QHeaderView, QSpacerItem, QSizePolicy,
        QTabWidget, QLineEdit, QCheckBox
    )
    from PySide6.QtCore import QTimer, QThread, Signal, Qt, QMutex
    from PySide6.QtGui import QFont, QColor, QPalette, QTextCursor
    GUI_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GUI: {e}")
    GUI_AVAILABLE = False
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç API –∫–ª–∏–µ–Ω—Ç–∞
try:
    from api.bybit_client import BybitClient
    from config import get_api_credentials
    import config
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API: {e}")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    from telegram_notifier import TelegramNotifier
    TELEGRAM_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    TelegramNotifier = None
    TELEGRAM_AVAILABLE = False


class TradingSignal:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    def __init__(self, symbol: str, signal: str, confidence: float, price: float, reason: str = ""):
        self.symbol = symbol
        self.signal = signal  # 'BUY' –∏–ª–∏ 'SELL'
        self.confidence = confidence
        self.price = price
        self.reason = reason
        self.timestamp = datetime.now()
        self.execution_attempts = 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.max_attempts = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        self.last_attempt_time = None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
        self.status = "PENDING"  # PENDING, EXECUTING, EXECUTED, FAILED


class DataCollector(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∏–∫–µ—Ä–æ–≤ –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    data_updated = Signal(dict)
    log_message = Signal(str)
    
    def __init__(self):
        super().__init__()
        self.running = False
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TickerDataLoader –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
        from src.tools.ticker_data_loader import TickerDataLoader
        ticker_loader = TickerDataLoader()
        self.ticker_data_path = ticker_loader.get_data_file_path()
        self.models_path = Path("C:/Users/vlastelin8/Desktop/trade/crypto/src/strategies/models")
        self.mutex = QMutex()
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.running = True
        self.log_message.emit("üîÑ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        while self.running:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
                ticker_data = self.load_ticker_data()
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                ml_data = self.load_ml_data()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                combined_data = {
                    'ticker_data': ticker_data,
                    'ml_data': ml_data,
                    'timestamp': datetime.now().isoformat()
                }
                
                self.data_updated.emit(combined_data)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                time.sleep(5)
                
            except Exception as e:
                self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                time.sleep(10)
    
    def load_ticker_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ TickerDataLoader –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
            from src.tools.ticker_data_loader import TickerDataLoader
            ticker_loader = TickerDataLoader()
            ticker_data = ticker_loader.load_tickers_data()
            
            if ticker_data and 'tickers' in ticker_data:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
                tickers = ticker_data['tickers']
                self.log_message.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {ticker_data['update_time']}")
                return tickers
            else:
                self.log_message.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API")
                return {}
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API: {e}")
            return {}
    
    def load_ml_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            ml_data = {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
            performance_file = self.models_path / "adaptive_ml_performance.json"
            if performance_file.exists():
                try:
                    with open(performance_file, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                        if content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                            ml_data['performance'] = json.loads(content)
                        else:
                            self.log_message.emit(f"‚ö†Ô∏è –§–∞–π–ª {performance_file.name} –ø—É—Å—Ç–æ–π")
                except json.JSONDecodeError as e:
                    self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON –≤ {performance_file.name}: {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
            training_file = self.models_path / "adaptive_ml_training_state.json"
            if training_file.exists():
                try:
                    with open(training_file, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                        if content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                            ml_data['training_state'] = json.loads(content)
                        else:
                            self.log_message.emit(f"‚ö†Ô∏è –§–∞–π–ª {training_file.name} –ø—É—Å—Ç–æ–π")
                except json.JSONDecodeError as e:
                    self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON –≤ {training_file.name}: {e}")
            
            return ml_data
            
        except Exception as e:
            self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ML: {e}")
            return {}
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.running = False


class SignalGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, logger, banned_symbols=None):
        self.logger = logger
        self.min_confidence = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (—Å–Ω–∏–∂–µ–Ω–æ –¥–æ 0.1 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        self.banned_symbols = banned_symbols or []
        
    def generate_signals(self, data: Dict, portfolio: Dict) -> List[TradingSignal]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        signals = []
        
        try:
            ticker_data = data.get('ticker_data', {})
            ml_data = data.get('ml_data', {})
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            self.logger.info(f"üîç –¢–∏–ø ticker_data: {type(ticker_data)}")
            if isinstance(ticker_data, dict):
                self.logger.info(f"üîç –ö–ª—é—á–∏ ticker_data: {list(ticker_data.keys())[:5]}")  # –ü–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–π
            elif isinstance(ticker_data, list):
                self.logger.info(f"üîç ticker_data - —Å–ø–∏—Å–æ–∫ –∏–∑ {len(ticker_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                if ticker_data:
                    self.logger.info(f"üîç –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(ticker_data[0])}")
            
            self.logger.info(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: ticker_data={len(ticker_data)} —Å–∏–º–≤–æ–ª–æ–≤, ml_data={len(ml_data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ USDT –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            usdt_pairs = self.get_usdt_pairs(ticker_data)
            self.logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(usdt_pairs)} USDT –ø–∞—Ä")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É
            analyzed_count = 0
            for symbol in usdt_pairs[:200]:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                try:
                    signal = self.analyze_symbol(symbol, ticker_data, ml_data, portfolio)
                    analyzed_count += 1
                    if signal and signal.confidence >= self.min_confidence:
                        signals.append(signal)
                        self.logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {signal.signal} –¥–ª—è {signal.symbol}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {signal.confidence:.2f}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            
            self.logger.info(f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count} —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–∞–∏–º–µ–Ω–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            signals.sort(key=lambda x: x.confidence, reverse=True)
            
            return signals[:50]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 30 –¥–æ 50 —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def get_usdt_pairs(self, ticker_data) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ USDT —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –∞–∫—Ç–∏–≤–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã"""
        pairs = []
        active_pairs = []
        
        # –ï—Å–ª–∏ ticker_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (–∫–∞–∫ –∏–∑ TickerDataLoader)
        if isinstance(ticker_data, list):
            for ticker in ticker_data:
                if isinstance(ticker, dict) and 'symbol' in ticker:
                    symbol = ticker['symbol']
                    if (symbol.endswith('USDT') and 
                        symbol != 'USDT' and 
                        symbol not in self.banned_symbols):
                        pairs.append(symbol)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ (–µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã)
                        price_change = float(ticker.get('price24hPcnt', 0))
                        volume = float(ticker.get('volume24h', 0))
                        if abs(price_change) > 0.0001 or volume > 1000:  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                            active_pairs.append(symbol)
        # –ï—Å–ª–∏ ticker_data - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        elif isinstance(ticker_data, dict):
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ USDT –ø–∞—Ä—ã –∏–∑ —Ç–∏–∫–µ—Ä–æ–≤
            tickers = ticker_data.get('tickers', ticker_data)
            for symbol, ticker_info in tickers.items():
                if (symbol.endswith('USDT') and 
                    symbol != 'USDT' and 
                    symbol not in self.banned_symbols):
                    pairs.append(symbol)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
                    price_change = float(ticker_info.get('price24hPcnt', 0))
                    volume = float(ticker_info.get('volume24h', 0))
                    if abs(price_change) > 0.0001 or volume > 1000:  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                        active_pairs.append(symbol)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        popular_pairs = [
            'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT',
            'XRPUSDT', 'DOTUSDT', 'DOGEUSDT', 'AVAXUSDT', 'LINKUSDT',
            'MATICUSDT', 'LTCUSDT', 'UNIUSDT', 'ATOMUSDT', 'FILUSDT'
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö
        popular_pairs = [pair for pair in popular_pairs if pair not in self.banned_symbols]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
        if active_pairs:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            final_pairs = list(set(active_pairs + popular_pairs))
        else:
            final_pairs = popular_pairs
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è testnet
        invalid_symbols = {'SHIB1000USDT', 'BANDUSDT', 'WIFUSDT', 'HBARUSDT'}
        final_pairs = [pair for pair in final_pairs if pair not in invalid_symbols]
        
        self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(active_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ {len(final_pairs)} –æ–±—â–∏—Ö USDT –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        self.logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ {len(self.banned_symbols)} –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {self.banned_symbols}")
        return final_pairs
    
    def analyze_symbol(self, symbol: str, ticker_data, ml_data: Dict, portfolio: Dict) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É
            symbol_ticker = {}
            
            # –ï—Å–ª–∏ ticker_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            if isinstance(ticker_data, list):
                for ticker in ticker_data:
                    if isinstance(ticker, dict) and ticker.get('symbol') == symbol:
                        symbol_ticker = ticker
                        break
            # –ï—Å–ª–∏ ticker_data - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            elif isinstance(ticker_data, dict):
                symbol_ticker = ticker_data.get(symbol, {})
            if not symbol_ticker:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = float(symbol_ticker.get('lastPrice', 0))
            if current_price <= 0:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç Bybit API)
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º priceChangePercent
            price_change_24h = float(symbol_ticker.get('priceChangePercent', 0))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ML –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            ml_performance = ml_data.get('performance', {}).get(symbol, {})
            ml_training = ml_data.get('training_state', {}).get(symbol, {})
            
            # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_type = None
            confidence = 0.0
            reason = ""
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ML —Ç–æ—á–Ω–æ—Å—Ç–∏ - –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ {"SYMBOL": accuracy_value}
            ml_accuracy = ml_performance if isinstance(ml_performance, (int, float)) else 0
            self.logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol}: —Ü–µ–Ω–∞=${current_price:.6f}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ 24—á={price_change_24h:.2%}, ML —Ç–æ—á–Ω–æ—Å—Ç—å={ml_accuracy:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML –¥–∞–Ω–Ω—ã–µ
            if ml_accuracy > 0.1:  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —Å 0.3 –¥–æ 0.1 –¥–ª—è –µ—â–µ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
                self.logger.debug(f"ü§ñ ML –º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è {symbol}, —Ç–æ—á–Ω–æ—Å—Ç—å: {ml_accuracy:.2f}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ML –ª–æ–≥–∏–∫—É —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
                if price_change_24h > 0.0001:  # –†–æ—Å—Ç –±–æ–ª–µ–µ 0.01% (–±—ã–ª–æ 0.05%)
                    signal_type = 'BUY'
                    confidence = min(0.8, ml_accuracy * 0.9)
                    reason = f"ML –º–æ–¥–µ–ª—å (—Ç–æ—á–Ω–æ—Å—Ç—å: {ml_accuracy:.2f}), —Ä–æ—Å—Ç 24—á: {price_change_24h:.2%}"
                    self.logger.debug(f"üü¢ ML BUY —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} > 0.0001")
                elif price_change_24h < -0.0001:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ 0.01% (–±—ã–ª–æ 0.05%)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                    base_asset = symbol.replace('USDT', '')
                    if base_asset in portfolio and float(portfolio[base_asset]) > 0:
                        signal_type = 'SELL'
                        confidence = min(0.8, ml_accuracy * 0.9)
                        reason = f"ML –º–æ–¥–µ–ª—å (—Ç–æ—á–Ω–æ—Å—Ç—å: {ml_accuracy:.2f}), –ø–∞–¥–µ–Ω–∏–µ 24—á: {price_change_24h:.2%}"
                        self.logger.debug(f"üî¥ ML SELL —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} < -0.0001")
                    else:
                        self.logger.debug(f"‚ö†Ô∏è ML SELL —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è {symbol}, –Ω–æ –∞–∫—Ç–∏–≤ {base_asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
                else:
                    self.logger.debug(f"‚ö™ ML —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-0.0005, 0.0005]")
            else:
                self.logger.debug(f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è {symbol}, ML —Ç–æ—á–Ω–æ—Å—Ç—å: {ml_accuracy:.2f} < 0.3")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
                if price_change_24h > 0.0003:  # –†–æ—Å—Ç 0.03% (–±—ã–ª–æ 0.1%)
                    signal_type = 'BUY'
                    confidence = min(0.7, abs(price_change_24h) * 100)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
                    reason = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, —Ä–æ—Å—Ç: {price_change_24h:.2%}"
                    self.logger.debug(f"üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π BUY —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} > 0.0003")
                elif price_change_24h < -0.0003:  # –ü–∞–¥–µ–Ω–∏–µ 0.03% (–±—ã–ª–æ 0.1%)
                    base_asset = symbol.replace('USDT', '')
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                    self.logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è {base_asset}:")
                    self.logger.debug(f"üîç –¢–∏–ø –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {type(portfolio)}")
                    self.logger.debug(f"üîç –ö–ª—é—á–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {list(portfolio.keys()) if isinstance(portfolio, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                    asset_in_portfolio = base_asset in portfolio if isinstance(portfolio, dict) else False
                    asset_balance = 0
                    
                    if asset_in_portfolio:
                        try:
                            asset_balance = float(portfolio[base_asset])
                            self.logger.debug(f"üîç –ë–∞–ª–∞–Ω—Å {base_asset}: {asset_balance}")
                        except (ValueError, TypeError) as e:
                            self.logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {base_asset}: {e}")
                            asset_balance = 0
                    
                    if asset_in_portfolio and asset_balance > 0:
                        signal_type = 'SELL'
                        confidence = min(0.7, abs(price_change_24h) * 100)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
                        reason = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –ø–∞–¥–µ–Ω–∏–µ: {price_change_24h:.2%}"
                        self.logger.debug(f"üî¥ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π SELL —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} < -0.0003, –±–∞–ª–∞–Ω—Å {base_asset}: {asset_balance}")
                    else:
                        if not asset_in_portfolio:
                            self.logger.debug(f"‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π SELL —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è {symbol}, –Ω–æ –∞–∫—Ç–∏–≤ {base_asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–∫–ª—é—á–∏: {list(portfolio.keys()) if isinstance(portfolio, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'})")
                        else:
                            self.logger.debug(f"‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π SELL —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è {symbol}, –Ω–æ –±–∞–ª–∞–Ω—Å {base_asset} = {asset_balance} <= 0")
                else:
                    self.logger.debug(f"‚ö™ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-0.0003, 0.0003]")
            
            if signal_type and confidence >= self.min_confidence:
                self.logger.info(f"üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal_type} –¥–ª—è {symbol}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f}")
                return TradingSignal(symbol, signal_type, confidence, current_price, reason)
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            return None


class TradingEngine(QThread):
    """–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫"""
    trade_executed = Signal(dict)
    log_message = Signal(str)
    status_changed = Signal(str)
    
    def __init__(self, bybit_client, trading_enabled=True, telegram_notifier=None):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä telegram_notifier
        super().__init__()
        self.bybit_client = bybit_client
        self.running = False
        self.trading_enabled = trading_enabled  # –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.signals_queue = []
        self.portfolio = {}
        self.logger = logging.getLogger(__name__)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.banned_symbols = [
            'BBSOLUSDT',      # –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
            'BABYDOGEUSDT',   # –û—à–∏–±–∫–∏ API –ø–µ—Ä–∏–æ–¥–∞ –∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
            'BBDUSDT',        # –û—à–∏–±–∫–∏ API –ø–µ—Ä–∏–æ–¥–∞
            'USDT',           # –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–æ–π
            'USDTUSDT'        # –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–æ–π
        ]
        
        self.signal_generator = SignalGenerator(self.logger, self.banned_symbols)
        self.mutex = QMutex()
        self.last_buy_times = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫
        self.holding_start_times = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        self.position_values_usdt = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ –º–æ–Ω–µ—Ç–∞–º
        self.buy_cooldown = 24 * 60 * 60  # 24 —á–∞—Å–∞ –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Ç–æ–π –∂–µ –º–æ–Ω–µ—Ç—ã
        self.signals_file = Path("signals_queue.json")  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        
        # –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∏—Å–∫–∞
        self.max_open_positions = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        self.risk_per_trade = config.MAX_POSITION_PERCENT  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (3%)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π telegram_notifier –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        self.telegram_notifier = telegram_notifier
        if self.telegram_notifier and hasattr(self.telegram_notifier, 'set_callback'):
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π
            self.telegram_notifier.set_callback('get_balance', self.get_balance_for_telegram)
            self.telegram_notifier.set_callback('stop_trading', self.stop_trading_for_telegram)
        
        self.load_signals_queue()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        self.running = True
        self.status_changed.emit("üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞")
        self.log_message.emit("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_generator = SignalGenerator(self.logger, self.banned_symbols)
        
        while self.running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                self.update_portfolio()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É–º–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
                self.check_smart_exit_conditions()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    ticker_data = self.load_ticker_data()
                    ml_data = self.load_ml_data()
                    
                    if ticker_data:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
                        new_signals = signal_generator.generate_signals(
                            {'ticker_data': ticker_data, 'ml_data': ml_data}, 
                            self.portfolio
                        )
                        
                        if new_signals:
                            self.add_signals(new_signals)
                            self.log_message.emit(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(new_signals)} –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
                except Exception as e:
                    self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–¥–æ 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é)
                signals_processed = 0
                max_signals_per_iteration = 10
                
                while self.signals_queue and signals_processed < max_signals_per_iteration:
                    signal = self.signals_queue.pop(0)
                    self.process_signal(signal)
                    signals_processed += 1
                
                if signals_processed > 0:
                    self.log_message.emit(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {signals_processed} —Å–∏–≥–Ω–∞–ª–æ–≤, –æ—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: {len(self.signals_queue)}")
                
                # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                self.cleanup_failed_signals()
                
                time.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                
            except Exception as e:
                self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)
        
        self.status_changed.emit("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def get_significant_positions(self) -> int:
        """
        –ü–æ–¥—Å—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (< $5 USDT)
        """
        try:
            significant_positions = 0
            ignored_remnants = []
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
            ticker_data = self.load_ticker_data()
            
            for coin, amount in self.portfolio.items():
                if coin == 'USDT' or amount <= 0:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã
                symbol = f"{coin}USDT"
                price = 0
                
                if ticker_data and symbol in ticker_data:
                    price = float(ticker_data[symbol].get('lastPrice', 0))
                
                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ticker_data, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
                if price <= 0:
                    try:
                        ticker_info = self.bybit_client.get_tickers(category='spot', symbol=symbol)
                        if ticker_info and 'result' in ticker_info and 'list' in ticker_info['result']:
                            ticker_list = ticker_info['result']['list']
                            if ticker_list:
                                price = float(ticker_list[0].get('lastPrice', 0))
                    except Exception as e:
                        self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
                        continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT
                position_value = amount * price
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–Ω–∞—á–∏–º–æ–π (>= $5)
                if position_value >= 5.0:
                    significant_positions += 1
                    self.log_message.emit(f"üí∞ –ó–Ω–∞—á–∏–º–∞—è –ø–æ–∑–∏—Ü–∏—è: {coin} = {amount:.6f} √ó ${price:.6f} = ${position_value:.2f}")
                else:
                    ignored_remnants.append({
                        'coin': coin,
                        'amount': amount,
                        'price': price,
                        'value': position_value
                    })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
            if ignored_remnants:
                self.log_message.emit(f"üîç –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º {len(ignored_remnants)} –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:")
                for remnant in ignored_remnants:
                    self.log_message.emit(f"   {remnant['coin']}: {remnant['amount']:.6f} √ó ${remnant['price']:.6f} = ${remnant['value']:.2f}")
            
            self.log_message.emit(f"üìä –ó–Ω–∞—á–∏–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {significant_positions} (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(ignored_remnants)} –æ—Å—Ç–∞—Ç–∫–æ–≤ < $5)")
            return significant_positions
            
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥—Å—á–µ—Ç–∞
            return len([coin for coin, amount in self.portfolio.items() if coin != 'USDT' and amount > 0])

    def update_position_values(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π –≤ USDT"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            ticker_data = self.bybit_client.get_tickers(category='spot')
            if not ticker_data or 'list' not in ticker_data:
                self.log_message.emit("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ü–µ–Ω
            prices = {}
            for ticker in ticker_data['list']:
                symbol = ticker.get('symbol', '')
                price = float(ticker.get('lastPrice', 0))
                if symbol and price > 0:
                    prices[symbol] = price
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
            self.position_values_usdt.clear()
            for coin, amount in self.portfolio.items():
                if coin == 'USDT' or amount <= 0:
                    continue
                
                symbol = f"{coin}USDT"
                if symbol in prices:
                    value_usdt = amount * prices[symbol]
                    self.position_values_usdt[symbol] = value_usdt
                    self.log_message.emit(f"üí∞ {symbol}: {amount:.6f} √ó ${prices[symbol]:.4f} = ${value_usdt:.2f}")
                else:
                    self.log_message.emit(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è {symbol}")
            
            total_value = sum(self.position_values_usdt.values())
            self.log_message.emit(f"üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: ${total_value:.2f}")
            
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")

    def load_ticker_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TickerDataLoader –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
            from src.tools.ticker_data_loader import TickerDataLoader
            ticker_loader = TickerDataLoader()
            ticker_data = ticker_loader.load_tickers_data()
            
            if ticker_data and 'tickers' in ticker_data:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
                tickers = ticker_data['tickers']
                self.log_message.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {ticker_data['update_time']}")
                return tickers
            else:
                self.log_message.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API")
                return {}
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API: {e}")
            return {}
    
    def load_ml_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ ML –¥–∞–Ω–Ω—ã—Ö"""
        try:
            models_path = Path("src/strategies/models")
            ml_data = {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ML
            perf_file = models_path / "adaptive_ml_performance.json"
            if perf_file.exists():
                with open(perf_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        ml_data['performance'] = json.loads(content)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è ML
            state_file = models_path / "adaptive_ml_training_state.json"
            if state_file.exists():
                with open(state_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        ml_data['training_state'] = json.loads(content)
            
            return ml_data
        except Exception as e:
            self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ML –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}
    
    def get_instrument_info(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —á–µ—Ä–µ–∑ API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API endpoint /v5/market/instruments-info
            response = self.bybit_client.get_instruments_info(
                category='spot',
                symbol=symbol
            )
            
            self.log_message.emit(f"üîç API –æ—Ç–≤–µ—Ç –¥–ª—è {symbol}: {response}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if response and isinstance(response, list) and len(response) > 0:
                instrument = response[0]
                
                self.log_message.emit(f"üîç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {symbol}: {instrument} (—Ç–∏–ø: {type(instrument)})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ instrument - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                if isinstance(instrument, dict):
                    lot_size_filter = instrument.get('lotSizeFilter', {})
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    min_order_qty = float(lot_size_filter.get('minOrderQty', 0))
                    min_order_amt = float(lot_size_filter.get('minOrderAmt', 5))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 USDT
                    max_order_qty = float(lot_size_filter.get('maxOrderQty', 0))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    max_market_order_qty = float(lot_size_filter.get('maxMarketOrderQty', 0))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    qty_step = float(lot_size_filter.get('qtyStep', lot_size_filter.get('minOrderQty', 0.00001)))
                    
                    # –ï—Å–ª–∏ qtyStep —Ä–∞–≤–µ–Ω 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º minOrderQty –∫–∞–∫ —à–∞–≥
                    if qty_step == 0:
                        qty_step = min_order_qty if min_order_qty > 0 else 0.00001
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º maxMarketOrderQty –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –º–µ–Ω—å—à–µ maxOrderQty
                    # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ maxOrderQty
                    effective_max_qty = max_order_qty
                    if max_market_order_qty > 0 and (max_order_qty == 0 or max_market_order_qty < max_order_qty):
                        effective_max_qty = max_market_order_qty
                        self.log_message.emit(f"üìä {symbol}: –ò—Å–ø–æ–ª—å–∑—É–µ–º maxMarketOrderQty={max_market_order_qty} –≤–º–µ—Å—Ç–æ maxOrderQty={max_order_qty}")
                    
                    self.log_message.emit(f"üìä {symbol}: minOrderQty={min_order_qty}, minOrderAmt={min_order_amt}, maxOrderQty={max_order_qty}, maxMarketOrderQty={max_market_order_qty}, effectiveMaxQty={effective_max_qty}, qtyStep={qty_step}")
                    
                    return {
                        'symbol': symbol,
                        'minOrderQty': min_order_qty,
                        'minOrderAmt': min_order_amt,
                        'maxOrderQty': effective_max_qty,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        'qtyStep': qty_step,
                        'basePrecision': lot_size_filter.get('basePrecision', '0.00001'),
                        'quotePrecision': lot_size_filter.get('quotePrecision', '0.0000001')
                    }
                else:
                    self.log_message.emit(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {symbol}: {type(instrument)}")
            else:
                # –í–æ–∑–º–æ–∂–Ω–æ, response –∏–º–µ–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API
                if response and isinstance(response, dict) and response.get('retCode') == 0:
                    result = response.get('result', {})
                    instruments_list = result.get('list', [])
                    
                    self.log_message.emit(f"üîç –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {symbol}: {instruments_list}")
                    
                    if instruments_list and len(instruments_list) > 0:
                        instrument = instruments_list[0]
                        
                        self.log_message.emit(f"üîç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {symbol}: {instrument} (—Ç–∏–ø: {type(instrument)})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ instrument - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                        if isinstance(instrument, dict):
                            lot_size_filter = instrument.get('lotSizeFilter', {})
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            min_order_qty = float(lot_size_filter.get('minOrderQty', 0))
                            min_order_amt = float(lot_size_filter.get('minOrderAmt', 5))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 USDT
                            max_order_qty = float(lot_size_filter.get('maxOrderQty', 0))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            max_market_order_qty = float(lot_size_filter.get('maxMarketOrderQty', 0))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                            qty_step = float(lot_size_filter.get('qtyStep', 0.0))
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º maxMarketOrderQty –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –º–µ–Ω—å—à–µ maxOrderQty
                            # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ maxOrderQty
                            effective_max_qty = max_order_qty
                            if max_market_order_qty > 0 and (max_order_qty == 0 or max_market_order_qty < max_order_qty):
                                effective_max_qty = max_market_order_qty
                                self.log_message.emit(f"üìä {symbol}: –ò—Å–ø–æ–ª—å–∑—É–µ–º maxMarketOrderQty={max_market_order_qty} –≤–º–µ—Å—Ç–æ maxOrderQty={max_order_qty}")
                            
                            self.log_message.emit(f"üìä {symbol}: minOrderQty={min_order_qty}, minOrderAmt={min_order_amt}, maxOrderQty={max_order_qty}, maxMarketOrderQty={max_market_order_qty}, effectiveMaxQty={effective_max_qty}, qtyStep={qty_step}")
                            
                            return {
                                'symbol': symbol,
                                'minOrderQty': min_order_qty,
                                'minOrderAmt': min_order_amt,
                                'maxOrderQty': effective_max_qty,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                'qtyStep': qty_step,
                                'basePrecision': lot_size_filter.get('basePrecision', '0.00001'),
                                'quotePrecision': lot_size_filter.get('quotePrecision', '0.0000001')
                            }
                        else:
                            self.log_message.emit(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {symbol}: {type(instrument)}")
                    else:
                        self.log_message.emit(f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
                else:
                    error_msg = response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if isinstance(response, dict) else '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞'
                    self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {symbol}: {error_msg}")
                
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {symbol}: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            'symbol': symbol,
            'minOrderQty': 0.00001,
            'minOrderAmt': 5.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 USDT –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
            'qtyStep': 0.00001,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'basePrecision': '0.00001',
            'quotePrecision': '0.0000001'
        }
    
    def add_signals(self, signals: List[TradingSignal]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—É–ª–¥–∞—É–Ω–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞"""
        self.mutex.lock()
        try:
            filtered_signals = []
            current_time = time.time()
            usdt_balance = self.portfolio.get('USDT', 0)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.log_message.emit(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤. USDT –±–∞–ª–∞–Ω—Å: ${usdt_balance:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ < $5)
            open_positions = self.get_significant_positions()
            
            self.log_message.emit(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {open_positions}/{self.max_open_positions}")
            
            for signal in signals:
                self.log_message.emit(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª {signal.symbol} ({signal.signal}), —Ü–µ–Ω–∞: ${signal.price:.6f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É (24 —á–∞—Å–∞)
                if signal.signal == 'BUY' and signal.symbol in self.last_buy_times:
                    time_since_last_buy = current_time - self.last_buy_times[signal.symbol]
                    if time_since_last_buy < self.buy_cooldown:
                        remaining_time = self.buy_cooldown - time_since_last_buy
                        remaining_hours = remaining_time / 3600
                        self.log_message.emit(f"‚è≥ 24-—á–∞—Å–æ–≤–æ–π –∫—É–ª–¥–∞—É–Ω –¥–ª—è {signal.symbol}: –æ—Å—Ç–∞–ª–æ—Å—å {remaining_hours:.1f} —á–∞—Å–æ–≤ (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                        continue
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
                if signal.signal == 'BUY':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
                    if open_positions >= self.max_open_positions:
                        self.log_message.emit(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π ({self.max_open_positions}). –°–∏–≥–Ω–∞–ª {signal.symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                    try:
                        instrument_info = self.get_instrument_info(signal.symbol)
                        min_trade_amount = max(float(instrument_info['minOrderAmt']), 5.0)  # API –º–∏–Ω–∏–º—É–º $5
                        
                        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                        self.log_message.emit(f"üìã {signal.symbol} - minOrderAmt: ${instrument_info['minOrderAmt']}, minOrderQty: {instrument_info['minOrderQty']}, qtyStep: {instrument_info['qtyStep']}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–ª–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É (50% –±–∞–ª–∞–Ω—Å–∞)
                        max_allocation_per_coin = usdt_balance * 0.5
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ
                        current_position_value = self.position_values_usdt.get(signal.symbol, 0)
                        
                        self.log_message.emit(f"üí∞ {signal.symbol} - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${min_trade_amount:.2f}, "
                                            f"–º–∞–∫—Å. –∞–ª–ª–æ–∫–∞—Ü–∏—è: ${max_allocation_per_coin:.2f}, "
                                            f"—Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${current_position_value:.2f}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
                        if usdt_balance < min_trade_amount:
                            self.log_message.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è {signal.symbol}: ${usdt_balance:.2f} < ${min_trade_amount:.2f} (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50% –±–∞–ª–∞–Ω—Å–∞
                        if min_trade_amount > max_allocation_per_coin:
                            self.log_message.emit(f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è {signal.symbol} (${min_trade_amount:.2f}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50% –±–∞–ª–∞–Ω—Å–∞ (${max_allocation_per_coin:.2f}) (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç 50% –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É
                        if current_position_value + min_trade_amount > max_allocation_per_coin:
                            available_allocation = max_allocation_per_coin - current_position_value
                            self.log_message.emit(f"‚ö†Ô∏è {signal.symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 50% –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –º–æ–Ω–µ—Ç—É. "
                                                f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${current_position_value:.2f}, "
                                                f"–¥–æ—Å—Ç—É–ø–Ω–æ: ${available_allocation:.2f}, "
                                                f"–º–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${min_trade_amount:.2f} (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                            continue
                            
                    except Exception as e:
                        self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {signal.symbol}: {e} (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                        continue
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤
                elif signal.signal == 'SELL':
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –∏–∑ —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –∏–∑ BTCUSDT)
                    base_asset = signal.symbol.replace('USDT', '')
                    asset_balance = self.portfolio.get(base_asset, 0)
                    
                    self.log_message.emit(f"üí∞ {signal.symbol} - –±–∞–ª–∞–Ω—Å {base_asset}: {asset_balance}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                    if asset_balance <= 0:
                        self.log_message.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {base_asset} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {signal.symbol}: {asset_balance} (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                    try:
                        instrument_info = self.get_instrument_info(signal.symbol)
                        min_order_qty = float(instrument_info['minOrderQty'])
                        min_order_amt = float(instrument_info['minOrderAmt'])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
                        if asset_balance < min_order_qty:
                            self.log_message.emit(f"‚ö†Ô∏è {signal.symbol}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {base_asset} ({asset_balance}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_order_qty}) (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
                        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º –º–∏–Ω–∏–º—É–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å $5.00 –¥–æ $2.00
                        temp_min_sell_amount = min(min_order_amt, 2.0)
                        estimated_value = asset_balance * signal.price
                        if estimated_value < temp_min_sell_amount:
                            self.log_message.emit(f"‚ö†Ô∏è {signal.symbol}: —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (${estimated_value:.2f}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π (${temp_min_sell_amount:.2f}) (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                            continue
                            
                    except Exception as e:
                        self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {signal.symbol}: {e} (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                        continue
                
                self.log_message.emit(f"‚úÖ –°–∏–≥–Ω–∞–ª {signal.symbol} –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
                filtered_signals.append(signal)
            
            self.signals_queue.extend(filtered_signals)
            if filtered_signals:
                self.log_message.emit(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {len(filtered_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å (–≤—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(self.signals_queue)})")
                self.save_signals_queue()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            if len(filtered_signals) < len(signals):
                rejected_count = len(signals) - len(filtered_signals)
                self.log_message.emit(f"üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ {rejected_count} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        finally:
            self.mutex.unlock()
    
    def update_portfolio(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        max_retries = 3
        retry_delay = 2
        
        for attempt in range(max_retries):
            try:
                self.log_message.emit(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ
                balance_data = self.bybit_client.get_unified_balance_flat()
                
                if not balance_data:
                    self.log_message.emit("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if not isinstance(balance_data, dict):
                    self.log_message.emit(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞: {type(balance_data)}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ balance_data —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á 'coins'
                if 'coins' not in balance_data:
                    self.log_message.emit(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'coins' –≤ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞: {balance_data}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö
                coins_data = balance_data['coins']
                
                self.log_message.emit(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: {coins_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if not coins_data:
                    self.log_message.emit("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                temp_portfolio = {}
                
                if isinstance(coins_data, dict):
                    # –ï—Å–ª–∏ coins - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–∏ coin_name: balance
                    for coin_name, balance in coins_data.items():
                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ float
                            balance_float = float(balance) if balance else 0
                            if balance_float > 0:
                                temp_portfolio[coin_name] = balance_float
                                self.log_message.emit(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞ {coin_name}: {balance_float}")
                        except (ValueError, TypeError) as e:
                            self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–Ω–µ—Ç—ã {coin_name}: {e}")
                elif isinstance(coins_data, list):
                    # –ï—Å–ª–∏ coins - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                    for coin_info in coins_data:
                        if isinstance(coin_info, dict):
                            coin_name = coin_info.get('coin', '')
                            balance = coin_info.get('walletBalance', 0)
                            try:
                                balance_float = float(balance) if balance else 0
                                if balance_float > 0 and coin_name:
                                    temp_portfolio[coin_name] = balance_float
                                    self.log_message.emit(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞ {coin_name}: {balance_float}")
                            except (ValueError, TypeError) as e:
                                self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–Ω–µ—Ç—ã {coin_name}: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if temp_portfolio:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    old_usdt_balance = self.portfolio.get('USDT', 0)
                    
                    self.portfolio = temp_portfolio
                    self.log_message.emit(f"‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π –≤ USDT
                    self.update_position_values()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
                    new_usdt_balance = self.portfolio.get('USDT', 0)
                    if self.telegram_notifier and abs(new_usdt_balance - old_usdt_balance) > 0.01:
                        self.telegram_notifier.notify_balance_change(old_usdt_balance, new_usdt_balance)
                else:
                    self.log_message.emit("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                total_coins = len(self.portfolio)
                total_usdt = self.portfolio.get('USDT', 0)
                self.log_message.emit(f"‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {total_coins} –º–æ–Ω–µ—Ç, USDT: ${total_usdt:.2f}")
                return  # –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}"
                self.log_message.emit(error_msg)
                
                if attempt < max_retries - 1:
                    self.log_message.emit(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(retry_delay)
                    retry_delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                else:
                    self.log_message.emit("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
    
    def cleanup_failed_signals(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            self.mutex.lock()
            initial_count = len(self.signals_queue)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
            self.signals_queue = [signal for signal in self.signals_queue if signal.status != "FAILED"]
            
            removed_count = initial_count - len(self.signals_queue)
            if removed_count > 0:
                self.log_message.emit(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {removed_count} –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
                self.save_signals_queue()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        finally:
            self.mutex.unlock()

    def load_signals_queue(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.signals_file.exists():
                with open(self.signals_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for signal_data in data:
                        signal = TradingSignal(
                            symbol=signal_data['symbol'],
                            signal=signal_data['signal'],
                            confidence=signal_data['confidence'],
                            price=signal_data.get('price', 0.0),
                            reason=signal_data['reason']
                        )
                        signal.status = signal_data.get('status', 'PENDING')
                        signal.execution_attempts = signal_data.get('execution_attempts', 0)
                        self.signals_queue.append(signal)
                    self.log_message.emit(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.signals_queue)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        except Exception as e:
            self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def save_signals_queue(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            data = []
            for signal in self.signals_queue:
                data.append({
                    'symbol': signal.symbol,
                    'signal_type': signal.signal,  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ signal_type –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                    'signal': signal.signal,
                    'confidence': signal.confidence,
                    'price': signal.price,  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
                    'reason': signal.reason,
                    'status': signal.status,
                    'execution_attempts': signal.execution_attempts
                })
            with open(self.signals_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def clear_signals_queue(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            signals_count = len(self.signals_queue)
            self.signals_queue.clear()
            self.save_signals_queue()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—É—é –æ—á–µ—Ä–µ–¥—å –≤ —Ñ–∞–π–ª
            self.log_message.emit(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {signals_count} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
        except Exception as e:
            self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def process_signal(self, signal: TradingSignal):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–∞
            if signal.status == "EXECUTED":
                return  # –°–∏–≥–Ω–∞–ª —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω
            
            if signal.status == "FAILED":
                return  # –°–∏–≥–Ω–∞–ª –ø—Ä–æ–≤–∞–ª–µ–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            if signal.execution_attempts >= signal.max_attempts:
                signal.status = "FAILED"
                self.log_message.emit(f"‚ùå –°–∏–≥–Ω–∞–ª {signal.signal} –¥–ª—è {signal.symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ—Å–ª–µ {signal.max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è
            if not self.trading_enabled:
                self.log_message.emit(f"‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –°–∏–≥–Ω–∞–ª {signal.signal} –¥–ª—è {signal.symbol} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
                return
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            signal.execution_attempts += 1
            signal.last_attempt_time = datetime.now()
            signal.status = "EXECUTING"
            
            self.log_message.emit(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {signal.signal} –¥–ª—è {signal.symbol} (–ø–æ–ø—ã—Ç–∫–∞ {signal.execution_attempts}/{signal.max_attempts}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
            
            success = False
            if signal.signal == 'BUY':
                success = self.execute_buy_order(signal)
            elif signal.signal == 'SELL':
                success = self.execute_sell_order(signal)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if success:
                signal.status = "EXECUTED"
                self.log_message.emit(f"‚úÖ –°–∏–≥–Ω–∞–ª {signal.signal} –¥–ª—è {signal.symbol} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω")
                self.save_signals_queue()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            else:
                signal.status = "PENDING"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                self.log_message.emit(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª {signal.signal} –¥–ª—è {signal.symbol} –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {signal.execution_attempts}/{signal.max_attempts})")
                self.save_signals_queue()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                
        except Exception as e:
            signal.status = "PENDING"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}: {e}")
            self.save_signals_queue()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    
    def format_quantity_for_api(self, qty: float, qty_step: float) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è API –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
        
        Args:
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            qty_step: –®–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        """
        if qty == 0:
            return "0"
        
        from decimal import Decimal, ROUND_DOWN, getcontext
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        getcontext().prec = 28
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Decimal, –∏—Å–ø–æ–ª—å–∑—É—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Ç–æ—á–Ω–æ—Å—Ç–∏ float
        # –°–Ω–∞—á–∞–ª–∞ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ (15), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ float
        qty_rounded = round(qty, 15)
        qty_step_rounded = round(qty_step, 15)
        
        decimal_qty = Decimal(str(qty_rounded))
        decimal_step = Decimal(str(qty_step_rounded))
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ qty_step (–≤–Ω–∏–∑)
        rounded_qty = (decimal_qty // decimal_step) * decimal_step
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ qty_step
        if decimal_step >= 1:
            # –ï—Å–ª–∏ —à–∞–≥ >= 1, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            return str(int(rounded_qty))
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ qty_step
            step_str = f"{decimal_step:.15f}".rstrip('0').rstrip('.')
            
            if '.' in step_str:
                precision_decimals = len(step_str.split('.')[1])
            else:
                precision_decimals = 0
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞–∑—É–º–Ω—ã–º –ø—Ä–µ–¥–µ–ª–æ–º
            precision_decimals = min(precision_decimals, 8)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
            formatted = f"{rounded_qty:.{precision_decimals}f}"
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ —Å–ø—Ä–∞–≤–∞
            if '.' in formatted:
                formatted = formatted.rstrip('0').rstrip('.')
                # –ï—Å–ª–∏ —É–±—Ä–∞–ª–∏ –≤—Å–µ –∑–Ω–∞–∫–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏, –Ω–æ precision_decimals > 0, 
                # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–Ω–∞–∫
                if '.' not in formatted and precision_decimals > 0:
                    formatted += '.0'
            
            return formatted
    
    def execute_buy_order(self, signal: TradingSignal):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        try:
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.log_message.emit(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É {signal.symbol}. –¶–µ–Ω–∞: ${signal.price:.6f}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if signal.symbol in self.banned_symbols:
                self.log_message.emit(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {signal.symbol} –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ < $5)
            open_positions = self.get_significant_positions()
            
            self.log_message.emit(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {open_positions}/{self.max_open_positions}")
            
            if open_positions >= self.max_open_positions:
                self.log_message.emit(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π ({self.max_open_positions}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É {signal.symbol}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º 24-—á–∞—Å–æ–≤–æ–π –∫—É–ª–¥–∞—É–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            current_time = time.time()
            if signal.symbol in self.last_buy_times:
                time_since_last_buy = current_time - self.last_buy_times[signal.symbol]
                hours_since_last_buy = time_since_last_buy / 3600
                self.log_message.emit(f"‚è∞ {signal.symbol}: –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏: {hours_since_last_buy:.1f} —á–∞—Å–æ–≤ (–∫—É–ª–¥–∞—É–Ω: 24 —á–∞—Å–∞)")
                
                if time_since_last_buy < self.buy_cooldown:
                    remaining_time = self.buy_cooldown - time_since_last_buy
                    remaining_hours = remaining_time / 3600
                    self.log_message.emit(f"‚è≥ 24-—á–∞—Å–æ–≤–æ–π –∫—É–ª–¥–∞—É–Ω –¥–ª—è {signal.symbol}: –æ—Å—Ç–∞–ª–æ—Å—å {remaining_hours:.1f} —á–∞—Å–æ–≤")
                    return False
            else:
                self.log_message.emit(f"‚è∞ {signal.symbol}: –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
            usdt_balance = self.portfolio.get('USDT', 0)
            self.log_message.emit(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —á–µ—Ä–µ–∑ API
            instrument_info = self.get_instrument_info(signal.symbol)
            min_trade_amount = float(instrument_info['minOrderAmt'])
            min_order_qty = instrument_info['minOrderQty']
            qty_step = instrument_info['qtyStep']
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            self.log_message.emit(f"üìã {signal.symbol} - minOrderAmt: ${min_trade_amount:.2f}, minOrderQty: {min_order_qty}, qtyStep: {qty_step}")
            
            # –í–ê–ñ–ù–û: Bybit API —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º $5 –¥–ª—è API —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Å —è–Ω–≤–∞—Ä—è 2025)
            # –ù–æ –¥–ª—è BTCUSDT minOrderAmt —É–∂–µ —Ä–∞–≤–µ–Ω 5 USDT —Å–æ–≥–ª–∞—Å–Ω–æ API –æ—Ç–≤–µ—Ç—É
            api_min_order_value = 5.0  # $5 –º–∏–Ω–∏–º—É–º –¥–ª—è API —Ç–æ—Ä–≥–æ–≤–ª–∏
            
            # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –±–æ–ª—å—à–∏—Ö –±—É—Ñ–µ—Ä–æ–≤
            problematic_symbols = ['BBSOLUSDT', 'BABYDOGEUSDT']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±—É—Ñ–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç qtyStep –∏ —Å–∏–º–≤–æ–ª–∞
            if signal.symbol in problematic_symbols:
                buffer_multiplier = 1.50  # 50% –±—É—Ñ–µ—Ä –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                self.log_message.emit(f"üîç {signal.symbol}: –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä 50% –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
            elif qty_step < 1e-6:  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                buffer_multiplier = 1.25  # 25% –±—É—Ñ–µ—Ä –¥–ª—è –º–æ–Ω–µ—Ç —Å –æ—á–µ–Ω—å –º–∞–ª—ã–º qtyStep
                self.log_message.emit(f"üîç {signal.symbol}: qtyStep={qty_step} < 1e-6, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –±—É—Ñ–µ—Ä 25%")
            elif qty_step < 1e-4:  # –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                buffer_multiplier = 1.15  # 15% –±—É—Ñ–µ—Ä –¥–ª—è –º–æ–Ω–µ—Ç —Å –º–∞–ª—ã–º qtyStep
                self.log_message.emit(f"üîç {signal.symbol}: qtyStep={qty_step} < 1e-4, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –±—É—Ñ–µ—Ä 15%")
            else:
                buffer_multiplier = 1.05  # 5% –±—É—Ñ–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–Ω–µ—Ç
                self.log_message.emit(f"üîç {signal.symbol}: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—É—Ñ–µ—Ä 5%")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API
            if signal.symbol == 'BTCUSDT':
                # –î–ª—è BTCUSDT –∏—Å–ø–æ–ª—å–∑—É–µ–º minOrderAmt –∏–∑ API (5 USDT) —Å –±—É—Ñ–µ—Ä–æ–º
                base_min_amount = max(min_trade_amount, api_min_order_value)
                effective_min_amount = base_min_amount * buffer_multiplier
                max_trade_amount = max(effective_min_amount * 20, 100.0)  # –î–æ $100 –¥–ª—è BTCUSDT
                self.log_message.emit(f"üíé BTCUSDT: base_min=${base_min_amount:.2f}, effective_min=${effective_min_amount:.2f}, max=${max_trade_amount:.2f}")
            elif signal.symbol == 'BBSOLUSDT':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è BBSOLUSDT - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ API –º–∏–Ω–∏–º—É–º
                self.log_message.emit(f"üîç BBSOLUSDT: minOrderAmt={min_trade_amount}, API_min={api_min_order_value}")
                base_min_amount = max(min_trade_amount, api_min_order_value)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º $10
                effective_min_amount = base_min_amount * buffer_multiplier  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±—É—Ñ–µ—Ä
                max_trade_amount = max(effective_min_amount * 4, 20.0)  # –ú–∞–∫—Å–∏–º—É–º $20
                self.log_message.emit(f"üîç BBSOLUSDT: base_min=${base_min_amount:.2f}, effective_min=${effective_min_amount:.2f}, max=${max_trade_amount:.2f}, buffer={buffer_multiplier:.2f}")
            elif signal.symbol in ['ETHUSDT', 'BNBUSDT', 'LINKUSDT']:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ—Ä–æ–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –º–∏–Ω–∏–º—É–º —Å –±—É—Ñ–µ—Ä–æ–º
                base_min_amount = max(min_trade_amount, api_min_order_value, 20.0)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å $50 –¥–æ $20
                effective_min_amount = base_min_amount * buffer_multiplier
                max_trade_amount = max(effective_min_amount * 4, 80.0)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å $200 –¥–æ $80
                self.log_message.emit(f"üíé {signal.symbol}: base_min=${base_min_amount:.2f}, effective_min=${effective_min_amount:.2f}, max=${max_trade_amount:.2f}")
            else:
                # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º API –º–∏–Ω–∏–º—É–º $5 —Å –±—É—Ñ–µ—Ä–æ–º
                base_min_amount = max(min_trade_amount, api_min_order_value)
                effective_min_amount = base_min_amount * buffer_multiplier
                max_trade_amount = max(effective_min_amount * 10, 20.0)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å $50 –¥–æ $20 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                self.log_message.emit(f"üí∞ {signal.symbol}: base_min=${base_min_amount:.2f}, effective_min=${effective_min_amount:.2f}, max=${max_trade_amount:.2f}")
            
            if usdt_balance < effective_min_amount:
                self.log_message.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {signal.symbol}: ${usdt_balance:.2f} (–º–∏–Ω–∏–º—É–º ${effective_min_amount:.2f})")
                return False
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∞–ª–ª–æ–∫–∞—Ü–∏—é –Ω–∞ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É –¥–æ 50% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            max_allocation_per_coin = usdt_balance * 0.5  # 50% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ
            current_position_value = self.position_values_usdt.get(signal.symbol, 0)
            self.log_message.emit(f"üìä {signal.symbol}: –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è ${current_position_value:.2f}, –º–∞–∫—Å. –∞–ª–ª–æ–∫–∞—Ü–∏—è ${max_allocation_per_coin:.2f}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º MAX_POSITION_PERCENT –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –º–∏–Ω–∏–º—É–º–∞ –∏ –Ω–µ –±–æ–ª–µ–µ –º–∞–∫—Å–∏–º—É–º–∞)
            base_trade_amount = usdt_balance * self.risk_per_trade
            trade_amount = max(min(base_trade_amount, max_trade_amount), effective_min_amount)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –Ω–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ª–∏–º–∏—Ç –≤ 50% –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É
            if current_position_value + trade_amount > max_allocation_per_coin:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
                available_allocation = max_allocation_per_coin - current_position_value
                if available_allocation < effective_min_amount:
                    self.log_message.emit(f"‚ö†Ô∏è {signal.symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 50% –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –º–æ–Ω–µ—Ç—É. "
                                        f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${current_position_value:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${available_allocation:.2f}, "
                                        f"–º–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${effective_min_amount:.2f}")
                    return False
                trade_amount = available_allocation
                self.log_message.emit(f"üìâ {signal.symbol}: –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ ${trade_amount:.2f} "
                                    f"–¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ 50% –±–∞–ª–∞–Ω—Å–∞")
            
            self.log_message.emit(f"üíµ –†–∞—Å—á–µ—Ç —Å—É–º–º—ã —Ç–æ—Ä–≥–æ–≤–ª–∏: –±–∞–∑–æ–≤–∞—è=${base_trade_amount:.2f} (–±–∞–ª–∞–Ω—Å√ó{self.risk_per_trade:.3f})")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ trade_amount –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ–ª–æ–≤–∏–Ω—É –±–∞–ª–∞–Ω—Å–∞, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ
            if trade_amount > max_allocation_per_coin:
                trade_amount = max_allocation_per_coin
                self.log_message.emit(f"‚ö†Ô∏è {signal.symbol}: –°—É–º–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 50% –±–∞–ª–∞–Ω—Å–∞: ${trade_amount:.2f}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            self.log_message.emit(f"üîç {signal.symbol}: –†–∞—Å—á–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ - –±–∞–ª–∞–Ω—Å=${usdt_balance:.2f}, —Ä–∏—Å–∫={self.risk_per_trade:.3f}, "
                                f"–±–∞–∑–æ–≤–∞—è_—Å—É–º–º–∞=${base_trade_amount:.2f}, –º–∞–∫—Å_–Ω–∞_–º–æ–Ω–µ—Ç—É=${max_allocation_per_coin:.2f}, "
                                f"—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π_–º–∏–Ω=${effective_min_amount:.2f}, –º–∞–∫—Å_—Ç–æ—Ä–≥–æ–≤–ª—è=${max_trade_amount:.2f}, "
                                f"–∏—Ç–æ–≥–æ–≤–∞—è_—Å—É–º–º–∞=${trade_amount:.2f}")
            self.log_message.emit(f"üí∞ –†–∞—Å—á–µ—Ç –¥–ª—è {signal.symbol}: –±–∞–ª–∞–Ω—Å=${usdt_balance:.2f}, —Ä–∏—Å–∫={self.risk_per_trade*100:.1f}%, –º–∞–∫—Å_–∞–ª–ª–æ–∫–∞—Ü–∏—è=${max_allocation_per_coin:.2f}, –∏—Ç–æ–≥–æ=${trade_amount:.2f}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            qty = trade_amount / signal.price
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ API
            min_order_qty = instrument_info['minOrderQty']
            max_order_qty = instrument_info['maxOrderQty']  # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç maxMarketOrderQty)
            qty_step = instrument_info['qtyStep']
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ qtyStep
            if qty_step > 0:
                import math
                from decimal import Decimal
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ qty_step
                # –≤–∫–ª—é—á–∞—è –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1e-05)
                decimal_step = Decimal(str(qty_step))
                step_str = format(decimal_step, 'f')
                step_str = step_str.rstrip('0').rstrip('.')
                
                if '.' in step_str:
                    precision_decimals = len(step_str.split('.')[1])
                else:
                    precision_decimals = 0
                
                # –û–∫—Ä—É–≥–ª—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                qty = math.floor(qty / qty_step) * qty_step
                qty = round(qty, precision_decimals)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–æ–π
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—É–º–Ω—ã–º –ø—Ä–µ–¥–µ–ª–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á—Ä–µ–∑–º–µ—Ä–Ω–æ –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è BABYDOGEUSDT - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
            if signal.symbol == 'BABYDOGEUSDT':
                # –î–ª—è BABYDOGEUSDT —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥—è –∏–∑ —Ä–∞–∑—É–º–Ω–æ–π —Å—É–º–º—ã ($50)
                max_reasonable_amount = 50.0  # –ú–∞–∫—Å–∏–º—É–º $50 –¥–ª—è BABYDOGEUSDT
                reasonable_max_qty = max_reasonable_amount / signal.price
                self.log_message.emit(f"üîç BABYDOGEUSDT: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –∏—Å—Ö–æ–¥—è –∏–∑ ${max_reasonable_amount}: {reasonable_max_qty:.0f} —Ç–æ–∫–µ–Ω–æ–≤")
            else:
                reasonable_max_qty = 1e8  # 100 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ - —Ä–∞–∑—É–º–Ω—ã–π –ø—Ä–µ–¥–µ–ª –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ–ª–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
            
            if qty > reasonable_max_qty:
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {qty:.0f} –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑—É–º–Ω—ã–π –ø—Ä–µ–¥–µ–ª {reasonable_max_qty:.0f} –¥–ª—è {signal.symbol}")
                qty = reasonable_max_qty
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Ä–∞–∑—É–º–Ω—ã–º –ø—Ä–µ–¥–µ–ª–æ–º: {qty:.0f}")
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                trade_usdt = qty * signal.price
                self.log_message.emit(f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${trade_usdt:.6f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç API (–ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω–æ–≥–æ –ø—Ä–µ–¥–µ–ª–∞)
            if max_order_qty > 0 and qty > max_order_qty:
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–ª—è {signal.symbol}: {qty:.8f} > {max_order_qty:.8f}")
                qty = max_order_qty
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: {qty:.8f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
            if qty < min_order_qty:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø–æ qtyStep
                if qty_step > 0:
                    import math
                    from decimal import Decimal
                    
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ qty_step
                    # –≤–∫–ª—é—á–∞—è –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1e-05)
                    decimal_step = Decimal(str(qty_step))
                    step_str = format(decimal_step, 'f')
                    step_str = step_str.rstrip('0').rstrip('.')
                    
                    if '.' in step_str:
                        precision_decimals = len(step_str.split('.')[1])
                    else:
                        precision_decimals = 0
                    
                    # –û–∫—Ä—É–≥–ª—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                    qty = math.ceil(min_order_qty / qty_step) * qty_step
                    qty = round(qty, precision_decimals)
                else:
                    qty = min_order_qty
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {qty:.8f}")
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                if max_order_qty > 0 and qty > max_order_qty:
                    self.log_message.emit(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è {signal.symbol}: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {min_order_qty:.8f} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ {max_order_qty:.8f}")
                    return False
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            trade_usdt = qty * signal.price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∏–Ω–∏–º—É–º: max(minOrderQty * price, minOrderAmt)
            effective_min_check = max(min_order_qty * signal.price, effective_min_amount)
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
            if trade_usdt < effective_min_check:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                qty_needed = effective_min_check / signal.price
                if qty_step > 0:
                    import math
                    import decimal
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ qty_step
                    qty_step_str = f"{qty_step:.10f}".rstrip('0').rstrip('.')
                    if '.' in qty_step_str:
                        precision_decimals = len(qty_step_str.split('.')[1])
                    else:
                        precision_decimals = 0
                    
                    # –û–∫—Ä—É–≥–ª—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                    qty = math.ceil(qty_needed / qty_step) * qty_step
                    qty = round(qty, precision_decimals)
                else:
                    qty = qty_needed
                trade_usdt = qty * signal.price
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞: {qty:.8f}")
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ–≥–æ –ø—Ä–µ–¥–µ–ª–∞ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                if qty > reasonable_max_qty:
                    self.log_message.emit(f"‚ö†Ô∏è –ü–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {qty:.0f} –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑—É–º–Ω—ã–π –ø—Ä–µ–¥–µ–ª {reasonable_max_qty:.0f} –¥–ª—è {signal.symbol}")
                    qty = reasonable_max_qty
                    trade_usdt = qty * signal.price
                    self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Ä–∞–∑—É–º–Ω—ã–º –ø—Ä–µ–¥–µ–ª–æ–º: {qty:.0f}, –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${trade_usdt:.2f}")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            if trade_usdt > usdt_balance:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
                max_affordable_qty = usdt_balance / signal.price
                
                # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ —Å–æ–≥–ª–∞—Å–Ω–æ qtyStep
                if qty_step > 0:
                    import math
                    import decimal
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ qty_step
                    qty_step_str = f"{qty_step:.10f}".rstrip('0').rstrip('.')
                    if '.' in qty_step_str:
                        precision_decimals = len(qty_step_str.split('.')[1])
                    else:
                        precision_decimals = 0
                    
                    # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                    max_affordable_qty = math.floor(max_affordable_qty / qty_step) * qty_step
                    max_affordable_qty = round(max_affordable_qty, precision_decimals)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
                if max_affordable_qty < min_order_qty:
                    self.log_message.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT: —Ç—Ä–µ–±—É–µ—Ç—Å—è ${trade_usdt:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ ${usdt_balance:.2f}. –î–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {min_order_qty:.8f} —Ç—Ä–µ–±—É–µ—Ç ${min_order_qty * signal.price:.2f}")
                    return False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É
                qty = max_affordable_qty
                trade_usdt = qty * signal.price
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {qty:.8f} (${trade_usdt:.2f})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–µ–Ω—å—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
                if trade_usdt < effective_min_amount:
                    self.log_message.emit(f"‚ö†Ô∏è –ü–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–¥ –±–∞–ª–∞–Ω—Å —Å—É–º–º–∞ ${trade_usdt:.2f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ${effective_min_amount:.2f}")
                    return False
            
            self.log_message.emit(f"üí∞ –ü–û–ö–£–ü–ö–ê {signal.symbol}: ${trade_usdt:.2f} USDT ({qty:.6f} {signal.symbol.replace('USDT', '')})")
            self.log_message.emit(f"   –¶–µ–Ω–∞: ${signal.price:.6f}, –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${trade_usdt:.2f}, –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∏–Ω–∏–º—É–º: ${effective_min_amount:.2f}")
            self.log_message.emit(f"   –ü—Ä–∏—á–∏–Ω–∞: {signal.reason}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
            formatted_qty = self.format_quantity_for_api(qty, qty_step)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è BBSOLUSDT)
            self.log_message.emit(f"üî¢ –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {signal.symbol}:")
            self.log_message.emit(f"   minOrderQty: {min_order_qty}, maxOrderQty: {max_order_qty}")
            self.log_message.emit(f"   qtyStep: {qty_step}, minOrderAmt: {min_trade_amount}")
            self.log_message.emit(f"   –¶–µ–Ω–∞: ${signal.price:.8f}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty:.8f}")
            self.log_message.emit(f"   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {formatted_qty}")
            self.log_message.emit(f"   –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${trade_usdt:.2f}")
            
            order_result = self.bybit_client.place_order(
                category='spot',
                symbol=signal.symbol,
                side='Buy',
                order_type='Market',
                qty=formatted_qty
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –ø–æ retCode –∏ –Ω–∞–ª–∏—á–∏—é orderId
            if (order_result and 
                order_result.get('retCode') == 0 and 
                order_result.get('result', {}).get('orderId')):
                
                order_id = order_result.get('result', {}).get('orderId')
                self.log_message.emit(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {signal.symbol} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω (ID: {order_id})")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                self.last_buy_times[signal.symbol] = current_time
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
                self.holding_start_times[signal.symbol] = current_time
                
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
                self.update_portfolio()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
                if self.telegram_notifier:
                    self.telegram_notifier.notify_trade_executed(
                        'BUY', signal.symbol, qty, signal.price, trade_usdt
                    )
                
                # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
                trade_info = {
                    'symbol': signal.symbol,
                    'side': 'BUY',
                    'amount': trade_usdt,
                    'qty': qty,
                    'price': signal.price,
                    'confidence': signal.confidence,
                    'reason': signal.reason,
                    'order_id': order_result.get('result', {}).get('orderId'),
                    'timestamp': datetime.now().isoformat()
                }
                self.trade_executed.emit(trade_info)
                return True
            else:
                error_msg = order_result.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if order_result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API'
                self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {signal.symbol}: {error_msg}")
                # Telegram notification for buy order error
                if self.telegram_notifier:
                    self.telegram_notifier.notify_error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {signal.symbol}: {error_msg}")
                return False
            
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ {signal.symbol}: {e}")
            # Telegram notification for buy order exception
            if self.telegram_notifier:
                self.telegram_notifier.notify_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ {signal.symbol}: {e}")
            return False
    
    def execute_sell_order(self, signal: TradingSignal):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        try:
            base_asset = signal.symbol.replace('USDT', '')
            asset_balance = self.portfolio.get(base_asset, 0)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.log_message.emit(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–∞–∂—É {signal.symbol}. –ë–∞–ª–∞–Ω—Å {base_asset}: {asset_balance:.8f}")
            
            if asset_balance <= 0:
                self.log_message.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {base_asset} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {asset_balance}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            instrument_info = self.get_instrument_info(signal.symbol)
            min_order_qty = instrument_info['minOrderQty']
            qty_step = instrument_info['qtyStep']
            min_order_amt = instrument_info['minOrderAmt']
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            self.log_message.emit(f"üìã {signal.symbol} - minOrderQty: {min_order_qty}, qtyStep: {qty_step}, minOrderAmt: ${min_order_amt}")
            
            # –ü—Ä–æ–¥–∞–µ–º 50% –æ—Ç –∏–º–µ—é—â–µ–≥–æ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            sell_amount = asset_balance * 0.5
            
            self.log_message.emit(f"üí∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞—Ç—å 50% –æ—Ç {asset_balance:.8f} = {sell_amount:.8f} {base_asset}")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ qtyStep
            if qty_step > 0:
                import math
                from decimal import Decimal
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ qty_step
                # –≤–∫–ª—é—á–∞—è –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1e-05)
                decimal_step = Decimal(str(qty_step))
                step_str = format(decimal_step, 'f')
                step_str = step_str.rstrip('0').rstrip('.')
                
                if '.' in step_str:
                    precision_decimals = len(step_str.split('.')[1])
                else:
                    precision_decimals = 0
                
                self.log_message.emit(f"üî¢ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ: qtyStep={qty_step}, precision_decimals={precision_decimals}")
                
                # –û–∫—Ä—É–≥–ª—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                original_sell_amount = sell_amount
                sell_amount = math.floor(sell_amount / qty_step) * qty_step
                sell_amount = round(sell_amount, precision_decimals)
                
                self.log_message.emit(f"üî¢ –û–∫—Ä—É–≥–ª–µ–Ω–æ —Å {original_sell_amount:.8f} –¥–æ {sell_amount:.8f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
            if sell_amount < min_order_qty:
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ 50% ({sell_amount:.8f}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_order_qty:.8f}")
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–º
                sell_amount = asset_balance
                
                self.log_message.emit(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–º: {sell_amount:.8f}")
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ qtyStep
                if qty_step > 0:
                    original_full_amount = sell_amount
                    sell_amount = math.floor(sell_amount / qty_step) * qty_step
                    sell_amount = round(sell_amount, precision_decimals)
                    
                    self.log_message.emit(f"üî¢ –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω —Å {original_full_amount:.8f} –¥–æ {sell_amount:.8f}")
                
                if sell_amount >= min_order_qty:
                    self.log_message.emit(f"‚úÖ –ü—Ä–æ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–º: {sell_amount:.8f} {base_asset}")
                else:
                    self.log_message.emit(f"‚ùå –î–∞–∂–µ –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–º {sell_amount:.8f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_order_qty:.8f}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º –º–∏–Ω–∏–º—É–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å $5.00 –¥–æ $2.00
            temp_min_sell_amount = min(min_order_amt, 2.0)
            estimated_usdt = sell_amount * signal.price
            
            self.log_message.emit(f"üíµ –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏: {sell_amount:.8f} √ó ${signal.price:.6f} = ${estimated_usdt:.2f}")
            
            if estimated_usdt < temp_min_sell_amount:
                self.log_message.emit(f"‚ö†Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ ${estimated_usdt:.2f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ${temp_min_sell_amount:.2f}")
                return False
            
            self.log_message.emit(f"üí∏ –ü–†–û–î–ê–ñ–ê {signal.symbol}: {sell_amount:.8f} {base_asset} ‚âà ${estimated_usdt:.2f}")
            self.log_message.emit(f"   –¶–µ–Ω–∞: ${signal.price:.6f}, –ü—Ä–∏—á–∏–Ω–∞: {signal.reason}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
            formatted_qty = self.format_quantity_for_api(sell_amount, qty_step)
            self.log_message.emit(f"üî¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ API: {formatted_qty} (–∏—Å—Ö–æ–¥–Ω–æ–µ: {sell_amount})")
            
            order_result = self.bybit_client.place_order(
                category='spot',
                symbol=signal.symbol,
                side='Sell',
                order_type='Market',
                qty=formatted_qty
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –ø–æ retCode –∏ –Ω–∞–ª–∏—á–∏—é orderId
            if (order_result and 
                order_result.get('retCode') == 0 and 
                order_result.get('result', {}).get('orderId')):
                
                order_id = order_result.get('result', {}).get('orderId')
                self.log_message.emit(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {signal.symbol} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω (ID: {order_id})")
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
                if signal.symbol in self.holding_start_times:
                    del self.holding_start_times[signal.symbol]
                
                # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
                self.update_portfolio()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ
                if self.telegram_notifier:
                    self.telegram_notifier.notify_trade_executed(
                        'SELL', signal.symbol, sell_amount, signal.price, estimated_usdt
                    )
                
                # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
                trade_info = {
                    'symbol': signal.symbol,
                    'side': 'SELL',
                    'amount': sell_amount,
                    'price': signal.price,
                    'confidence': signal.confidence,
                    'reason': signal.reason,
                    'estimated_usdt': estimated_usdt,
                    'order_id': order_result.get('result', {}).get('orderId'),
                    'timestamp': datetime.now().isoformat()
                }
                self.trade_executed.emit(trade_info)
                return True
            else:
                error_msg = order_result.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if order_result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API'
                self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {signal.symbol}: {error_msg}")
                # Telegram notification for sell order error
                if self.telegram_notifier:
                    self.telegram_notifier.notify_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {signal.symbol}: {error_msg}")
                return False
            
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ {signal.symbol}: {e}")
            # Telegram notification for sell order exception
            if self.telegram_notifier:
                self.telegram_notifier.notify_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ {signal.symbol}: {e}")
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        self.running = False
    
    def check_smart_exit_conditions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É–º–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
        try:
            if not hasattr(self, 'portfolio') or not self.portfolio:
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            try:
                from strategies.adaptive_ml import AdaptiveMLStrategy
                ml_strategy = AdaptiveMLStrategy()
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
                ticker_data = self.load_ticker_data()
                if not ticker_data:
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                for coin, amount in self.portfolio.items():
                    if coin == 'USDT' or amount <= 0:
                        continue
                    
                    symbol = f"{coin}USDT"
                    if symbol not in ticker_data:
                        continue
                    
                    current_price = float(ticker_data[symbol].get('price', 0))
                    if current_price <= 0:
                        continue
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—ã–≥–æ–¥–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
                    should_exit, confidence, reason = ml_strategy.analyze_position_profitability(
                        symbol, current_price, amount
                    )
                    
                    if should_exit and confidence > 0.7:  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã—Ö–æ–¥–µ
                        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                        sell_signal = TradingSignal(
                            symbol=symbol,
                            signal='SELL',
                            confidence=confidence,
                            price=current_price,
                            reason=f"–£–º–Ω—ã–π –≤—ã—Ö–æ–¥: {reason}"
                        )
                        
                        self.log_message.emit(f"üß† –£–º–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ {symbol}: {reason} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        self.add_signals([sell_signal])
                        
            except ImportError:
                # ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
                self.log_message.emit("‚ö†Ô∏è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —É–º–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞")
            except Exception as e:
                self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–º–Ω–æ–º –≤—ã—Ö–æ–¥–µ: {e}")
                
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–º–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞: {e}")
    
    def get_balance_for_telegram(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞
            self.update_portfolio()
            
            if hasattr(self, 'portfolio') and self.portfolio:
                balance_text = "üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b>\n\n"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                ticker_data = self.load_ticker_data()
                total_value_usdt = 0
                has_assets = False
                
                for coin, amount in self.portfolio.items():
                    if amount > 0:
                        has_assets = True
                        if coin == 'USDT':
                            balance_text += f"‚Ä¢ {coin}: {amount:.2f} USDT\n"
                            total_value_usdt += amount
                        else:
                            # –ò—â–µ–º —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã
                            symbol = f"{coin}USDT"
                            price = 0
                            if ticker_data and symbol in ticker_data:
                                price = float(ticker_data[symbol].get('price', 0))
                            
                            value_usdt = amount * price
                            total_value_usdt += value_usdt
                            
                            balance_text += f"‚Ä¢ {coin}: {amount:.6f} (${value_usdt:.2f})\n"
                
                if has_assets:
                    balance_text += f"\nüíµ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value_usdt:.2f} USDT</b>"
                    return balance_text
                else:
                    return "üí∞ <b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
            else:
                return "‚ùå <b>–î–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        except Exception as e:
            error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n{str(e)}"
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è Telegram: {e}")
            return error_msg
    
    def stop_trading_for_telegram(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —á–µ—Ä–µ–∑ Telegram"""
        try:
            if hasattr(self, 'trading_enabled'):
                self.trading_enabled = False
                self.log_message.emit("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram")
                return "üõë <b>–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n–í—Å–µ –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
            else:
                return "‚ö†Ô∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞</b>\n\n–°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç"
        except Exception as e:
            error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n{str(e)}"
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ —á–µ—Ä–µ–∑ Telegram: {e}")
            return error_msg


class TraderMainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã-—Ç–æ—Ä–≥–æ–≤—Ü–∞"""
    
    def __init__(self, enable_trading=True):  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å False –Ω–∞ True –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        super().__init__()
        self.setWindowTitle("ü§ñ –ü—Ä–æ–≥—Ä–∞–º–º–∞-—Ç–æ—Ä–≥–æ–≤–µ—Ü - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
        self.setGeometry(100, 100, 1200, 800)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.trading_active = False
        self.enable_trading_on_start = enable_trading  # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.current_data = {}
        self.trade_history = []
        self.bybit_client = None
        self.data_collector = None
        self.trading_engine = None
        self.telegram_notifier = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º telegram_notifier
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã)
        self.setup_ui()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ—Ç–æ–∫–æ–≤
        self.load_telegram_settings_early()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI)
        self.init_api_client()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤
        self.init_threads()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.connect_signals()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        QTimer.singleShot(2000, self.auto_start_trading)  # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger = logging.getLogger(__name__)
    
    def init_api_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            credentials = get_api_credentials()
            self.bybit_client = BybitClient(
                api_key=credentials['api_key'],
                api_secret=credentials['api_secret'],
                testnet=credentials.get('testnet', True)
            )
            self.add_log("‚úÖ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
            self.bybit_client = None
    
    def init_threads(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤"""
        # –ü–æ—Ç–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        self.data_collector = DataCollector()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        telegram_notifier = None
        if hasattr(self, 'telegram_settings') and self.telegram_settings:
            try:
                from telegram_notifier import TelegramNotifier
                telegram_notifier = TelegramNotifier(
                    self.telegram_settings['token'], 
                    self.telegram_settings['chat_id']
                )
                self.telegram_notifier = telegram_notifier
                self.add_log("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
                telegram_notifier = None
        
        # –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        if self.bybit_client:
            self.trading_engine = TradingEngine(self.bybit_client, self.enable_trading_on_start, telegram_notifier)
        else:
            self.trading_engine = None
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signals_update_timer = QTimer()
        self.signals_update_timer.timeout.connect(self.update_active_signals_table)
        self.signals_update_timer.start(5000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = self.create_control_panel()
        main_layout.addWidget(control_panel)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ "–¢–æ—Ä–≥–æ–≤–ª—è"
        trading_tab = self.create_trading_tab()
        self.tab_widget.addTab(trading_tab, "üìä –¢–æ—Ä–≥–æ–≤–ª—è")
        
        # –í–∫–ª–∞–¥–∫–∞ "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"
        history_tab = self.create_history_tab()
        self.tab_widget.addTab(history_tab, "üìà –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
        
        # –í–∫–ª–∞–¥–∫–∞ "Telegram"
        telegram_tab = self.create_telegram_tab()
        self.tab_widget.addTab(telegram_tab, "üì± Telegram")
        
        main_layout.addWidget(self.tab_widget)
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def create_trading_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å –∏ —Å–∏–≥–Ω–∞–ª—ã
        left_panel = self.create_left_panel()
        splitter.addWidget(left_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ª–æ–≥–∏
        right_panel = self.create_right_panel()
        splitter.addWidget(right_panel)
        
        splitter.setSizes([600, 600])
        layout.addWidget(splitter)
        
        return widget
    
    def create_history_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üìà –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        title_label.setFont(QFont("Arial", 14, QFont.Bold))
        title_label.setStyleSheet("color: #2c3e50; margin: 10px;")
        layout.addWidget(title_label)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        self.history_table = QTableWidget()
        self.history_table.setColumnCount(7)
        self.history_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–°–∏–º–≤–æ–ª", "–û–ø–µ—Ä–∞—Ü–∏—è", "–û–±—ä–µ–º", "–¶–µ–Ω–∞", "–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫", "–°—Ç–∞—Ç—É—Å"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.history_table.horizontalHeader()
        header.setStretchLastSection(True)
        header.resizeSection(0, 150)  # –í—Ä–µ–º—è
        header.resizeSection(1, 100)  # –°–∏–º–≤–æ–ª
        header.resizeSection(2, 80)   # –û–ø–µ—Ä–∞—Ü–∏—è
        header.resizeSection(3, 100)  # –û–±—ä–µ–º
        header.resizeSection(4, 100)  # –¶–µ–Ω–∞
        header.resizeSection(5, 120)  # –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫
        
        self.history_table.setAlternatingRowColors(True)
        self.history_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #bdc3c7;
                background-color: white;
                alternate-background-color: #f8f9fa;
                color: #2c3e50;
            }
            QTableWidget::item {
                padding: 8px;
                color: #2c3e50;
            }
            QHeaderView::section {
                background-color: #34495e;
                color: white;
                padding: 8px;
                font-weight: bold;
            }
        """)
        
        layout.addWidget(self.history_table)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–Ω–∏–∑—É
        stats_panel = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        stats_layout = QHBoxLayout(stats_panel)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
        self.history_total_trades = QLabel("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: 0")
        self.history_successful_trades = QLabel("–£—Å–ø–µ—à–Ω—ã—Ö: 0")
        self.history_total_profit = QLabel("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: $0.00")
        self.history_win_rate = QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: 0%")
        
        for label in [self.history_total_trades, self.history_successful_trades, 
                     self.history_total_profit, self.history_win_rate]:
            label.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                    font-weight: bold;
                    padding: 5px;
                    margin: 5px;
                    border: 1px solid #bdc3c7;
                    border-radius: 3px;
                    background-color: #ecf0f1;
                }
            """)
            stats_layout.addWidget(label)
        
        layout.addWidget(stats_panel)
        
        return widget
    
    def create_control_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        panel = QGroupBox("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π")
        layout = QHBoxLayout(panel)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.start_button = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é")
        self.start_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                font-size: 14px;
                font-weight: bold;
                padding: 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
            }
        """)
        self.start_button.clicked.connect(self.start_trading)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.stop_button = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
        self.stop_button.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                font-size: 14px;
                font-weight: bold;
                padding: 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
            }
        """)
        self.stop_button.clicked.connect(self.stop_trading)
        self.stop_button.setEnabled(False)
        
        # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trading_status_label = QLabel("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.trading_status_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                padding: 10px;
                border: 2px solid #e74c3c;
                border-radius: 5px;
                background-color: #fadbd8;
            }
        """)
        
        layout.addWidget(self.start_button)
        layout.addWidget(self.stop_button)
        layout.addStretch()
        layout.addWidget(self.trading_status_label)
        
        return panel
    
    def create_left_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_panel = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        stats_layout = QGridLayout(stats_panel)
        
        self.total_trades_label = QLabel("0")
        self.successful_trades_label = QLabel("0")
        self.total_profit_label = QLabel("$0.00")
        
        stats_layout.addWidget(QLabel("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:"), 0, 0)
        stats_layout.addWidget(self.total_trades_label, 0, 1)
        stats_layout.addWidget(QLabel("–£—Å–ø–µ—à–Ω—ã—Ö:"), 1, 0)
        stats_layout.addWidget(self.successful_trades_label, 1, 1)
        stats_layout.addWidget(QLabel("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:"), 2, 0)
        stats_layout.addWidget(self.total_profit_label, 2, 1)
        
        layout.addWidget(stats_panel)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_panel = QGroupBox("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        signals_layout = QVBoxLayout(signals_panel)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        clear_signals_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã")
        clear_signals_btn.setStyleSheet("""
            QPushButton {
                background-color: #ff4444;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #ff6666;
            }
            QPushButton:pressed {
                background-color: #cc3333;
            }
        """)
        clear_signals_btn.clicked.connect(self.clear_all_signals)
        signals_layout.addWidget(clear_signals_btn)
        
        self.signals_table = QTableWidget()
        self.signals_table.setColumnCount(5)
        self.signals_table.setHorizontalHeaderLabels([
            "–°–∏–º–≤–æ–ª", "–°–∏–≥–Ω–∞–ª", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–¶–µ–Ω–∞", "–ü—Ä–∏—á–∏–Ω–∞"
        ])
        self.signals_table.horizontalHeader().setStretchLastSection(True)
        
        signals_layout.addWidget(self.signals_table)
        layout.addWidget(signals_panel)
        
        return widget
    
    def create_right_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤
        logs_panel = QGroupBox("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏")
        logs_layout = QVBoxLayout(logs_panel)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setFont(QFont("Consolas", 9))
        self.log_text.setStyleSheet("""
            QTextEdit {
                background-color: #2c3e50;
                color: #ecf0f1;
                border: 1px solid #34495e;
            }
        """)
        
        logs_layout.addWidget(self.log_text)
        layout.addWidget(logs_panel)
        
        return widget
    
    def connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –°–∏–≥–Ω–∞–ª—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        self.data_collector.data_updated.connect(self.on_data_updated)
        self.data_collector.log_message.connect(self.add_log)
        
        # –°–∏–≥–Ω–∞–ª—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        if self.trading_engine:
            self.trading_engine.trade_executed.connect(self.on_trade_executed)
            self.trading_engine.log_message.connect(self.add_log)
            self.trading_engine.status_changed.connect(self.on_trading_status_changed)
    
    def start_trading(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self.bybit_client:
            self.add_log("‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        self.trading_active = True
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        
        # –í–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –≤ –¥–≤–∏–∂–∫–µ
        if self.trading_engine:
            self.trading_engine.trading_enabled = True
            self.add_log("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞ –≤ –¥–≤–∏–∂–∫–µ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
            if self.trading_engine.telegram_notifier:
                self.trading_engine.telegram_notifier.notify_trading_status(True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        if not self.data_collector.isRunning():
            self.data_collector.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        if self.trading_engine and not self.trading_engine.isRunning():
            self.trading_engine.start()
        
        self.add_log("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞")
        self.update_trading_status("üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞")
    
    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.trading_active = False
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        
        # –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –≤ –¥–≤–∏–∂–∫–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã
        if self.trading_engine:
            # self.trading_engine.trading_enabled = False  # –£–ë–†–ê–ù–û: –Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ç–æ–∫–∞
            self.add_log("‚èπÔ∏è –ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
            if self.trading_engine.telegram_notifier:
                self.trading_engine.telegram_notifier.notify_trading_status(False)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
        if self.data_collector.isRunning():
            self.data_collector.stop()
            self.data_collector.wait(3000)
        
        if self.trading_engine and self.trading_engine.isRunning():
            self.trading_engine.stop()
            self.trading_engine.wait(3000)
        
        self.add_log("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.update_trading_status("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def on_data_updated(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self.current_data = data
        
        if self.trading_active and self.trading_engine:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            banned_symbols = getattr(self.trading_engine, 'banned_symbols', [])
            signal_generator = SignalGenerator(self.logger, banned_symbols)
            portfolio = getattr(self.trading_engine, 'portfolio', {})
            signals = signal_generator.generate_signals(data, portfolio)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–æ–≤—ã–º–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
            self.update_signals_table(signals)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            if signals:
                self.trading_engine.add_signals(signals)
        
        # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        self.update_active_signals_table()
    
    def update_signals_table(self, signals: List[TradingSignal]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.signals_table.setRowCount(len(signals))
        
        for i, signal in enumerate(signals):
            self.signals_table.setItem(i, 0, QTableWidgetItem(signal.symbol))
            self.signals_table.setItem(i, 1, QTableWidgetItem(signal.signal))
            self.signals_table.setItem(i, 2, QTableWidgetItem(f"{signal.confidence:.2f}"))
            self.signals_table.setItem(i, 3, QTableWidgetItem(f"${signal.price:.6f}"))
            self.signals_table.setItem(i, 4, QTableWidgetItem(signal.reason))
    
    def update_active_signals_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        if not self.trading_engine:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        active_signals = getattr(self.trading_engine, 'signals_queue', [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è)
        pending_signals = [signal for signal in active_signals 
                          if signal.status not in ["EXECUTED", "FAILED"]]
        
        self.signals_table.setRowCount(len(pending_signals))
        
        for i, signal in enumerate(pending_signals):
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∏ –ø–æ–ø—ã—Ç–∫–∞—Ö
            status_info = f"{signal.status}"
            if hasattr(signal, 'execution_attempts') and signal.execution_attempts > 0:
                status_info += f" ({signal.execution_attempts} –ø–æ–ø—ã—Ç–æ–∫)"
            
            self.signals_table.setItem(i, 0, QTableWidgetItem(signal.symbol))
            self.signals_table.setItem(i, 1, QTableWidgetItem(signal.signal))
            self.signals_table.setItem(i, 2, QTableWidgetItem(f"{signal.confidence:.2f}"))
            self.signals_table.setItem(i, 3, QTableWidgetItem(f"${signal.price:.6f}"))
            self.signals_table.setItem(i, 4, QTableWidgetItem(f"{signal.reason} | {status_info}"))
    
    def on_trade_executed(self, trade_info: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        self.trade_history.append(trade_info)
        self.update_statistics()
        self.add_trade_to_history_table(trade_info)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É
        symbol = trade_info['symbol']
        side = trade_info['side']
        amount = trade_info.get('amount', 0)
        price = trade_info['price']
        
        if side == 'BUY':
            self.add_log(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ {symbol}: ${amount:.2f} –ø–æ —Ü–µ–Ω–µ ${price:.6f}")
        else:
            estimated_usdt = trade_info.get('estimated_usdt', 0)
            self.add_log(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ {symbol}: {amount:.6f} ‚âà ${estimated_usdt:.2f}")
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_trades = len(self.trade_history)
        self.total_trades_label.setText(str(total_trades))
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (—Å–¥–µ–ª–∫–∏ —Å order_id —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º–∏)
        successful_trades = sum(1 for trade in self.trade_history if trade.get('order_id'))
        self.successful_trades_label.setText(str(successful_trades))
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂
        total_profit = self.calculate_total_profit()
        self.total_profit_label.setText(f"${total_profit:.2f}")
    
    def calculate_total_profit(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        profit = 0.0
        symbol_positions = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        
        for trade in self.trade_history:
            if not trade.get('order_id'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                continue
                
            symbol = trade['symbol']
            side = trade['side']
            
            if symbol not in symbol_positions:
                symbol_positions[symbol] = {'qty': 0, 'total_cost': 0, 'total_sold': 0}
            
            if side == 'BUY':
                # –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                qty = trade['qty']
                cost = trade['amount']  # amount –≤ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                symbol_positions[symbol]['qty'] += qty
                symbol_positions[symbol]['total_cost'] += cost
                
            elif side == 'SELL':
                # –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                qty_sold = trade['amount']  # amount –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                usdt_received = trade.get('estimated_usdt', 0)
                
                if symbol_positions[symbol]['qty'] > 0:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
                    avg_buy_price = symbol_positions[symbol]['total_cost'] / symbol_positions[symbol]['qty']
                    cost_of_sold = qty_sold * avg_buy_price
                    
                    # –ü—Ä–∏–±—ã–ª—å = –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ USDT - —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
                    trade_profit = usdt_received - cost_of_sold
                    profit += trade_profit
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                    symbol_positions[symbol]['qty'] -= qty_sold
                    symbol_positions[symbol]['total_cost'] -= cost_of_sold
                    symbol_positions[symbol]['total_sold'] += usdt_received
        
        return profit
    
    def on_trading_status_changed(self, status: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.update_trading_status(status)
    
    def update_trading_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.trading_status_label.setText(status)
        self.status_bar.showMessage(status)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if "–∞–∫—Ç–∏–≤–Ω–∞" in status:
            self.trading_status_label.setStyleSheet("""
                QLabel {
                    font-size: 16px;
                    font-weight: bold;
                    padding: 10px;
                    border: 2px solid #27ae60;
                    border-radius: 5px;
                    background-color: #d5f4e6;
                    color: #27ae60;
                }
            """)
        else:
            self.trading_status_label.setStyleSheet("""
                QLabel {
                    font-size: 16px;
                    font-weight: bold;
                    padding: 10px;
                    border: 2px solid #e74c3c;
                    border-radius: 5px;
                    background-color: #fadbd8;
                    color: #e74c3c;
                }
            """)
    
    def add_log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        self.log_text.append(formatted_message)
        self.logger.info(message)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É
        cursor = self.log_text.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        self.log_text.setTextCursor(cursor)
    
    def add_trade_to_history_table(self, trade_info: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            row_count = self.history_table.rowCount()
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100)
            if row_count >= 100:
                self.history_table.removeRow(0)  # –£–¥–∞–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
                row_count = self.history_table.rowCount()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            self.history_table.insertRow(row_count)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            timestamp = trade_info.get('timestamp', datetime.now().strftime("%H:%M:%S"))
            symbol = trade_info.get('symbol', 'N/A')
            side = trade_info.get('side', 'N/A')
            amount = trade_info.get('amount', 0)
            price = trade_info.get('price', 0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            pnl = 0.0
            if side == 'SELL':
                estimated_usdt = trade_info.get('estimated_usdt', 0)
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT
                pnl = estimated_usdt
            elif side == 'BUY':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å
                pnl = -amount
            
            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã
            time_item = QTableWidgetItem(str(timestamp))
            symbol_item = QTableWidgetItem(symbol)
            side_item = QTableWidgetItem(side)
            amount_item = QTableWidgetItem(f"{amount:.6f}")
            price_item = QTableWidgetItem(f"${price:.6f}")
            pnl_item = QTableWidgetItem(f"${pnl:.2f}")
            
            # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã —Å–¥–µ–ª–∫–∏
            if side == 'BUY':
                side_item.setBackground(QColor(46, 204, 113, 50))  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                side_item.setForeground(QColor(39, 174, 96))
            elif side == 'SELL':
                side_item.setBackground(QColor(231, 76, 60, 50))   # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                side_item.setForeground(QColor(192, 57, 43))
            
            # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è P&L
            if pnl > 0:
                pnl_item.setForeground(QColor(39, 174, 96))  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø—Ä–∏–±—ã–ª–∏
            elif pnl < 0:
                pnl_item.setForeground(QColor(192, 57, 43))  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —É–±—ã—Ç–∫–∞
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
            self.history_table.setItem(row_count, 0, time_item)
            self.history_table.setItem(row_count, 1, symbol_item)
            self.history_table.setItem(row_count, 2, side_item)
            self.history_table.setItem(row_count, 3, amount_item)
            self.history_table.setItem(row_count, 4, price_item)
            self.history_table.setItem(row_count, 5, pnl_item)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
            self.history_table.scrollToBottom()
            
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
    
    def create_telegram_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        title.setStyleSheet("font-size: 16px; font-weight: bold; color: #2c3e50; margin: 10px;")
        layout.addWidget(title)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_group = QGroupBox("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞")
        settings_layout = QVBoxLayout(settings_group)
        
        # Bot Token
        token_layout = QHBoxLayout()
        token_layout.addWidget(QLabel("Bot Token:"))
        self.telegram_token_input = QLineEdit()
        self.telegram_token_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
        self.telegram_token_input.setEchoMode(QLineEdit.Password)
        token_layout.addWidget(self.telegram_token_input)
        settings_layout.addLayout(token_layout)
        
        # Chat ID
        chat_layout = QHBoxLayout()
        chat_layout.addWidget(QLabel("Chat ID:"))
        self.telegram_chat_input = QLineEdit()
        self.telegram_chat_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ Chat ID")
        chat_layout.addWidget(self.telegram_chat_input)
        settings_layout.addLayout(chat_layout)
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.telegram_enabled_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        settings_layout.addWidget(self.telegram_enabled_checkbox)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        test_button = QPushButton("üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        test_button.clicked.connect(self.test_telegram_notification)
        buttons_layout.addWidget(test_button)
        
        save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        save_button.clicked.connect(self.save_telegram_settings)
        buttons_layout.addWidget(save_button)
        
        settings_layout.addLayout(buttons_layout)
        layout.addWidget(settings_group)
        
        # –ì—Ä—É–ø–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        stats_layout = QVBoxLayout(stats_group)
        
        self.telegram_stats_label = QLabel("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 0\n–û—à–∏–±–æ–∫: 0")
        stats_layout.addWidget(self.telegram_stats_label)
        
        layout.addWidget(stats_group)
        
        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        layout.addStretch()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_telegram_settings()
        
        return widget
    
    def test_telegram_notification(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.add_log("üîç DEBUG: –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∞!")
        try:
            self.add_log(f"üîç DEBUG: telegram_notifier = {self.telegram_notifier}")
            if not self.telegram_notifier:
                self.add_log("‚ùå Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
            
            self.add_log("üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º send_test_message()")
            self.telegram_notifier.send_test_message()
            self.add_log("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            import traceback
            self.add_log(f"üîç DEBUG: –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
    
    def save_telegram_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram"""
        try:
            settings = {
                'token': self.telegram_token_input.text(),
                'chat_id': self.telegram_chat_input.text(),
                'enabled': self.telegram_enabled_checkbox.isChecked()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            import json
            with open('telegram_settings.json', 'w') as f:
                json.dump(settings, f)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
            if settings['enabled'] and settings['token'] and settings['chat_id']:
                self.init_telegram_notifier(settings['token'], settings['chat_id'])
            
            self.add_log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram: {e}")
    
    def load_telegram_settings_early(self):
        """–†–∞–Ω–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        try:
            import json
            with open('telegram_settings.json', 'r') as f:
                settings = json.load(f)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if settings.get('enabled') and settings.get('token') and settings.get('chat_id'):
                self.telegram_settings = settings
                self.add_log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            else:
                self.telegram_settings = None
                
        except FileNotFoundError:
            # –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            self.telegram_settings = None
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–Ω–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram: {e}")
            self.telegram_settings = None
    
    def load_telegram_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram"""
        try:
            import json
            with open('telegram_settings.json', 'r') as f:
                settings = json.load(f)
            
            self.telegram_token_input.setText(settings.get('token', ''))
            self.telegram_chat_input.setText(settings.get('chat_id', ''))
            self.telegram_enabled_checkbox.setChecked(settings.get('enabled', False))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
            if settings.get('enabled') and settings.get('token') and settings.get('chat_id'):
                self.init_telegram_notifier(settings['token'], settings['chat_id'])
                
        except FileNotFoundError:
            # –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            pass
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram: {e}")
    
    def init_telegram_notifier(self, token: str, chat_id: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            from telegram_notifier import TelegramNotifier
            self.telegram_notifier = TelegramNotifier(token, chat_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ telegram_notifier –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –¥–≤–∏–∂–∫–µ
            if self.trading_engine:
                self.trading_engine.telegram_notifier = self.telegram_notifier
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π
                if hasattr(self.telegram_notifier, 'set_callback'):
                    self.telegram_notifier.set_callback('get_balance', self.trading_engine.get_balance_for_telegram)
                    self.telegram_notifier.set_callback('stop_trading', self.trading_engine.stop_trading_for_telegram)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤
            if hasattr(self.telegram_notifier, 'start_polling'):
                self.telegram_notifier.start_polling()
                self.add_log("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ polling –∑–∞–ø—É—â–µ–Ω")
            else:
                self.add_log("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            self.telegram_notifier = None
    
    def auto_start_trading(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            if self.enable_trading_on_start:
                self.add_log("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
                self.start_trading()
            else:
                self.add_log("‚ÑπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é' –∏–ª–∏ —Ñ–ª–∞–≥ --enable-trading")
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
    
    def clear_all_signals(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            if self.trading_engine:
                self.trading_engine.clear_signals_queue()
                self.update_active_signals_table()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                self.add_log("üóëÔ∏è –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—á–∏—â–µ–Ω—ã")
            else:
                self.add_log("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.trading_active:
            self.stop_trading()
        
        event.accept()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≥—Ä–∞–º–º–∞-—Ç–æ—Ä–≥–æ–≤–µ—Ü')
    parser.add_argument('--enable-trading', action='store_true', 
                       help='–í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ')
    args = parser.parse_args()
    
    if not GUI_AVAILABLE:
        print("‚ùå GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    app = QApplication(sys.argv)
    app.setApplicationName("–ü—Ä–æ–≥—Ä–∞–º–º–∞-—Ç–æ—Ä–≥–æ–≤–µ—Ü")
    app.setApplicationVersion("1.0")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = TraderMainWindow(enable_trading=args.enable_trading)
    window.show()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    sys.exit(app.exec())


if __name__ == "__main__":
    main()