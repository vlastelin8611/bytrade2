#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞-—Ç–æ—Ä–≥–æ–≤–µ—Ü –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —Ç–∏–∫–µ—Ä–æ–≤ –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
"""

import sys
import os
import json
import pickle
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG —É—Ä–æ–≤–µ–Ω—å
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('trader_program.log', encoding='utf-8')
    ]
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(os.path.join(os.path.dirname(__file__), 'src')))

# GUI –∏–º–ø–æ—Ä—Ç—ã
try:
    from PySide6.QtWidgets import (
        QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, 
        QPushButton, QLabel, QTextEdit, QGroupBox, QGridLayout,
        QProgressBar, QStatusBar, QFrame, QSplitter, QTableWidget,
        QTableWidgetItem, QHeaderView, QSpacerItem, QSizePolicy
    )
    from PySide6.QtCore import QTimer, QThread, Signal, Qt, QMutex
    from PySide6.QtGui import QFont, QColor, QPalette
    GUI_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GUI: {e}")
    GUI_AVAILABLE = False
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç API –∫–ª–∏–µ–Ω—Ç–∞
try:
    from api.bybit_client import BybitClient
    from config import get_api_credentials
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API: {e}")
    sys.exit(1)


class TradingSignal:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    def __init__(self, symbol: str, signal: str, confidence: float, price: float, reason: str = ""):
        self.symbol = symbol
        self.signal = signal  # 'BUY' –∏–ª–∏ 'SELL'
        self.confidence = confidence
        self.price = price
        self.reason = reason
        self.timestamp = datetime.now()


class DataCollector(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∏–∫–µ—Ä–æ–≤ –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    data_updated = Signal(dict)
    log_message = Signal(str)
    
    def __init__(self):
        super().__init__()
        self.running = False
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TickerDataLoader –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
        from src.tools.ticker_data_loader import TickerDataLoader
        ticker_loader = TickerDataLoader()
        self.ticker_data_path = ticker_loader.get_data_file_path()
        self.models_path = Path("C:/Users/vlastelin8/Desktop/trade/crypto/src/strategies/models")
        self.mutex = QMutex()
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.running = True
        self.log_message.emit("üîÑ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        while self.running:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
                ticker_data = self.load_ticker_data()
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                ml_data = self.load_ml_data()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                combined_data = {
                    'ticker_data': ticker_data,
                    'ml_data': ml_data,
                    'timestamp': datetime.now().isoformat()
                }
                
                self.data_updated.emit(combined_data)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                time.sleep(5)
                
            except Exception as e:
                self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                time.sleep(10)
    
    def load_ticker_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ TickerDataLoader –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
            from src.tools.ticker_data_loader import TickerDataLoader
            ticker_loader = TickerDataLoader()
            ticker_data = ticker_loader.load_tickers_data()
            
            if ticker_data and 'tickers' in ticker_data:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
                tickers = ticker_data['tickers']
                self.log_message.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {ticker_data['update_time']}")
                return tickers
            else:
                self.log_message.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API")
                return {}
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API: {e}")
            return {}
    
    def load_ml_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            ml_data = {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
            performance_file = self.models_path / "adaptive_ml_performance.json"
            if performance_file.exists():
                try:
                    with open(performance_file, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                        if content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                            ml_data['performance'] = json.loads(content)
                        else:
                            self.log_message.emit(f"‚ö†Ô∏è –§–∞–π–ª {performance_file.name} –ø—É—Å—Ç–æ–π")
                except json.JSONDecodeError as e:
                    self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON –≤ {performance_file.name}: {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
            training_file = self.models_path / "adaptive_ml_training_state.json"
            if training_file.exists():
                try:
                    with open(training_file, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                        if content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                            ml_data['training_state'] = json.loads(content)
                        else:
                            self.log_message.emit(f"‚ö†Ô∏è –§–∞–π–ª {training_file.name} –ø—É—Å—Ç–æ–π")
                except json.JSONDecodeError as e:
                    self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON –≤ {training_file.name}: {e}")
            
            return ml_data
            
        except Exception as e:
            self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ML: {e}")
            return {}
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.running = False


class SignalGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, logger):
        self.logger = logger
        self.min_confidence = 0.3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (—Å–Ω–∏–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        
    def generate_signals(self, data: Dict, portfolio: Dict) -> List[TradingSignal]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        signals = []
        
        try:
            ticker_data = data.get('ticker_data', {})
            ml_data = data.get('ml_data', {})
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            self.logger.info(f"üîç –¢–∏–ø ticker_data: {type(ticker_data)}")
            if isinstance(ticker_data, dict):
                self.logger.info(f"üîç –ö–ª—é—á–∏ ticker_data: {list(ticker_data.keys())[:5]}")  # –ü–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–π
            elif isinstance(ticker_data, list):
                self.logger.info(f"üîç ticker_data - —Å–ø–∏—Å–æ–∫ –∏–∑ {len(ticker_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                if ticker_data:
                    self.logger.info(f"üîç –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(ticker_data[0])}")
            
            self.logger.info(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: ticker_data={len(ticker_data)} —Å–∏–º–≤–æ–ª–æ–≤, ml_data={len(ml_data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ USDT –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            usdt_pairs = self.get_usdt_pairs(ticker_data)
            self.logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(usdt_pairs)} USDT –ø–∞—Ä")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É
            analyzed_count = 0
            for symbol in usdt_pairs[:200]:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                try:
                    signal = self.analyze_symbol(symbol, ticker_data, ml_data, portfolio)
                    analyzed_count += 1
                    if signal and signal.confidence >= self.min_confidence:
                        signals.append(signal)
                        self.logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {signal.signal} –¥–ª—è {signal.symbol}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {signal.confidence:.2f}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            
            self.logger.info(f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count} —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–∞–∏–º–µ–Ω–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            signals.sort(key=lambda x: x.confidence, reverse=True)
            
            return signals[:30]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-30 —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def get_usdt_pairs(self, ticker_data) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ USDT —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –∞–∫—Ç–∏–≤–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã"""
        pairs = []
        
        # –ï—Å–ª–∏ ticker_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (–∫–∞–∫ –∏–∑ TickerDataLoader)
        if isinstance(ticker_data, list):
            for ticker in ticker_data:
                if isinstance(ticker, dict) and 'symbol' in ticker:
                    symbol = ticker['symbol']
                    if symbol.endswith('USDT') and symbol != 'USDT':
                        pairs.append(symbol)
        # –ï—Å–ª–∏ ticker_data - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        elif isinstance(ticker_data, dict):
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ USDT –ø–∞—Ä—ã –∏–∑ —Ç–∏–∫–µ—Ä–æ–≤
            tickers = ticker_data.get('tickers', ticker_data)
            for symbol, ticker_info in tickers.items():
                if symbol.endswith('USDT') and symbol != 'USDT':
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ USDT —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                    pairs.append(symbol)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
        if not pairs:
            pairs = [
                'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT',
                'XRPUSDT', 'DOTUSDT', 'DOGEUSDT', 'AVAXUSDT', 'LINKUSDT',
                'MATICUSDT', 'LTCUSDT', 'UNIUSDT', 'ATOMUSDT', 'FILUSDT'
            ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è testnet
        invalid_symbols = {'SHIB1000USDT', 'BANDUSDT', 'WIFUSDT', 'HBARUSDT'}
        pairs = [pair for pair in pairs if pair not in invalid_symbols]
        
        self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return pairs
    
    def analyze_symbol(self, symbol: str, ticker_data, ml_data: Dict, portfolio: Dict) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É
            symbol_ticker = {}
            
            # –ï—Å–ª–∏ ticker_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            if isinstance(ticker_data, list):
                for ticker in ticker_data:
                    if isinstance(ticker, dict) and ticker.get('symbol') == symbol:
                        symbol_ticker = ticker
                        break
            # –ï—Å–ª–∏ ticker_data - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            elif isinstance(ticker_data, dict):
                symbol_ticker = ticker_data.get(symbol, {})
            if not symbol_ticker:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = float(symbol_ticker.get('lastPrice', 0))
            if current_price <= 0:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç Bybit API)
            price_change_24h = float(symbol_ticker.get('price24hPcnt', 0))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ML –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            ml_performance = ml_data.get('performance', {}).get(symbol, {})
            ml_training = ml_data.get('training_state', {}).get(symbol, {})
            
            # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_type = None
            confidence = 0.0
            reason = ""
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            ml_accuracy = ml_performance.get('accuracy', 0) if isinstance(ml_performance, dict) else 0
            self.logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol}: —Ü–µ–Ω–∞=${current_price:.6f}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ 24—á={price_change_24h:.2%}, ML —Ç–æ—á–Ω–æ—Å—Ç—å={ml_accuracy:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML –¥–∞–Ω–Ω—ã–µ
            if ml_accuracy > 0.5:  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —Å 0.7 –¥–æ 0.5
                self.logger.debug(f"ü§ñ ML –º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è {symbol}, —Ç–æ—á–Ω–æ—Å—Ç—å: {ml_accuracy:.2f}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ML –ª–æ–≥–∏–∫—É —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
                if price_change_24h > 0.002:  # –†–æ—Å—Ç –±–æ–ª–µ–µ 0.2% (–±—ã–ª–æ 0.5%)
                    signal_type = 'BUY'
                    confidence = min(0.8, ml_accuracy * 0.9)
                    reason = f"ML –º–æ–¥–µ–ª—å (—Ç–æ—á–Ω–æ—Å—Ç—å: {ml_accuracy:.2f}), —Ä–æ—Å—Ç 24—á: {price_change_24h:.2%}"
                    self.logger.debug(f"üü¢ ML BUY —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} > 0.002")
                elif price_change_24h < -0.002:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ 0.2% (–±—ã–ª–æ 0.5%)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                    base_asset = symbol.replace('USDT', '')
                    if base_asset in portfolio and float(portfolio[base_asset]) > 0:
                        signal_type = 'SELL'
                        confidence = min(0.8, ml_accuracy * 0.9)
                        reason = f"ML –º–æ–¥–µ–ª—å (—Ç–æ—á–Ω–æ—Å—Ç—å: {ml_accuracy:.2f}), –ø–∞–¥–µ–Ω–∏–µ 24—á: {price_change_24h:.2%}"
                        self.logger.debug(f"üî¥ ML SELL —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} < -0.002")
                    else:
                        self.logger.debug(f"‚ö†Ô∏è ML SELL —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è {symbol}, –Ω–æ –∞–∫—Ç–∏–≤ {base_asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
                else:
                    self.logger.debug(f"‚ö™ ML —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-0.002, 0.002]")
            else:
                self.logger.debug(f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è {symbol}, ML —Ç–æ—á–Ω–æ—Å—Ç—å: {ml_accuracy:.2f} < 0.5")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
                if price_change_24h > 0.001:  # –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç 0.1% (–±—ã–ª–æ 0.5%)
                    signal_type = 'BUY'
                    confidence = min(0.7, abs(price_change_24h) * 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
                    reason = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, —Ä–æ—Å—Ç: {price_change_24h:.2%}"
                    self.logger.debug(f"üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π BUY —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} > 0.001")
                elif price_change_24h < -0.001:  # –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ 0.1% (–±—ã–ª–æ 0.5%)
                    base_asset = symbol.replace('USDT', '')
                    if base_asset in portfolio and float(portfolio[base_asset]) > 0:
                        signal_type = 'SELL'
                        confidence = min(0.7, abs(price_change_24h) * 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
                        reason = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –ø–∞–¥–µ–Ω–∏–µ: {price_change_24h:.2%}"
                        self.logger.debug(f"üî¥ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π SELL —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} < -0.001")
                    else:
                        self.logger.debug(f"‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π SELL —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è {symbol}, –Ω–æ –∞–∫—Ç–∏–≤ {base_asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
                else:
                    self.logger.debug(f"‚ö™ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_24h:.4f} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-0.001, 0.001]")
            
            if signal_type and confidence >= self.min_confidence:
                self.logger.info(f"üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal_type} –¥–ª—è {symbol}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f}")
                return TradingSignal(symbol, signal_type, confidence, current_price, reason)
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            return None


class TradingEngine(QThread):
    """–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫"""
    trade_executed = Signal(dict)
    log_message = Signal(str)
    status_changed = Signal(str)
    
    def __init__(self, bybit_client, trading_enabled=False):
        super().__init__()
        self.bybit_client = bybit_client
        self.running = False
        self.trading_enabled = trading_enabled  # –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.signals_queue = []
        self.portfolio = {}
        self.logger = logging.getLogger(__name__)
        self.signal_generator = SignalGenerator(self.logger)
        self.mutex = QMutex()
        self.last_buy_times = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫
        self.buy_cooldown = 300  # –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ (5 –º–∏–Ω—É—Ç)
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        self.running = True
        self.status_changed.emit("üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞")
        self.log_message.emit("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_generator = SignalGenerator(self.logger)
        
        while self.running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                self.update_portfolio()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    ticker_data = self.load_ticker_data()
                    ml_data = self.load_ml_data()
                    
                    if ticker_data:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
                        new_signals = signal_generator.generate_signals(
                            {'ticker_data': ticker_data, 'ml_data': ml_data}, 
                            self.portfolio
                        )
                        
                        if new_signals:
                            self.add_signals(new_signals)
                            self.log_message.emit(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(new_signals)} –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
                except Exception as e:
                    self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                if self.signals_queue:
                    signal = self.signals_queue.pop(0)
                    self.process_signal(signal)
                
                time.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                
            except Exception as e:
                self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)
        
        self.status_changed.emit("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def load_ticker_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TickerDataLoader –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
            from src.tools.ticker_data_loader import TickerDataLoader
            ticker_loader = TickerDataLoader()
            ticker_data = ticker_loader.load_tickers_data()
            
            if ticker_data and 'tickers' in ticker_data:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤
                tickers = ticker_data['tickers']
                self.log_message.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {ticker_data['update_time']}")
                return tickers
            else:
                self.log_message.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API")
                return {}
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API: {e}")
            return {}
    
    def load_ml_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ ML –¥–∞–Ω–Ω—ã—Ö"""
        try:
            models_path = Path("src/strategies/models")
            ml_data = {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ML
            perf_file = models_path / "adaptive_ml_performance.json"
            if perf_file.exists():
                with open(perf_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        ml_data['performance'] = json.loads(content)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è ML
            state_file = models_path / "adaptive_ml_training_state.json"
            if state_file.exists():
                with open(state_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        ml_data['training_state'] = json.loads(content)
            
            return ml_data
        except Exception as e:
            self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ML –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}
    
    def get_instrument_info(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —á–µ—Ä–µ–∑ API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API endpoint /v5/market/instruments-info
            response = self.bybit_client.get_instruments_info(
                category='spot',
                symbol=symbol
            )
            
            self.log_message.emit(f"üîç API –æ—Ç–≤–µ—Ç –¥–ª—è {symbol}: {response}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if response and isinstance(response, list) and len(response) > 0:
                instrument = response[0]
                
                self.log_message.emit(f"üîç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {symbol}: {instrument} (—Ç–∏–ø: {type(instrument)})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ instrument - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                if isinstance(instrument, dict):
                    lot_size_filter = instrument.get('lotSizeFilter', {})
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    min_order_qty = float(lot_size_filter.get('minOrderQty', 0))
                    min_order_amt = float(lot_size_filter.get('minOrderAmt', 5))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 USDT
                    
                    self.log_message.emit(f"üìä {symbol}: minOrderQty={min_order_qty}, minOrderAmt={min_order_amt}")
                    
                    return {
                        'symbol': symbol,
                        'minOrderQty': min_order_qty,
                        'minOrderAmt': min_order_amt,
                        'basePrecision': lot_size_filter.get('basePrecision', '0.00001'),
                        'quotePrecision': lot_size_filter.get('quotePrecision', '0.0000001')
                    }
                else:
                    self.log_message.emit(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {symbol}: {type(instrument)}")
            else:
                # –í–æ–∑–º–æ–∂–Ω–æ, response –∏–º–µ–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API
                if response and isinstance(response, dict) and response.get('retCode') == 0:
                    result = response.get('result', {})
                    instruments_list = result.get('list', [])
                    
                    self.log_message.emit(f"üîç –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {symbol}: {instruments_list}")
                    
                    if instruments_list and len(instruments_list) > 0:
                        instrument = instruments_list[0]
                        
                        self.log_message.emit(f"üîç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {symbol}: {instrument} (—Ç–∏–ø: {type(instrument)})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ instrument - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                        if isinstance(instrument, dict):
                            lot_size_filter = instrument.get('lotSizeFilter', {})
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            min_order_qty = float(lot_size_filter.get('minOrderQty', 0))
                            min_order_amt = float(lot_size_filter.get('minOrderAmt', 5))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 USDT
                            
                            self.log_message.emit(f"üìä {symbol}: minOrderQty={min_order_qty}, minOrderAmt={min_order_amt}")
                            
                            return {
                                'symbol': symbol,
                                'minOrderQty': min_order_qty,
                                'minOrderAmt': min_order_amt,
                                'basePrecision': lot_size_filter.get('basePrecision', '0.00001'),
                                'quotePrecision': lot_size_filter.get('quotePrecision', '0.0000001')
                            }
                        else:
                            self.log_message.emit(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {symbol}: {type(instrument)}")
                    else:
                        self.log_message.emit(f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
                else:
                    error_msg = response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if isinstance(response, dict) else '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞'
                    self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {symbol}: {error_msg}")
                
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {symbol}: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            'symbol': symbol,
            'minOrderQty': 0.00001,
            'minOrderAmt': 5.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 USDT –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
            'basePrecision': '0.00001',
            'quotePrecision': '0.0000001'
        }
    
    def add_signals(self, signals: List[TradingSignal]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—É–ª–¥–∞—É–Ω–∞"""
        self.mutex.lock()
        try:
            filtered_signals = []
            current_time = time.time()
            
            for signal in signals:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É
                if signal.signal == 'BUY' and signal.symbol in self.last_buy_times:
                    time_since_last_buy = current_time - self.last_buy_times[signal.symbol]
                    if time_since_last_buy < self.buy_cooldown:
                        remaining_time = self.buy_cooldown - time_since_last_buy
                        self.log_message.emit(f"‚è≥ –ö—É–ª–¥–∞—É–Ω –¥–ª—è {signal.symbol}: –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time:.0f} —Å–µ–∫ (—Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω)")
                        continue
                
                filtered_signals.append(signal)
            
            self.signals_queue.extend(filtered_signals)
            if filtered_signals:
                self.log_message.emit(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {len(filtered_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å")
            if len(filtered_signals) < len(signals):
                rejected_count = len(signals) - len(filtered_signals)
                self.log_message.emit(f"üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ {rejected_count} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑-–∑–∞ –∫—É–ª–¥–∞—É–Ω–∞")
        finally:
            self.mutex.unlock()
    
    def update_portfolio(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        max_retries = 3
        retry_delay = 2
        
        for attempt in range(max_retries):
            try:
                self.log_message.emit(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ
                balance_data = self.bybit_client.get_unified_balance_flat()
                
                if not balance_data:
                    self.log_message.emit("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if not isinstance(balance_data, dict):
                    self.log_message.emit(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞: {type(balance_data)}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö
                coins_data = balance_data.get('coins', {})
                
                self.log_message.emit(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: {coins_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if not coins_data:
                    self.log_message.emit("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
                        continue
                    return
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                temp_portfolio = {}
                
                if isinstance(coins_data, dict):
                    # –ï—Å–ª–∏ coins - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–∏ coin_name: balance
                    for coin_name, balance in coins_data.items():
                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ float
                            balance_float = float(balance) if balance else 0
                            if balance_float > 0:
                                temp_portfolio[coin_name] = balance_float
                                self.log_message.emit(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞ {coin_name}: {balance_float}")
                        except (ValueError, TypeError) as e:
                            self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–Ω–µ—Ç—ã {coin_name}: {e}")
                elif isinstance(coins_data, list):
                    # –ï—Å–ª–∏ coins - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                    for coin_info in coins_data:
                        if isinstance(coin_info, dict):
                            coin_name = coin_info.get('coin', '')
                            balance = coin_info.get('walletBalance', 0)
                            try:
                                balance_float = float(balance) if balance else 0
                                if balance_float > 0 and coin_name:
                                    temp_portfolio[coin_name] = balance_float
                                    self.log_message.emit(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞ {coin_name}: {balance_float}")
                            except (ValueError, TypeError) as e:
                                self.log_message.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–Ω–µ—Ç—ã {coin_name}: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if temp_portfolio:
                    self.portfolio = temp_portfolio
                    self.log_message.emit(f"‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                else:
                    self.log_message.emit("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                total_coins = len(self.portfolio)
                total_usdt = self.portfolio.get('USDT', 0)
                self.log_message.emit(f"‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {total_coins} –º–æ–Ω–µ—Ç, USDT: ${total_usdt:.2f}")
                return  # –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}"
                self.log_message.emit(error_msg)
                
                if attempt < max_retries - 1:
                    self.log_message.emit(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(retry_delay)
                    retry_delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                else:
                    self.log_message.emit("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
    
    def process_signal(self, signal: TradingSignal):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è
            if not self.trading_enabled:
                self.log_message.emit(f"‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –°–∏–≥–Ω–∞–ª {signal.signal} –¥–ª—è {signal.symbol} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
                return
            
            self.log_message.emit(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {signal.signal} –¥–ª—è {signal.symbol} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
            
            if signal.signal == 'BUY':
                self.execute_buy_order(signal)
            elif signal.signal == 'SELL':
                self.execute_sell_order(signal)
                
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}: {e}")
    
    def execute_buy_order(self, signal: TradingSignal):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            current_time = time.time()
            if signal.symbol in self.last_buy_times:
                time_since_last_buy = current_time - self.last_buy_times[signal.symbol]
                if time_since_last_buy < self.buy_cooldown:
                    remaining_time = self.buy_cooldown - time_since_last_buy
                    self.log_message.emit(f"‚è≥ –ö—É–ª–¥–∞—É–Ω –¥–ª—è {signal.symbol}: –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time:.0f} —Å–µ–∫")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
            usdt_balance = self.portfolio.get('USDT', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —á–µ—Ä–µ–∑ API
            instrument_info = self.get_instrument_info(signal.symbol)
            min_trade_amount = float(instrument_info['minOrderAmt'])
            
            # –í–ê–ñ–ù–û: Bybit API —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º $5 –¥–ª—è API —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Å —è–Ω–≤–∞—Ä—è 2025)
            # –ù–æ –¥–ª—è BTCUSDT minOrderAmt —É–∂–µ —Ä–∞–≤–µ–Ω 5 USDT —Å–æ–≥–ª–∞—Å–Ω–æ API –æ—Ç–≤–µ—Ç—É
            api_min_order_value = 5.0  # $5 –º–∏–Ω–∏–º—É–º –¥–ª—è API —Ç–æ—Ä–≥–æ–≤–ª–∏
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API
            if signal.symbol == 'BTCUSDT':
                # –î–ª—è BTCUSDT –∏—Å–ø–æ–ª—å–∑—É–µ–º minOrderAmt –∏–∑ API (5 USDT)
                effective_min_amount = max(min_trade_amount, api_min_order_value)
                max_trade_amount = max(effective_min_amount * 20, 100.0)  # –î–æ $100 –¥–ª—è BTCUSDT
            elif signal.symbol in ['ETHUSDT', 'BNBUSDT', 'LINKUSDT']:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ—Ä–æ–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –º–∏–Ω–∏–º—É–º
                effective_min_amount = max(min_trade_amount, api_min_order_value, 50.0)
                max_trade_amount = max(effective_min_amount * 4, 200.0)
            else:
                # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º API –º–∏–Ω–∏–º—É–º $5
                effective_min_amount = max(min_trade_amount, api_min_order_value)
                max_trade_amount = max(effective_min_amount * 10, 50.0)  # –ú–∏–Ω–∏–º—É–º $50 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            
            if usdt_balance < effective_min_amount:
                self.log_message.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {signal.symbol}: ${usdt_balance:.2f} (–º–∏–Ω–∏–º—É–º ${effective_min_amount})")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (1% –æ—Ç USDT, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –º–∏–Ω–∏–º—É–º–∞ –∏ –Ω–µ –±–æ–ª–µ–µ –º–∞–∫—Å–∏–º—É–º–∞)
            trade_amount = max(min(usdt_balance * 0.01, max_trade_amount), effective_min_amount)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            qty = trade_amount / signal.price
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ API
            min_order_qty = instrument_info['minOrderQty']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
            if qty < min_order_qty:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
                qty = min_order_qty
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
                trade_amount = qty * signal.price
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {qty:.8f}")
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            base_precision = instrument_info.get('basePrecision', '0.00001')
            decimal_places = len(base_precision.split('.')[-1]) if '.' in base_precision else 0
            qty = round(qty, decimal_places)
            
            # –í–ê–ñ–ù–û: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            final_order_value = qty * signal.price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–µ–Ω—å—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
            if final_order_value < effective_min_amount:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                qty = effective_min_amount / signal.price
                # –°–Ω–æ–≤–∞ –æ–∫—Ä—É–≥–ª—è–µ–º
                qty = round(qty, decimal_places)
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                final_order_value = qty * signal.price
                trade_amount = final_order_value
                self.log_message.emit(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {qty:.8f}")
            
            self.log_message.emit(f"üí∞ –ü–û–ö–£–ü–ö–ê {signal.symbol}: ${trade_amount:.2f} USDT ({qty:.6f} {signal.symbol.replace('USDT', '')})")
            self.log_message.emit(f"   –¶–µ–Ω–∞: ${signal.price:.6f}, –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${final_order_value:.2f}, –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∏–Ω–∏–º—É–º: ${effective_min_amount:.2f}")
            self.log_message.emit(f"   –ü—Ä–∏—á–∏–Ω–∞: {signal.reason}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
            order_result = self.bybit_client.place_order(
                category='spot',
                symbol=signal.symbol,
                side='Buy',
                order_type='Market',
                qty=str(qty)
            )
            
            if order_result and order_result.get('retCode') == 0:
                self.log_message.emit(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {signal.symbol} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                self.last_buy_times[signal.symbol] = current_time
                
                # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
                trade_info = {
                    'symbol': signal.symbol,
                    'side': 'BUY',
                    'amount': trade_amount,
                    'qty': qty,
                    'price': signal.price,
                    'confidence': signal.confidence,
                    'reason': signal.reason,
                    'order_id': order_result.get('result', {}).get('orderId'),
                    'timestamp': datetime.now().isoformat()
                }
                self.trade_executed.emit(trade_info)
            else:
                error_msg = order_result.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if order_result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API'
                self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {signal.symbol}: {error_msg}")
            
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ {signal.symbol}: {e}")
    
    def execute_sell_order(self, signal: TradingSignal):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        try:
            base_asset = signal.symbol.replace('USDT', '')
            asset_balance = self.portfolio.get(base_asset, 0)
            
            if asset_balance <= 0:
                self.log_message.emit(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {base_asset} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {asset_balance}")
                return
            
            # –ü—Ä–æ–¥–∞–µ–º 50% –æ—Ç –∏–º–µ—é—â–µ–≥–æ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            sell_amount = asset_balance * 0.5
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å —É—á–µ—Ç–æ–º —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã
            if signal.price > 1000:  # BTC, ETH –∏ –¥—Ä—É–≥–∏–µ –¥–æ—Ä–æ–≥–∏–µ –º–æ–Ω–µ—Ç—ã
                sell_amount = round(sell_amount, 6)
            elif signal.price > 1:   # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤
                sell_amount = round(sell_amount, 4)
            else:                    # –î–µ—à–µ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
                sell_amount = round(sell_amount, 2)
            
            estimated_usdt = sell_amount * signal.price
            
            self.log_message.emit(f"üí∏ –ü–†–û–î–ê–ñ–ê {signal.symbol}: {sell_amount:.6f} {base_asset} ‚âà ${estimated_usdt:.2f}")
            self.log_message.emit(f"   –¶–µ–Ω–∞: ${signal.price:.6f}, –ü—Ä–∏—á–∏–Ω–∞: {signal.reason}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
            order_result = self.bybit_client.place_order(
                category='spot',
                symbol=signal.symbol,
                side='Sell',
                order_type='Market',
                qty=str(sell_amount)
            )
            
            if order_result and order_result.get('retCode') == 0:
                self.log_message.emit(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {signal.symbol} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω")
                
                # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
                trade_info = {
                    'symbol': signal.symbol,
                    'side': 'SELL',
                    'amount': sell_amount,
                    'price': signal.price,
                    'confidence': signal.confidence,
                    'reason': signal.reason,
                    'estimated_usdt': estimated_usdt,
                    'order_id': order_result.get('result', {}).get('orderId'),
                    'timestamp': datetime.now().isoformat()
                }
                self.trade_executed.emit(trade_info)
            else:
                error_msg = order_result.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if order_result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API'
                self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {signal.symbol}: {error_msg}")
            
        except Exception as e:
            self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ {signal.symbol}: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        self.running = False


class TraderMainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã-—Ç–æ—Ä–≥–æ–≤—Ü–∞"""
    
    def __init__(self, enable_trading=False):
        super().__init__()
        self.setWindowTitle("ü§ñ –ü—Ä–æ–≥—Ä–∞–º–º–∞-—Ç–æ—Ä–≥–æ–≤–µ—Ü - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
        self.setGeometry(100, 100, 1200, 800)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.trading_active = False
        self.enable_trading_on_start = enable_trading  # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.current_data = {}
        self.trade_history = []
        self.bybit_client = None
        self.data_collector = None
        self.trading_engine = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã)
        self.setup_ui()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI)
        self.init_api_client()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤
        self.init_threads()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.connect_signals()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        QTimer.singleShot(2000, self.auto_start_trading)  # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger = logging.getLogger(__name__)
    
    def init_api_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            credentials = get_api_credentials()
            self.bybit_client = BybitClient(
                api_key=credentials['api_key'],
                api_secret=credentials['api_secret'],
                testnet=credentials.get('testnet', True)
            )
            self.add_log("‚úÖ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
            self.bybit_client = None
    
    def init_threads(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤"""
        # –ü–æ—Ç–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        self.data_collector = DataCollector()
        
        # –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        if self.bybit_client:
            self.trading_engine = TradingEngine(self.bybit_client, self.enable_trading_on_start)
        else:
            self.trading_engine = None
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = self.create_control_panel()
        main_layout.addWidget(control_panel)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å –∏ —Å–∏–≥–Ω–∞–ª—ã
        left_panel = self.create_left_panel()
        splitter.addWidget(left_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ª–æ–≥–∏
        right_panel = self.create_right_panel()
        splitter.addWidget(right_panel)
        
        splitter.setSizes([600, 600])
        main_layout.addWidget(splitter)
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def create_control_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        panel = QGroupBox("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π")
        layout = QHBoxLayout(panel)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.start_button = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é")
        self.start_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                font-size: 14px;
                font-weight: bold;
                padding: 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
            }
        """)
        self.start_button.clicked.connect(self.start_trading)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.stop_button = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
        self.stop_button.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                font-size: 14px;
                font-weight: bold;
                padding: 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
            }
        """)
        self.stop_button.clicked.connect(self.stop_trading)
        self.stop_button.setEnabled(False)
        
        # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trading_status_label = QLabel("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.trading_status_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                padding: 10px;
                border: 2px solid #e74c3c;
                border-radius: 5px;
                background-color: #fadbd8;
            }
        """)
        
        layout.addWidget(self.start_button)
        layout.addWidget(self.stop_button)
        layout.addStretch()
        layout.addWidget(self.trading_status_label)
        
        return panel
    
    def create_left_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_panel = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        stats_layout = QGridLayout(stats_panel)
        
        self.total_trades_label = QLabel("0")
        self.successful_trades_label = QLabel("0")
        self.total_profit_label = QLabel("$0.00")
        
        stats_layout.addWidget(QLabel("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:"), 0, 0)
        stats_layout.addWidget(self.total_trades_label, 0, 1)
        stats_layout.addWidget(QLabel("–£—Å–ø–µ—à–Ω—ã—Ö:"), 1, 0)
        stats_layout.addWidget(self.successful_trades_label, 1, 1)
        stats_layout.addWidget(QLabel("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:"), 2, 0)
        stats_layout.addWidget(self.total_profit_label, 2, 1)
        
        layout.addWidget(stats_panel)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_panel = QGroupBox("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        signals_layout = QVBoxLayout(signals_panel)
        
        self.signals_table = QTableWidget()
        self.signals_table.setColumnCount(5)
        self.signals_table.setHorizontalHeaderLabels([
            "–°–∏–º–≤–æ–ª", "–°–∏–≥–Ω–∞–ª", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–¶–µ–Ω–∞", "–ü—Ä–∏—á–∏–Ω–∞"
        ])
        self.signals_table.horizontalHeader().setStretchLastSection(True)
        
        signals_layout.addWidget(self.signals_table)
        layout.addWidget(signals_panel)
        
        return widget
    
    def create_right_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤
        logs_panel = QGroupBox("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏")
        logs_layout = QVBoxLayout(logs_panel)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setFont(QFont("Consolas", 9))
        self.log_text.setStyleSheet("""
            QTextEdit {
                background-color: #2c3e50;
                color: #ecf0f1;
                border: 1px solid #34495e;
            }
        """)
        
        logs_layout.addWidget(self.log_text)
        layout.addWidget(logs_panel)
        
        return widget
    
    def connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –°–∏–≥–Ω–∞–ª—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        self.data_collector.data_updated.connect(self.on_data_updated)
        self.data_collector.log_message.connect(self.add_log)
        
        # –°–∏–≥–Ω–∞–ª—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        if self.trading_engine:
            self.trading_engine.trade_executed.connect(self.on_trade_executed)
            self.trading_engine.log_message.connect(self.add_log)
            self.trading_engine.status_changed.connect(self.on_trading_status_changed)
    
    def start_trading(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self.bybit_client:
            self.add_log("‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        self.trading_active = True
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        
        # –í–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –≤ –¥–≤–∏–∂–∫–µ
        if self.trading_engine:
            self.trading_engine.trading_enabled = True
            self.add_log("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞ –≤ –¥–≤–∏–∂–∫–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        if not self.data_collector.isRunning():
            self.data_collector.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        if self.trading_engine and not self.trading_engine.isRunning():
            self.trading_engine.start()
        
        self.add_log("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞")
        self.update_trading_status("üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞")
    
    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.trading_active = False
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –≤ –¥–≤–∏–∂–∫–µ
        if self.trading_engine:
            self.trading_engine.trading_enabled = False
            self.add_log("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –¥–≤–∏–∂–∫–µ")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
        if self.data_collector.isRunning():
            self.data_collector.stop()
            self.data_collector.wait(3000)
        
        if self.trading_engine and self.trading_engine.isRunning():
            self.trading_engine.stop()
            self.trading_engine.wait(3000)
        
        self.add_log("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.update_trading_status("üî¥ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def on_data_updated(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self.current_data = data
        
        if self.trading_active and self.trading_engine:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signal_generator = SignalGenerator(self.logger)
            portfolio = getattr(self.trading_engine, 'portfolio', {})
            signals = signal_generator.generate_signals(data, portfolio)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–∏–≥–Ω–∞–ª–æ–≤
            self.update_signals_table(signals)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            if signals:
                self.trading_engine.add_signals(signals)
    
    def update_signals_table(self, signals: List[TradingSignal]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.signals_table.setRowCount(len(signals))
        
        for i, signal in enumerate(signals):
            self.signals_table.setItem(i, 0, QTableWidgetItem(signal.symbol))
            self.signals_table.setItem(i, 1, QTableWidgetItem(signal.signal))
            self.signals_table.setItem(i, 2, QTableWidgetItem(f"{signal.confidence:.2f}"))
            self.signals_table.setItem(i, 3, QTableWidgetItem(f"${signal.price:.6f}"))
            self.signals_table.setItem(i, 4, QTableWidgetItem(signal.reason))
    
    def on_trade_executed(self, trade_info: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        self.trade_history.append(trade_info)
        self.update_statistics()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É
        symbol = trade_info['symbol']
        side = trade_info['side']
        amount = trade_info.get('amount', 0)
        price = trade_info['price']
        
        if side == 'BUY':
            self.add_log(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ {symbol}: ${amount:.2f} –ø–æ —Ü–µ–Ω–µ ${price:.6f}")
        else:
            estimated_usdt = trade_info.get('estimated_usdt', 0)
            self.add_log(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ {symbol}: {amount:.6f} ‚âà ${estimated_usdt:.2f}")
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_trades = len(self.trade_history)
        self.total_trades_label.setText(str(total_trades))
        
        # –ü–æ–∫–∞ —á—Ç–æ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω—ã–º–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
        self.successful_trades_label.setText(str(total_trades))
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        total_profit = 0.0  # –ü–æ–∫–∞ —á—Ç–æ $0
        self.total_profit_label.setText(f"${total_profit:.2f}")
    
    def on_trading_status_changed(self, status: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.update_trading_status(status)
    
    def update_trading_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.trading_status_label.setText(status)
        self.status_bar.showMessage(status)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if "–∞–∫—Ç–∏–≤–Ω–∞" in status:
            self.trading_status_label.setStyleSheet("""
                QLabel {
                    font-size: 16px;
                    font-weight: bold;
                    padding: 10px;
                    border: 2px solid #27ae60;
                    border-radius: 5px;
                    background-color: #d5f4e6;
                    color: #27ae60;
                }
            """)
        else:
            self.trading_status_label.setStyleSheet("""
                QLabel {
                    font-size: 16px;
                    font-weight: bold;
                    padding: 10px;
                    border: 2px solid #e74c3c;
                    border-radius: 5px;
                    background-color: #fadbd8;
                    color: #e74c3c;
                }
            """)
    
    def add_log(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        self.log_text.append(formatted_message)
        self.logger.info(message)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É
        cursor = self.log_text.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        self.log_text.setTextCursor(cursor)
    
    def auto_start_trading(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            if self.enable_trading_on_start:
                self.add_log("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
                self.start_trading()
            else:
                self.add_log("‚ÑπÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é' –∏–ª–∏ —Ñ–ª–∞–≥ --enable-trading")
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.trading_active:
            self.stop_trading()
        
        event.accept()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≥—Ä–∞–º–º–∞-—Ç–æ—Ä–≥–æ–≤–µ—Ü')
    parser.add_argument('--enable-trading', action='store_true', 
                       help='–í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ')
    args = parser.parse_args()
    
    if not GUI_AVAILABLE:
        print("‚ùå GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    app = QApplication(sys.argv)
    app.setApplicationName("–ü—Ä–æ–≥—Ä–∞–º–º–∞-—Ç–æ—Ä–≥–æ–≤–µ—Ü")
    app.setApplicationVersion("1.0")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = TraderMainWindow(enable_trading=args.enable_trading)
    window.show()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    sys.exit(app.exec())


if __name__ == "__main__":
    main()