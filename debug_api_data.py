#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Bybit API
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

import config
from src.api.bybit_client import BybitClient
import json
import time

def test_api_data_loading():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Bybit API")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        api_key = config.API_KEY
        api_secret = config.API_SECRET
        testnet = config.USE_TESTNET
        
        if not api_key or not api_secret:
            print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
            
        print(f"‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (testnet: {testnet})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    try:
        client = BybitClient(api_key, api_secret, testnet=testnet)
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç API —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    test_symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOTUSDT']
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    test_intervals = ['1', '5', '15', '60', '240', 'D']
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
    test_limits = [10, 50, 100, 200, 500, 1000]
    
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞:")
    print("-" * 60)
    
    results = {}
    
    # –¢–µ—Å—Ç 1: –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    print("\nüî∏ –¢–µ—Å—Ç 1: –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∏–Ω—Ç–µ—Ä–≤–∞–ª=60, –ª–∏–º–∏—Ç=200)")
    for symbol in test_symbols:
        try:
            result = client.get_klines(
                category='spot',
                symbol=symbol,
                interval='60',
                limit=200
            )
            
            if result and 'list' in result:
                count = len(result['list'])
                print(f"  {symbol}: {count} –∑–∞–ø–∏—Å–µ–π")
                results[f"{symbol}_basic"] = count
            else:
                print(f"  {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                results[f"{symbol}_basic"] = 0
                
        except Exception as e:
            print(f"  {symbol}: –û—à–∏–±–∫–∞ - {e}")
            results[f"{symbol}_basic"] = -1
        
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –¢–µ—Å—Ç 2: –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è BTCUSDT
    print("\nüî∏ –¢–µ—Å—Ç 2: –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è BTCUSDT (–ª–∏–º–∏—Ç=200)")
    for interval in test_intervals:
        try:
            result = client.get_klines(
                category='spot',
                symbol='BTCUSDT',
                interval=interval,
                limit=200
            )
            
            if result and 'list' in result:
                count = len(result['list'])
                print(f"  –ò–Ω—Ç–µ—Ä–≤–∞–ª {interval}: {count} –∑–∞–ø–∏—Å–µ–π")
                results[f"BTCUSDT_interval_{interval}"] = count
            else:
                print(f"  –ò–Ω—Ç–µ—Ä–≤–∞–ª {interval}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                results[f"BTCUSDT_interval_{interval}"] = 0
                
        except Exception as e:
            print(f"  –ò–Ω—Ç–µ—Ä–≤–∞–ª {interval}: –û—à–∏–±–∫–∞ - {e}")
            results[f"BTCUSDT_interval_{interval}"] = -1
        
        time.sleep(0.1)
    
    # –¢–µ—Å—Ç 3: –†–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è BTCUSDT
    print("\nüî∏ –¢–µ—Å—Ç 3: –†–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è BTCUSDT (–∏–Ω—Ç–µ—Ä–≤–∞–ª=60)")
    for limit in test_limits:
        try:
            result = client.get_klines(
                category='spot',
                symbol='BTCUSDT',
                interval='60',
                limit=limit
            )
            
            if result and 'list' in result:
                count = len(result['list'])
                print(f"  –õ–∏–º–∏—Ç {limit}: {count} –∑–∞–ø–∏—Å–µ–π")
                results[f"BTCUSDT_limit_{limit}"] = count
            else:
                print(f"  –õ–∏–º–∏—Ç {limit}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                results[f"BTCUSDT_limit_{limit}"] = 0
                
        except Exception as e:
            print(f"  –õ–∏–º–∏—Ç {limit}: –û—à–∏–±–∫–∞ - {e}")
            results[f"BTCUSDT_limit_{limit}"] = -1
        
        time.sleep(0.1)
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    print("\nüî∏ –¢–µ—Å—Ç 4: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ API")
    try:
        result = client.get_klines(
            category='spot',
            symbol='BTCUSDT',
            interval='60',
            limit=10
        )
        
        print(f"  –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
        print(f"  –ö–ª—é—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {list(result.keys()) if isinstance(result, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
        
        if result and 'list' in result:
            klines = result['list']
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(klines)}")
            
            if klines:
                print(f"  –§–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏: {klines[0]}")
                print(f"  –î–ª–∏–Ω–∞ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏: {len(klines[0]) if isinstance(klines[0], (list, tuple)) else '–ù–µ —Å–ø–∏—Å–æ–∫'}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open('api_response_sample.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        print("  ‚úÖ –û–±—Ä–∞–∑–µ—Ü –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ api_response_sample.json")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    print("\nüî∏ –¢–µ—Å—Ç 5: –ó–∞–ø—Ä–æ—Å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    try:
        # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        end_time = int(time.time() * 1000)
        start_time = end_time - (24 * 60 * 60 * 1000)  # 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        
        result = client.get_klines(
            category='spot',
            symbol='BTCUSDT',
            interval='60',
            limit=200,
            start=start_time,
            end=end_time
        )
        
        if result and 'list' in result:
            count = len(result['list'])
            print(f"  –° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {count} –∑–∞–ø–∏—Å–µ–π")
            results['BTCUSDT_with_time'] = count
        else:
            print(f"  –° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            results['BTCUSDT_with_time'] = 0
            
    except Exception as e:
        print(f"  –° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: –û—à–∏–±–∫–∞ - {e}")
        results['BTCUSDT_with_time'] = -1
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("=" * 60)
    
    successful_requests = sum(1 for v in results.values() if v > 0)
    failed_requests = sum(1 for v in results.values() if v == -1)
    empty_requests = sum(1 for v in results.values() if v == 0)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {failed_requests}")
    print(f"‚ö†Ô∏è –ü—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {empty_requests}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    successful_counts = [v for v in results.values() if v > 0]
    if successful_counts:
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π:")
        print(f"  –ú–∏–Ω–∏–º—É–º: {min(successful_counts)}")
        print(f"  –ú–∞–∫—Å–∏–º—É–º: {max(successful_counts)}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {sum(successful_counts) / len(successful_counts):.1f}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('api_test_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ api_test_results.json")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("-" * 60)
    
    if all(v <= 3 for v in successful_counts if v > 0):
        print("‚ö†Ô∏è –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ—á–µ–Ω—å –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (‚â§3 –∑–∞–ø–∏—Å–∏)")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è testnet API")
        print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
        print("   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    
    if failed_requests > successful_requests:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π")
        print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API")
        print("   - –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤")

if __name__ == "__main__":
    test_api_data_loading()