#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Portfolio Viewer - –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç API Bybit –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ –∏ –º–æ–Ω–µ—Ç–∞—Ö
"""

import sys
import os
import logging
import traceback
from datetime import datetime
from decimal import Decimal
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

try:
    from PySide6.QtWidgets import (
        QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget,
        QTableWidget, QTableWidgetItem, QPushButton, QLabel, QGroupBox,
        QProgressBar, QTextEdit, QTabWidget, QGridLayout, QFrame,
        QHeaderView, QMessageBox, QSplitter
    )
    from PySide6.QtCore import QThread, Signal, QTimer, Qt
    from PySide6.QtGui import QFont, QPalette, QColor
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: PySide6 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PySide6")
    sys.exit(1)

try:
    from src.api.bybit_client import BybitClient
    from config import API_KEY, API_SECRET
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    traceback.print_exc()
    sys.exit(1)


class BalanceWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞"""
    
    balance_updated = Signal(dict)
    fund_balance_updated = Signal(dict)
    error_occurred = Signal(str)
    log_message = Signal(str)
    
    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        super().__init__()
        self.api_key = api_key
        self.api_secret = api_secret
        self.testnet = testnet
        self.running = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API
        self.bybit_client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_dir = Path(__file__).parent / 'logs'
        log_dir.mkdir(exist_ok=True)
        
        log_file = log_dir / f'portfolio_viewer_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª: {log_file}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.running = True
            self.log_message.emit("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API
            self.bybit_client = BybitClient(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=self.testnet
            )
            
            self.log_message.emit(f"‚úÖ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (testnet: {self.testnet})")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            while self.running:
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ UNIFIED –±–∞–ª–∞–Ω—Å–∞
                    self.log_message.emit("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ UNIFIED –±–∞–ª–∞–Ω—Å–∞...")
                    unified_balance = self.bybit_client.get_unified_balance_flat()
                    if unified_balance:
                        self.balance_updated.emit(unified_balance)
                        self.log_message.emit("‚úÖ UNIFIED –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ FUND –±–∞–ª–∞–Ω—Å–∞
                    self.log_message.emit("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ FUND –±–∞–ª–∞–Ω—Å–∞...")
                    fund_balance = self.bybit_client.get_fund_balance_flat()
                    if fund_balance:
                        self.fund_balance_updated.emit(fund_balance)
                        self.log_message.emit("‚úÖ FUND –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
                    self.logger.error(error_msg)
                    self.error_occurred.emit(error_msg)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (30 —Å–µ–∫—É–Ω–¥)
                self.msleep(30000)
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ: {str(e)}"
            self.logger.error(error_msg)
            self.error_occurred.emit(error_msg)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        self.running = False
        self.quit()
        self.wait()


class PortfolioViewer(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Portfolio Viewer - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
        self.setGeometry(100, 100, 1200, 800)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.balance_worker = None
        self.current_unified_balance = {}
        self.current_fund_balance = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞
        self.init_balance_worker()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("Portfolio Viewer")
        title_label.setAlignment(Qt.AlignCenter)
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        main_layout.addWidget(title_label)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_layout = QHBoxLayout()
        
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.refresh_button.clicked.connect(self.manual_refresh)
        controls_layout.addWidget(self.refresh_button)
        
        self.start_button = QPushButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        self.start_button.clicked.connect(self.start_auto_update)
        controls_layout.addWidget(self.start_button)
        
        self.stop_button = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        self.stop_button.clicked.connect(self.stop_auto_update)
        self.stop_button.setEnabled(False)
        controls_layout.addWidget(self.stop_button)
        
        controls_layout.addStretch()
        main_layout.addLayout(controls_layout)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs = QTabWidget()
        main_layout.addWidget(self.tabs)
        
        # –í–∫–ª–∞–¥–∫–∞ UNIFIED –±–∞–ª–∞–Ω—Å–∞
        self.create_unified_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ FUND –±–∞–ª–∞–Ω—Å–∞
        self.create_fund_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
        self.create_logs_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        main_layout.addWidget(self.status_label)
    
    def create_unified_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ UNIFIED –±–∞–ª–∞–Ω—Å–∞"""
        unified_widget = QWidget()
        layout = QVBoxLayout(unified_widget)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_group = QGroupBox("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è UNIFIED –∫–æ—à–µ–ª—å–∫–∞")
        info_layout = QGridLayout(info_group)
        
        self.unified_total_label = QLabel("–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: $0.00")
        self.unified_total_label.setFont(QFont("Arial", 12, QFont.Bold))
        info_layout.addWidget(self.unified_total_label, 0, 0)
        
        self.unified_available_label = QLabel("–î–æ—Å—Ç—É–ø–Ω–æ: $0.00")
        info_layout.addWidget(self.unified_available_label, 0, 1)
        
        self.unified_coins_count_label = QLabel("–ú–æ–Ω–µ—Ç: 0")
        info_layout.addWidget(self.unified_coins_count_label, 1, 0)
        
        layout.addWidget(info_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–æ–Ω–µ—Ç
        coins_group = QGroupBox("–ú–æ–Ω–µ—Ç—ã –≤ UNIFIED –∫–æ—à–µ–ª—å–∫–µ")
        coins_layout = QVBoxLayout(coins_group)
        
        self.unified_table = QTableWidget()
        self.unified_table.setColumnCount(4)
        self.unified_table.setHorizontalHeaderLabels([
            "–ú–æ–Ω–µ—Ç–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "USD —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.unified_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setSectionResizeMode(2, QHeaderView.Stretch)
        header.setSectionResizeMode(3, QHeaderView.Stretch)
        
        coins_layout.addWidget(self.unified_table)
        layout.addWidget(coins_group)
        
        self.tabs.addTab(unified_widget, "UNIFIED –ö–æ—à–µ–ª–µ–∫")
    
    def create_fund_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ FUND –±–∞–ª–∞–Ω—Å–∞"""
        fund_widget = QWidget()
        layout = QVBoxLayout(fund_widget)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_group = QGroupBox("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è FUND –∫–æ—à–µ–ª—å–∫–∞")
        info_layout = QGridLayout(info_group)
        
        self.fund_coins_count_label = QLabel("–ú–æ–Ω–µ—Ç: 0")
        info_layout.addWidget(self.fund_coins_count_label, 0, 0)
        
        layout.addWidget(info_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–æ–Ω–µ—Ç
        coins_group = QGroupBox("–ú–æ–Ω–µ—Ç—ã –≤ FUND –∫–æ—à–µ–ª—å–∫–µ")
        coins_layout = QVBoxLayout(coins_group)
        
        self.fund_table = QTableWidget()
        self.fund_table.setColumnCount(2)
        self.fund_table.setHorizontalHeaderLabels([
            "–ú–æ–Ω–µ—Ç–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.fund_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        
        coins_layout.addWidget(self.fund_table)
        layout.addWidget(coins_group)
        
        self.tabs.addTab(fund_widget, "FUND –ö–æ—à–µ–ª–µ–∫")
    
    def create_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        logs_widget = QWidget()
        layout = QVBoxLayout(logs_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        logs_label = QLabel("–õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")
        logs_label.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(logs_label)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_text = QTextEdit()
        self.logs_text.setReadOnly(True)
        self.logs_text.setFont(QFont("Consolas", 9))
        layout.addWidget(self.logs_text)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        clear_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        clear_button.clicked.connect(self.clear_logs)
        layout.addWidget(clear_button)
        
        self.tabs.addTab(logs_widget, "–õ–æ–≥–∏")
    
    def init_balance_worker(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            self.balance_worker = BalanceWorker(API_KEY, API_SECRET, testnet=True)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            self.balance_worker.balance_updated.connect(self.update_unified_balance)
            self.balance_worker.fund_balance_updated.connect(self.update_fund_balance)
            self.balance_worker.error_occurred.connect(self.handle_error)
            self.balance_worker.log_message.connect(self.add_log_message)
            
            self.add_log_message("‚úÖ –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}"
            self.add_log_message(error_msg)
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)
    
    def start_auto_update(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.balance_worker and not self.balance_worker.isRunning():
            self.balance_worker.start()
            self.start_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            self.status_label.setText("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            self.add_log_message("üöÄ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    
    def stop_auto_update(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.balance_worker and self.balance_worker.isRunning():
            self.balance_worker.stop()
            self.start_button.setEnabled(True)
            self.stop_button.setEnabled(False)
            self.status_label.setText("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.add_log_message("‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def manual_refresh(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.balance_worker:
            self.add_log_message("‚ùå –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        try:
            self.add_log_message("üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            client = BybitClient(API_KEY, API_SECRET, testnet=True)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ UNIFIED –±–∞–ª–∞–Ω—Å–∞
            unified_balance = client.get_unified_balance_flat()
            if unified_balance:
                self.update_unified_balance(unified_balance)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ FUND –±–∞–ª–∞–Ω—Å–∞
            fund_balance = client.get_fund_balance_flat()
            if fund_balance:
                self.update_fund_balance(fund_balance)
            
            self.add_log_message("‚úÖ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"
            self.add_log_message(error_msg)
            self.logger.error(error_msg)
    
    def update_unified_balance(self, balance_info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UNIFIED –±–∞–ª–∞–Ω—Å–∞"""
        try:
            self.current_unified_balance = balance_info
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            total_usd = balance_info.get('total_wallet_usd', Decimal('0'))
            available_usd = balance_info.get('total_available_usd', Decimal('0'))
            coins = balance_info.get('coins', {})
            
            self.unified_total_label.setText(f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${float(total_usd):.2f}")
            self.unified_available_label.setText(f"–î–æ—Å—Ç—É–ø–Ω–æ: ${float(available_usd):.2f}")
            self.unified_coins_count_label.setText(f"–ú–æ–Ω–µ—Ç: {len(coins)}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–æ–Ω–µ—Ç
            self.unified_table.setRowCount(0)
            
            for coin_name, balance in coins.items():
                if float(balance) > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º > 0
                    row_position = self.unified_table.rowCount()
                    self.unified_table.insertRow(row_position)
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                    self.unified_table.setItem(row_position, 0, QTableWidgetItem(coin_name))
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    balance_str = f"{float(balance):.8f}".rstrip('0').rstrip('.') if float(balance) < 1 else f"{float(balance):.2f}"
                    self.unified_table.setItem(row_position, 1, QTableWidgetItem(balance_str))
                    
                    # USD —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–æ–∫–∞ N/A)
                    self.unified_table.setItem(row_position, 2, QTableWidgetItem("N/A"))
                    
                    # –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É (–ø–æ–∫–∞ N/A)
                    self.unified_table.setItem(row_position, 3, QTableWidgetItem("N/A"))
            
            self.add_log_message(f"‚úÖ UNIFIED –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {len(coins)} –º–æ–Ω–µ—Ç, ${float(total_usd):.2f}")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UNIFIED –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
            self.add_log_message(error_msg)
            self.logger.error(error_msg)
    
    def update_fund_balance(self, balance_info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FUND –±–∞–ª–∞–Ω—Å–∞"""
        try:
            self.current_fund_balance = balance_info
            
            coins = balance_info.get('coins', {})
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            self.fund_coins_count_label.setText(f"–ú–æ–Ω–µ—Ç: {len(coins)}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–æ–Ω–µ—Ç
            self.fund_table.setRowCount(0)
            
            for coin_name, balance in coins.items():
                if float(balance) > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º > 0
                    row_position = self.fund_table.rowCount()
                    self.fund_table.insertRow(row_position)
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                    self.fund_table.setItem(row_position, 0, QTableWidgetItem(coin_name))
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    balance_str = f"{float(balance):.8f}".rstrip('0').rstrip('.') if float(balance) < 1 else f"{float(balance):.2f}"
                    self.fund_table.setItem(row_position, 1, QTableWidgetItem(balance_str))
            
            self.add_log_message(f"‚úÖ FUND –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {len(coins)} –º–æ–Ω–µ—Ç")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è FUND –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
            self.add_log_message(error_msg)
            self.logger.error(error_msg)
    
    def handle_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.add_log_message(f"‚ùå {error_message}")
        self.status_label.setText(f"–û—à–∏–±–∫–∞: {error_message}")
    
    def add_log_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        self.logs_text.append(formatted_message)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        cursor = self.logs_text.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        self.logs_text.setTextCursor(cursor)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        self.logger.info(message)
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs_text.clear()
        self.add_log_message("üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.balance_worker and self.balance_worker.isRunning():
            self.balance_worker.stop()
        event.accept()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = QApplication(sys.argv)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
    if not API_KEY or not API_SECRET:
        QMessageBox.critical(None, "–û—à–∏–±–∫–∞", 
                           "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n"
                           "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.py")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    window = PortfolioViewer()
    window.show()
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sys.exit(app.exec())


if __name__ == "__main__":
    main()