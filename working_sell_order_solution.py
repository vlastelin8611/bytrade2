#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–ê–ë–û–ß–ï–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ Bybit Testnet
====================================================

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ 
–≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT.

–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 29.09.2025
–°—Ç–∞—Ç—É—Å: ‚úÖ –†–ê–ë–û–¢–ê–ï–¢
"""

import asyncio
from PySide6.QtCore import QTimer

class WorkingSellOrderSolution:
    """
    –ö–ª–∞—Å—Å —Å —Ä–∞–±–æ—á–∏–º —Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ Bybit
    """
    
    def sell_cheapest_asset_fixed_amount(self):
        """
        ‚úÖ –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î: –ü—Ä–æ–¥–∞–∂–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –Ω–∞ —Å—É–º–º—É 5 USDT
        
        –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è:
        1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        2. –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ (–∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã)
        3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ marketUnit='quoteCoin' –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
        4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QTimer
        5. –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏
        """
        try:
            self.add_log_message("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            self.sell_lowest_btn.setEnabled(False)
            self.sell_lowest_btn.setText("‚è≥ –ü—Ä–æ–¥–∞–∂–∞...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            def execute_sell_async():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
                    if not hasattr(self, 'trading_worker') or self.trading_worker is None:
                        self.add_log_message("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞
                    if not hasattr(self.trading_worker, 'bybit_client') or self.trading_worker.bybit_client is None:
                        self.add_log_message("‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        return
                    
                    # üîë –ö–õ–Æ–ß–ï–í–ê–Ø –ß–ê–°–¢–¨: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                    self.add_log_message("üìä –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å...")
                    balance = self.trading_worker.bybit_client.get_unified_balance_flat()
                    
                    if not balance or not balance.get('coins'):
                        self.add_log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ")
                        return
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã)
                    tradeable_coins = []
                    for coin in balance['coins']:
                        coin_name = coin.get('coin', '')
                        wallet_balance = float(coin.get('walletBalance', 0))
                        usd_value = float(coin.get('usdValue', 0))
                        
                        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –º–æ–Ω–µ—Ç—ã —Å –æ—á–µ–Ω—å –º–∞–ª—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                        if (coin_name not in ['USDT', 'USDC', 'BUSD', 'DAI'] and 
                            wallet_balance > 0 and usd_value > 1.0):  # –ú–∏–Ω–∏–º—É–º $1
                            tradeable_coins.append({
                                'coin': coin_name,
                                'balance': wallet_balance,
                                'usd_value': usd_value
                            })
                    
                    if not tradeable_coins:
                        self.add_log_message("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–º–∏–Ω–∏–º—É–º $1)")
                        return
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π USD —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
                    lowest_coin = min(tradeable_coins, key=lambda c: c['usd_value'])
                    symbol = lowest_coin['coin'] + "USDT"
                    
                    self.add_log_message(f"üéØ –í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {symbol}")
                    self.add_log_message(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: ${lowest_coin['usd_value']:.2f}")
                    self.add_log_message(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {lowest_coin['balance']:.6f} {lowest_coin['coin']}")
                    
                    # üîë –ö–õ–Æ–ß–ï–í–ê–Ø –ß–ê–°–¢–¨: –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    try:
                        # –ü—Ä–æ–¥–∞–µ–º –Ω–∞ —Å—É–º–º—É 5 USDT (–∏—Å–ø–æ–ª—å–∑—É–µ–º marketUnit='quoteCoin')
                        sell_amount_usdt = "5"
                        self.add_log_message(f"üí∏ –†–∞–∑–º–µ—â–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol} –Ω–∞ {sell_amount_usdt} USDT...")
                        
                        # ‚úÖ –†–ê–ë–û–ß–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:
                        order_result = self.trading_worker.bybit_client.place_order(
                            category='spot',                    # –°–ø–æ—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
                            symbol=symbol,                      # –ù–∞–ø—Ä–∏–º–µ—Ä, ETHUSDT
                            side='Sell',                        # –ü—Ä–æ–¥–∞–∂–∞
                            order_type='Market',                # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                            qty=sell_amount_usdt,               # –°—É–º–º–∞ –≤ USDT (5)
                            marketUnit='quoteCoin'              # üîë –ö–õ–Æ–ß–ï–í–û–ô –ü–ê–†–ê–ú–ï–¢–†!
                        )
                        
                        self.add_log_message(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç API: {order_result}")
                        
                        if order_result:
                            self.add_log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol} –Ω–∞ {sell_amount_usdt} USDT")
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
                            try:
                                tickers = self.trading_worker.bybit_client.get_tickers(category="spot")
                                coin_price = 0
                                if tickers and isinstance(tickers, list):
                                    for ticker in tickers:
                                        if ticker.get('symbol') == symbol:
                                            coin_price = float(ticker.get('lastPrice', 0))
                                            break
                                if coin_price > 0:
                                    estimated_qty = float(sell_amount_usdt) / coin_price
                                    self.add_log_message(f"üìä –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ~{estimated_qty:.6f} {lowest_coin['coin']}")
                            except Exception as price_error:
                                self.add_log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {price_error}")
                        else:
                            self.add_log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol}")
                            
                    except Exception as api_error:
                        self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ {symbol}: {str(api_error)}")
                        self.logger.error(f"API Error: {api_error}")
                    
                except Exception as e:
                    self.add_log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ sell_lowest_ticker: {e}")
                finally:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    self.sell_lowest_btn.setEnabled(True)
                    self.sell_lowest_btn.setText("üí∏ –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ QTimer
            QTimer.singleShot(100, execute_sell_async)
            
        except Exception as e:
            self.add_log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ sell_lowest_ticker: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.sell_lowest_btn.setEnabled(True)
            self.sell_lowest_btn.setText("üí∏ –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π")


# üîß –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –í–ê–†–ò–ê–ù–¢–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø

def sell_btc_for_usdt(api_client, amount_usdt: str = "10"):
    """
    –ü—Ä–æ–¥–∞–∂–∞ BTC –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT
    """
    return api_client.place_order(
        category='spot',
        symbol='BTCUSDT',
        side='Sell',
        order_type='Market',
        qty=amount_usdt,
        marketUnit='quoteCoin'  # qty –≤ USDT
    )

def sell_eth_fixed_quantity(api_client, eth_quantity: str = "0.01"):
    """
    –ü—Ä–æ–¥–∞–∂–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ETH
    """
    return api_client.place_order(
        category='spot',
        symbol='ETHUSDT',
        side='Sell',
        order_type='Market',
        qty=eth_quantity,
        marketUnit='baseCoin'  # qty –≤ ETH
    )

def sell_all_of_coin(api_client, coin_symbol: str, balance: float):
    """
    –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
    """
    return api_client.place_order(
        category='spot',
        symbol=f'{coin_symbol}USDT',
        side='Sell',
        order_type='Market',
        qty=str(balance),
        marketUnit='baseCoin'  # qty –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
    )


# üìä –ü–†–ò–ú–ï–†–´ –£–°–ü–ï–®–ù–´–• –õ–û–ì–û–í

"""
–£–°–ü–ï–®–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...
üìä –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å...
üéØ –í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: ETHUSDT
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: $17.09
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0.004137 ETH
üí∏ –†–∞–∑–º–µ—â–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ETHUSDT –Ω–∞ 5 USDT...
üìã –†–µ–∑—É–ª—å—Ç–∞—Ç API: {'retCode': 0, 'retMsg': 'OK', 'result': {...}}
‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ETHUSDT –Ω–∞ 5 USDT
üìä –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ~0.001037 ETH
"""


# üö® –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø

"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ú–û–ú–ï–ù–¢–´:

1. marketUnit='quoteCoin' - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Å—É–º–º—É
2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ get_unified_balance_flat()
3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤: ['USDT', 'USDC', 'BUSD', 'DAI']
4. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: $1 –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
5. –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É: 5 USDT

–õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –ê–ö–¢–ò–í–ê:
- –ò—Å–∫–ª—é—á–∞—é—Ç—Å—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
- –ò—Å–∫–ª—é—á–∞—é—Ç—Å—è –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω–µ–µ $1
- –í—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π USD —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è min() —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞

–ü–ê–†–ê–ú–ï–¢–†–´ marketUnit:
- 'quoteCoin' - qty –≤ –≤–∞–ª—é—Ç–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ (USDT –¥–ª—è ETHUSDT)
- 'baseCoin' - qty –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (ETH –¥–ª—è ETHUSDT)
"""


# üîç –ê–õ–ì–û–†–ò–¢–ú –ü–û–ò–°–ö–ê –°–ê–ú–û–ì–û –î–ï–®–ï–í–û–ì–û –ê–ö–¢–ò–í–ê

def find_cheapest_tradeable_asset(balance_data):
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    """
    tradeable_coins = []
    
    for coin in balance_data['coins']:
        coin_name = coin.get('coin', '')
        wallet_balance = float(coin.get('walletBalance', 0))
        usd_value = float(coin.get('usdValue', 0))
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞:
        # 1. –ù–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω
        # 2. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        # 3. –°—Ç–æ–∏–º–æ—Å—Ç—å –±–æ–ª—å—à–µ $1
        if (coin_name not in ['USDT', 'USDC', 'BUSD', 'DAI'] and 
            wallet_balance > 0 and usd_value > 1.0):
            
            tradeable_coins.append({
                'coin': coin_name,
                'balance': wallet_balance,
                'usd_value': usd_value,
                'symbol': coin_name + 'USDT'
            })
    
    if not tradeable_coins:
        return None
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç–∏–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π USD —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    return min(tradeable_coins, key=lambda c: c['usd_value'])


if __name__ == "__main__":
    print("‚úÖ –†–∞–±–æ—á–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ Bybit –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    print("üìñ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: sell_cheapest_asset_fixed_amount()")
    print("üîë –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: marketUnit='quoteCoin', qty='5' USDT")
    print("üéØ –õ–æ–≥–∏–∫–∞: –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ > $1, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã")